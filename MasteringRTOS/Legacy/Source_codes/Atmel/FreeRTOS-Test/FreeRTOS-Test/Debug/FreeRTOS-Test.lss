
FreeRTOS-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000065f8  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000984  20070000  000865f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000bad0  20070988  00086f80  00020984  2**3
                  ALLOC
  3 .stack        00002000  2007c458  00092a50  00020984  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020984  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000209ad  2**0
                  CONTENTS, READONLY
  6 .debug_info   000122af  00000000  00000000  00020a06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000350e  00000000  00000000  00032cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a6cb  00000000  00000000  000361c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ee8  00000000  00000000  0004088e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e90  00000000  00000000  00041776  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b550  00000000  00000000  00042606  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016362  00000000  00000000  0005db56  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072ebb  00000000  00000000  00073eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002cf8  00000000  00000000  000e6d74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007e458 	.word	0x2007e458
   80004:	00082161 	.word	0x00082161
   80008:	0008215d 	.word	0x0008215d
   8000c:	0008215d 	.word	0x0008215d
   80010:	0008215d 	.word	0x0008215d
   80014:	0008215d 	.word	0x0008215d
   80018:	0008215d 	.word	0x0008215d
	...
   8002c:	00080335 	.word	0x00080335
   80030:	0008215d 	.word	0x0008215d
   80034:	00000000 	.word	0x00000000
   80038:	000803b1 	.word	0x000803b1
   8003c:	000803ed 	.word	0x000803ed
   80040:	0008215d 	.word	0x0008215d
   80044:	0008215d 	.word	0x0008215d
   80048:	0008215d 	.word	0x0008215d
   8004c:	0008215d 	.word	0x0008215d
   80050:	0008215d 	.word	0x0008215d
   80054:	0008215d 	.word	0x0008215d
   80058:	0008215d 	.word	0x0008215d
   8005c:	0008215d 	.word	0x0008215d
   80060:	0008215d 	.word	0x0008215d
   80064:	0008215d 	.word	0x0008215d
   80068:	00000000 	.word	0x00000000
   8006c:	00081fcd 	.word	0x00081fcd
   80070:	00081fe1 	.word	0x00081fe1
   80074:	00081ff5 	.word	0x00081ff5
   80078:	00082009 	.word	0x00082009
	...
   80084:	0008215d 	.word	0x0008215d
   80088:	0008215d 	.word	0x0008215d
   8008c:	0008215d 	.word	0x0008215d
   80090:	0008215d 	.word	0x0008215d
   80094:	0008215d 	.word	0x0008215d
   80098:	0008215d 	.word	0x0008215d
   8009c:	0008215d 	.word	0x0008215d
   800a0:	0008215d 	.word	0x0008215d
   800a4:	00000000 	.word	0x00000000
   800a8:	0008215d 	.word	0x0008215d
   800ac:	0008215d 	.word	0x0008215d
   800b0:	0008215d 	.word	0x0008215d
   800b4:	0008215d 	.word	0x0008215d
   800b8:	0008215d 	.word	0x0008215d
   800bc:	0008215d 	.word	0x0008215d
   800c0:	0008215d 	.word	0x0008215d
   800c4:	0008215d 	.word	0x0008215d
   800c8:	0008215d 	.word	0x0008215d
   800cc:	0008215d 	.word	0x0008215d
   800d0:	0008215d 	.word	0x0008215d
   800d4:	0008215d 	.word	0x0008215d
   800d8:	0008215d 	.word	0x0008215d
   800dc:	0008215d 	.word	0x0008215d
   800e0:	0008215d 	.word	0x0008215d
   800e4:	0008215d 	.word	0x0008215d
   800e8:	0008215d 	.word	0x0008215d
   800ec:	0008215d 	.word	0x0008215d
   800f0:	0008215d 	.word	0x0008215d

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070988 	.word	0x20070988
   80110:	00000000 	.word	0x00000000
   80114:	000865f8 	.word	0x000865f8

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	2007098c 	.word	0x2007098c
   80144:	000865f8 	.word	0x000865f8
   80148:	000865f8 	.word	0x000865f8
   8014c:	00000000 	.word	0x00000000

00080150 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   80150:	b990      	cbnz	r0, 80178 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80156:	460c      	mov	r4, r1
   80158:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8015a:	2a00      	cmp	r2, #0
   8015c:	dd0f      	ble.n	8017e <_read+0x2e>
   8015e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80160:	4e08      	ldr	r6, [pc, #32]	; (80184 <_read+0x34>)
   80162:	4d09      	ldr	r5, [pc, #36]	; (80188 <_read+0x38>)
   80164:	6830      	ldr	r0, [r6, #0]
   80166:	4621      	mov	r1, r4
   80168:	682b      	ldr	r3, [r5, #0]
   8016a:	4798      	blx	r3
		ptr++;
   8016c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8016e:	42a7      	cmp	r7, r4
   80170:	d1f8      	bne.n	80164 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80172:	4640      	mov	r0, r8
   80174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80178:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   8017c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8017e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   80180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80184:	2007ac6c 	.word	0x2007ac6c
   80188:	2007ac64 	.word	0x2007ac64

0008018c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8018c:	6943      	ldr	r3, [r0, #20]
   8018e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80192:	bf1d      	ittte	ne
   80194:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80198:	61c1      	strne	r1, [r0, #28]
	return 0;
   8019a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8019c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8019e:	4770      	bx	lr

000801a0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   801a0:	6943      	ldr	r3, [r0, #20]
   801a2:	f013 0f01 	tst.w	r3, #1
   801a6:	d005      	beq.n	801b4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   801a8:	6983      	ldr	r3, [r0, #24]
   801aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   801ae:	600b      	str	r3, [r1, #0]

	return 0;
   801b0:	2000      	movs	r0, #0
   801b2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   801b4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   801b6:	4770      	bx	lr

000801b8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   801b8:	3801      	subs	r0, #1
   801ba:	2802      	cmp	r0, #2
   801bc:	d815      	bhi.n	801ea <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   801be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801c2:	460e      	mov	r6, r1
   801c4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   801c6:	b19a      	cbz	r2, 801f0 <_write+0x38>
   801c8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   801ca:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80204 <_write+0x4c>
   801ce:	4f0c      	ldr	r7, [pc, #48]	; (80200 <_write+0x48>)
   801d0:	f8d8 0000 	ldr.w	r0, [r8]
   801d4:	f815 1b01 	ldrb.w	r1, [r5], #1
   801d8:	683b      	ldr	r3, [r7, #0]
   801da:	4798      	blx	r3
   801dc:	2800      	cmp	r0, #0
   801de:	db0a      	blt.n	801f6 <_write+0x3e>
   801e0:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   801e2:	3c01      	subs	r4, #1
   801e4:	d1f4      	bne.n	801d0 <_write+0x18>
   801e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   801ea:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   801ee:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   801f0:	2000      	movs	r0, #0
   801f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   801f6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   801fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   801fe:	bf00      	nop
   80200:	2007ac68 	.word	0x2007ac68
   80204:	2007ac6c 	.word	0x2007ac6c

00080208 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80208:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8020a:	23ac      	movs	r3, #172	; 0xac
   8020c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8020e:	680b      	ldr	r3, [r1, #0]
   80210:	684a      	ldr	r2, [r1, #4]
   80212:	fbb3 f3f2 	udiv	r3, r3, r2
   80216:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80218:	1e5c      	subs	r4, r3, #1
   8021a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8021e:	4294      	cmp	r4, r2
   80220:	d80a      	bhi.n	80238 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80222:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80224:	688b      	ldr	r3, [r1, #8]
   80226:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80228:	f240 2302 	movw	r3, #514	; 0x202
   8022c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80230:	2350      	movs	r3, #80	; 0x50
   80232:	6003      	str	r3, [r0, #0]

	return 0;
   80234:	2000      	movs	r0, #0
   80236:	e000      	b.n	8023a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80238:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8023a:	bc10      	pop	{r4}
   8023c:	4770      	bx	lr
   8023e:	bf00      	nop

00080240 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80240:	6943      	ldr	r3, [r0, #20]
   80242:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80246:	bf1a      	itte	ne
   80248:	61c1      	strne	r1, [r0, #28]
	return 0;
   8024a:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   8024c:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8024e:	4770      	bx	lr

00080250 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80250:	6943      	ldr	r3, [r0, #20]
   80252:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80256:	bf1d      	ittte	ne
   80258:	6983      	ldrne	r3, [r0, #24]
   8025a:	700b      	strbne	r3, [r1, #0]
	return 0;
   8025c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8025e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80260:	4770      	bx	lr
   80262:	bf00      	nop

00080264 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80264:	f100 0308 	add.w	r3, r0, #8
   80268:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   8026a:	f04f 32ff 	mov.w	r2, #4294967295
   8026e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80270:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   80272:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80274:	2300      	movs	r3, #0
   80276:	6003      	str	r3, [r0, #0]
   80278:	4770      	bx	lr
   8027a:	bf00      	nop

0008027c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   8027c:	2300      	movs	r3, #0
   8027e:	6103      	str	r3, [r0, #16]
   80280:	4770      	bx	lr
   80282:	bf00      	nop

00080284 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80284:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80286:	685a      	ldr	r2, [r3, #4]
   80288:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   8028a:	6842      	ldr	r2, [r0, #4]
   8028c:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8028e:	685a      	ldr	r2, [r3, #4]
   80290:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80292:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80294:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80296:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80298:	6803      	ldr	r3, [r0, #0]
   8029a:	3301      	adds	r3, #1
   8029c:	6003      	str	r3, [r0, #0]
   8029e:	4770      	bx	lr

000802a0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   802a0:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   802a2:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   802a4:	f1b4 3fff 	cmp.w	r4, #4294967295
   802a8:	d101      	bne.n	802ae <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   802aa:	6903      	ldr	r3, [r0, #16]
   802ac:	e00a      	b.n	802c4 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   802ae:	f100 0308 	add.w	r3, r0, #8
   802b2:	68c2      	ldr	r2, [r0, #12]
   802b4:	6812      	ldr	r2, [r2, #0]
   802b6:	4294      	cmp	r4, r2
   802b8:	d304      	bcc.n	802c4 <vListInsert+0x24>
   802ba:	685b      	ldr	r3, [r3, #4]
   802bc:	685a      	ldr	r2, [r3, #4]
   802be:	6812      	ldr	r2, [r2, #0]
   802c0:	4294      	cmp	r4, r2
   802c2:	d2fa      	bcs.n	802ba <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   802c4:	685a      	ldr	r2, [r3, #4]
   802c6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   802c8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   802ca:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   802cc:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   802ce:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   802d0:	6803      	ldr	r3, [r0, #0]
   802d2:	3301      	adds	r3, #1
   802d4:	6003      	str	r3, [r0, #0]
}
   802d6:	bc10      	pop	{r4}
   802d8:	4770      	bx	lr
   802da:	bf00      	nop

000802dc <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   802dc:	6843      	ldr	r3, [r0, #4]
   802de:	6882      	ldr	r2, [r0, #8]
   802e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   802e2:	6883      	ldr	r3, [r0, #8]
   802e4:	6842      	ldr	r2, [r0, #4]
   802e6:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   802e8:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   802ea:	685a      	ldr	r2, [r3, #4]
   802ec:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   802ee:	bf04      	itt	eq
   802f0:	6882      	ldreq	r2, [r0, #8]
   802f2:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   802f4:	2200      	movs	r2, #0
   802f6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   802f8:	681a      	ldr	r2, [r3, #0]
   802fa:	3a01      	subs	r2, #1
   802fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   802fe:	6818      	ldr	r0, [r3, #0]
}
   80300:	4770      	bx	lr
   80302:	bf00      	nop

00080304 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80304:	4803      	ldr	r0, [pc, #12]	; (80314 <prvPortStartFirstTask+0x10>)
   80306:	6800      	ldr	r0, [r0, #0]
   80308:	6800      	ldr	r0, [r0, #0]
   8030a:	f380 8808 	msr	MSP, r0
   8030e:	b662      	cpsie	i
   80310:	df00      	svc	0
   80312:	bf00      	nop
   80314:	e000ed08 	.word	0xe000ed08

00080318 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   8031c:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80320:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   80324:	2300      	movs	r3, #0
   80326:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   8032a:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   8032e:	3840      	subs	r0, #64	; 0x40
   80330:	4770      	bx	lr
   80332:	bf00      	nop

00080334 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80334:	4b06      	ldr	r3, [pc, #24]	; (80350 <pxCurrentTCBConst2>)
   80336:	6819      	ldr	r1, [r3, #0]
   80338:	6808      	ldr	r0, [r1, #0]
   8033a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8033e:	f380 8809 	msr	PSP, r0
   80342:	f04f 0000 	mov.w	r0, #0
   80346:	f380 8811 	msr	BASEPRI, r0
   8034a:	f04e 0e0d 	orr.w	lr, lr, #13
   8034e:	4770      	bx	lr

00080350 <pxCurrentTCBConst2>:
   80350:	2007aa64 	.word	0x2007aa64

00080354 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80358:	4b01      	ldr	r3, [pc, #4]	; (80360 <vPortYieldFromISR+0xc>)
   8035a:	601a      	str	r2, [r3, #0]
   8035c:	4770      	bx	lr
   8035e:	bf00      	nop
   80360:	e000ed04 	.word	0xe000ed04

00080364 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80364:	f3ef 8011 	mrs	r0, BASEPRI
   80368:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   8036c:	f381 8811 	msr	BASEPRI, r1
   80370:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80372:	2000      	movs	r0, #0

00080374 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   80374:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   80376:	4b03      	ldr	r3, [pc, #12]	; (80384 <vPortEnterCritical+0x10>)
   80378:	4798      	blx	r3
	uxCriticalNesting++;
   8037a:	4a03      	ldr	r2, [pc, #12]	; (80388 <vPortEnterCritical+0x14>)
   8037c:	6813      	ldr	r3, [r2, #0]
   8037e:	3301      	adds	r3, #1
   80380:	6013      	str	r3, [r2, #0]
   80382:	bd08      	pop	{r3, pc}
   80384:	00080365 	.word	0x00080365
   80388:	2007012c 	.word	0x2007012c

0008038c <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   8038c:	f380 8811 	msr	BASEPRI, r0
   80390:	4770      	bx	lr
   80392:	bf00      	nop

00080394 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   80394:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   80396:	4a04      	ldr	r2, [pc, #16]	; (803a8 <vPortExitCritical+0x14>)
   80398:	6813      	ldr	r3, [r2, #0]
   8039a:	3b01      	subs	r3, #1
   8039c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   8039e:	b913      	cbnz	r3, 803a6 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   803a0:	2000      	movs	r0, #0
   803a2:	4b02      	ldr	r3, [pc, #8]	; (803ac <vPortExitCritical+0x18>)
   803a4:	4798      	blx	r3
   803a6:	bd08      	pop	{r3, pc}
   803a8:	2007012c 	.word	0x2007012c
   803ac:	0008038d 	.word	0x0008038d

000803b0 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   803b0:	f3ef 8009 	mrs	r0, PSP
   803b4:	4b0c      	ldr	r3, [pc, #48]	; (803e8 <pxCurrentTCBConst>)
   803b6:	681a      	ldr	r2, [r3, #0]
   803b8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   803bc:	6010      	str	r0, [r2, #0]
   803be:	e92d 4008 	stmdb	sp!, {r3, lr}
   803c2:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   803c6:	f380 8811 	msr	BASEPRI, r0
   803ca:	f001 f85d 	bl	81488 <vTaskSwitchContext>
   803ce:	f04f 0000 	mov.w	r0, #0
   803d2:	f380 8811 	msr	BASEPRI, r0
   803d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   803da:	6819      	ldr	r1, [r3, #0]
   803dc:	6808      	ldr	r0, [r1, #0]
   803de:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   803e2:	f380 8809 	msr	PSP, r0
   803e6:	4770      	bx	lr

000803e8 <pxCurrentTCBConst>:
   803e8:	2007aa64 	.word	0x2007aa64

000803ec <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   803ec:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   803ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   803f2:	4b05      	ldr	r3, [pc, #20]	; (80408 <SysTick_Handler+0x1c>)
   803f4:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   803f6:	4b05      	ldr	r3, [pc, #20]	; (8040c <SysTick_Handler+0x20>)
   803f8:	4798      	blx	r3
	{
		vTaskIncrementTick();
   803fa:	4b05      	ldr	r3, [pc, #20]	; (80410 <SysTick_Handler+0x24>)
   803fc:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   803fe:	2000      	movs	r0, #0
   80400:	4b04      	ldr	r3, [pc, #16]	; (80414 <SysTick_Handler+0x28>)
   80402:	4798      	blx	r3
   80404:	bd08      	pop	{r3, pc}
   80406:	bf00      	nop
   80408:	e000ed04 	.word	0xe000ed04
   8040c:	00080365 	.word	0x00080365
   80410:	00081195 	.word	0x00081195
   80414:	0008038d 	.word	0x0008038d

00080418 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80418:	4a03      	ldr	r2, [pc, #12]	; (80428 <vPortSetupTimerInterrupt+0x10>)
   8041a:	4b04      	ldr	r3, [pc, #16]	; (8042c <vPortSetupTimerInterrupt+0x14>)
   8041c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   8041e:	2207      	movs	r2, #7
   80420:	3b04      	subs	r3, #4
   80422:	601a      	str	r2, [r3, #0]
   80424:	4770      	bx	lr
   80426:	bf00      	nop
   80428:	0001481f 	.word	0x0001481f
   8042c:	e000e014 	.word	0xe000e014

00080430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   80430:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80432:	4b09      	ldr	r3, [pc, #36]	; (80458 <xPortStartScheduler+0x28>)
   80434:	681a      	ldr	r2, [r3, #0]
   80436:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   8043a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   8043c:	681a      	ldr	r2, [r3, #0]
   8043e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   80442:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   80444:	4b05      	ldr	r3, [pc, #20]	; (8045c <xPortStartScheduler+0x2c>)
   80446:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   80448:	2400      	movs	r4, #0
   8044a:	4b05      	ldr	r3, [pc, #20]	; (80460 <xPortStartScheduler+0x30>)
   8044c:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   8044e:	4b05      	ldr	r3, [pc, #20]	; (80464 <xPortStartScheduler+0x34>)
   80450:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   80452:	4620      	mov	r0, r4
   80454:	bd10      	pop	{r4, pc}
   80456:	bf00      	nop
   80458:	e000ed20 	.word	0xe000ed20
   8045c:	00080419 	.word	0x00080419
   80460:	2007012c 	.word	0x2007012c
   80464:	00080305 	.word	0x00080305

00080468 <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   80468:	4a12      	ldr	r2, [pc, #72]	; (804b4 <prvInsertBlockIntoFreeList+0x4c>)
   8046a:	e000      	b.n	8046e <prvInsertBlockIntoFreeList+0x6>
   8046c:	461a      	mov	r2, r3
   8046e:	6813      	ldr	r3, [r2, #0]
   80470:	4283      	cmp	r3, r0
   80472:	d3fb      	bcc.n	8046c <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   80474:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   80476:	6851      	ldr	r1, [r2, #4]
   80478:	1854      	adds	r4, r2, r1
   8047a:	42a0      	cmp	r0, r4
   8047c:	d103      	bne.n	80486 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   8047e:	6840      	ldr	r0, [r0, #4]
   80480:	4401      	add	r1, r0
   80482:	6051      	str	r1, [r2, #4]
   80484:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   80486:	6841      	ldr	r1, [r0, #4]
   80488:	1844      	adds	r4, r0, r1
   8048a:	42a3      	cmp	r3, r4
   8048c:	d10c      	bne.n	804a8 <prvInsertBlockIntoFreeList+0x40>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   8048e:	4b0a      	ldr	r3, [pc, #40]	; (804b8 <prvInsertBlockIntoFreeList+0x50>)
   80490:	681b      	ldr	r3, [r3, #0]
   80492:	429c      	cmp	r4, r3
   80494:	d006      	beq.n	804a4 <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80496:	6863      	ldr	r3, [r4, #4]
   80498:	4419      	add	r1, r3
   8049a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   8049c:	6813      	ldr	r3, [r2, #0]
   8049e:	681b      	ldr	r3, [r3, #0]
   804a0:	6003      	str	r3, [r0, #0]
   804a2:	e002      	b.n	804aa <prvInsertBlockIntoFreeList+0x42>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   804a4:	6004      	str	r4, [r0, #0]
   804a6:	e000      	b.n	804aa <prvInsertBlockIntoFreeList+0x42>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   804a8:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   804aa:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   804ac:	bf18      	it	ne
   804ae:	6010      	strne	r0, [r2, #0]
	}
}
   804b0:	bc10      	pop	{r4}
   804b2:	4770      	bx	lr
   804b4:	2007a9ac 	.word	0x2007a9ac
   804b8:	2007a9a8 	.word	0x2007a9a8

000804bc <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
   804bc:	b538      	push	{r3, r4, r5, lr}
   804be:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   804c0:	4b2b      	ldr	r3, [pc, #172]	; (80570 <pvPortMalloc+0xb4>)
   804c2:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   804c4:	4b2b      	ldr	r3, [pc, #172]	; (80574 <pvPortMalloc+0xb8>)
   804c6:	681b      	ldr	r3, [r3, #0]
   804c8:	b99b      	cbnz	r3, 804f2 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   804ca:	4a2b      	ldr	r2, [pc, #172]	; (80578 <pvPortMalloc+0xbc>)
   804cc:	4b2b      	ldr	r3, [pc, #172]	; (8057c <pvPortMalloc+0xc0>)
   804ce:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   804d0:	2100      	movs	r1, #0
   804d2:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   804d4:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   804d8:	1898      	adds	r0, r3, r2
   804da:	4d26      	ldr	r5, [pc, #152]	; (80574 <pvPortMalloc+0xb8>)
   804dc:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   804de:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   804e2:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   804e4:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   804e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   804e8:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   804ea:	4a25      	ldr	r2, [pc, #148]	; (80580 <pvPortMalloc+0xc4>)
   804ec:	6813      	ldr	r3, [r2, #0]
   804ee:	3b10      	subs	r3, #16
   804f0:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   804f2:	2c00      	cmp	r4, #0
   804f4:	d037      	beq.n	80566 <pvPortMalloc+0xaa>
		{
			xWantedSize += heapSTRUCT_SIZE;
   804f6:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   804fa:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   804fe:	bf1c      	itt	ne
   80500:	f022 0207 	bicne.w	r2, r2, #7
   80504:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   80506:	1e51      	subs	r1, r2, #1
   80508:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   8050c:	4299      	cmp	r1, r3
   8050e:	d827      	bhi.n	80560 <pvPortMalloc+0xa4>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80510:	4919      	ldr	r1, [pc, #100]	; (80578 <pvPortMalloc+0xbc>)
   80512:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80514:	e001      	b.n	8051a <pvPortMalloc+0x5e>
   80516:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   80518:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   8051a:	6863      	ldr	r3, [r4, #4]
   8051c:	429a      	cmp	r2, r3
   8051e:	d902      	bls.n	80526 <pvPortMalloc+0x6a>
   80520:	6823      	ldr	r3, [r4, #0]
   80522:	2b00      	cmp	r3, #0
   80524:	d1f7      	bne.n	80516 <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   80526:	4b13      	ldr	r3, [pc, #76]	; (80574 <pvPortMalloc+0xb8>)
   80528:	681b      	ldr	r3, [r3, #0]
   8052a:	429c      	cmp	r4, r3
   8052c:	d018      	beq.n	80560 <pvPortMalloc+0xa4>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   8052e:	680d      	ldr	r5, [r1, #0]
   80530:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80532:	6823      	ldr	r3, [r4, #0]
   80534:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   80536:	6863      	ldr	r3, [r4, #4]
   80538:	1a9b      	subs	r3, r3, r2
   8053a:	2b20      	cmp	r3, #32
   8053c:	d904      	bls.n	80548 <pvPortMalloc+0x8c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   8053e:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80540:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80542:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80544:	4b0f      	ldr	r3, [pc, #60]	; (80584 <pvPortMalloc+0xc8>)
   80546:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   80548:	4a0d      	ldr	r2, [pc, #52]	; (80580 <pvPortMalloc+0xc4>)
   8054a:	6813      	ldr	r3, [r2, #0]
   8054c:	6861      	ldr	r1, [r4, #4]
   8054e:	1a5b      	subs	r3, r3, r1
   80550:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
   80552:	4b0d      	ldr	r3, [pc, #52]	; (80588 <pvPortMalloc+0xcc>)
   80554:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   80556:	b94d      	cbnz	r5, 8056c <pvPortMalloc+0xb0>
		{
			vApplicationMallocFailedHook();
   80558:	4b0c      	ldr	r3, [pc, #48]	; (8058c <pvPortMalloc+0xd0>)
   8055a:	4798      	blx	r3
   8055c:	2500      	movs	r5, #0
		}
	}
	#endif

	return pvReturn;
   8055e:	e005      	b.n	8056c <pvPortMalloc+0xb0>

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   80560:	4b09      	ldr	r3, [pc, #36]	; (80588 <pvPortMalloc+0xcc>)
   80562:	4798      	blx	r3
   80564:	e7f8      	b.n	80558 <pvPortMalloc+0x9c>
   80566:	4b08      	ldr	r3, [pc, #32]	; (80588 <pvPortMalloc+0xcc>)
   80568:	4798      	blx	r3
   8056a:	e7f5      	b.n	80558 <pvPortMalloc+0x9c>
		}
	}
	#endif

	return pvReturn;
}
   8056c:	4628      	mov	r0, r5
   8056e:	bd38      	pop	{r3, r4, r5, pc}
   80570:	00081165 	.word	0x00081165
   80574:	2007a9a8 	.word	0x2007a9a8
   80578:	2007a9ac 	.word	0x2007a9ac
   8057c:	200709a8 	.word	0x200709a8
   80580:	20070130 	.word	0x20070130
   80584:	00080469 	.word	0x00080469
   80588:	000812f1 	.word	0x000812f1
   8058c:	0008361d 	.word	0x0008361d

00080590 <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   80590:	b180      	cbz	r0, 805b4 <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   80592:	b510      	push	{r4, lr}
   80594:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   80596:	4b08      	ldr	r3, [pc, #32]	; (805b8 <vPortFree+0x28>)
   80598:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   8059a:	4a08      	ldr	r2, [pc, #32]	; (805bc <vPortFree+0x2c>)
   8059c:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   805a0:	6813      	ldr	r3, [r2, #0]
   805a2:	440b      	add	r3, r1
   805a4:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   805a6:	f1a4 0010 	sub.w	r0, r4, #16
   805aa:	4b05      	ldr	r3, [pc, #20]	; (805c0 <vPortFree+0x30>)
   805ac:	4798      	blx	r3
		}
		xTaskResumeAll();
   805ae:	4b05      	ldr	r3, [pc, #20]	; (805c4 <vPortFree+0x34>)
   805b0:	4798      	blx	r3
   805b2:	bd10      	pop	{r4, pc}
   805b4:	4770      	bx	lr
   805b6:	bf00      	nop
   805b8:	00081165 	.word	0x00081165
   805bc:	20070130 	.word	0x20070130
   805c0:	00080469 	.word	0x00080469
   805c4:	000812f1 	.word	0x000812f1

000805c8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   805c8:	b510      	push	{r4, lr}
   805ca:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   805cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
   805ce:	b93b      	cbnz	r3, 805e0 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   805d0:	6803      	ldr	r3, [r0, #0]
   805d2:	bb1b      	cbnz	r3, 8061c <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   805d4:	6840      	ldr	r0, [r0, #4]
   805d6:	4b13      	ldr	r3, [pc, #76]	; (80624 <prvCopyDataToQueue+0x5c>)
   805d8:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   805da:	2300      	movs	r3, #0
   805dc:	6063      	str	r3, [r4, #4]
   805de:	e01d      	b.n	8061c <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   805e0:	b96a      	cbnz	r2, 805fe <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   805e2:	461a      	mov	r2, r3
   805e4:	6880      	ldr	r0, [r0, #8]
   805e6:	4b10      	ldr	r3, [pc, #64]	; (80628 <prvCopyDataToQueue+0x60>)
   805e8:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   805ea:	68a2      	ldr	r2, [r4, #8]
   805ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
   805ee:	4413      	add	r3, r2
   805f0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   805f2:	6862      	ldr	r2, [r4, #4]
   805f4:	4293      	cmp	r3, r2
   805f6:	d311      	bcc.n	8061c <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   805f8:	6823      	ldr	r3, [r4, #0]
   805fa:	60a3      	str	r3, [r4, #8]
   805fc:	e00e      	b.n	8061c <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   805fe:	461a      	mov	r2, r3
   80600:	68c0      	ldr	r0, [r0, #12]
   80602:	4b09      	ldr	r3, [pc, #36]	; (80628 <prvCopyDataToQueue+0x60>)
   80604:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80606:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80608:	425b      	negs	r3, r3
   8060a:	68e2      	ldr	r2, [r4, #12]
   8060c:	441a      	add	r2, r3
   8060e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80610:	6821      	ldr	r1, [r4, #0]
   80612:	428a      	cmp	r2, r1
   80614:	d202      	bcs.n	8061c <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80616:	6862      	ldr	r2, [r4, #4]
   80618:	4413      	add	r3, r2
   8061a:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   8061c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8061e:	3301      	adds	r3, #1
   80620:	63a3      	str	r3, [r4, #56]	; 0x38
   80622:	bd10      	pop	{r4, pc}
   80624:	0008186d 	.word	0x0008186d
   80628:	00083671 	.word	0x00083671

0008062c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   8062c:	b538      	push	{r3, r4, r5, lr}
   8062e:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80630:	6800      	ldr	r0, [r0, #0]
   80632:	b158      	cbz	r0, 8064c <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80636:	68dc      	ldr	r4, [r3, #12]
   80638:	4414      	add	r4, r2
   8063a:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   8063c:	685d      	ldr	r5, [r3, #4]
   8063e:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80640:	bf28      	it	cs
   80642:	60d8      	strcs	r0, [r3, #12]
   80644:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   80646:	68d9      	ldr	r1, [r3, #12]
   80648:	4b01      	ldr	r3, [pc, #4]	; (80650 <prvCopyDataFromQueue+0x24>)
   8064a:	4798      	blx	r3
   8064c:	bd38      	pop	{r3, r4, r5, pc}
   8064e:	bf00      	nop
   80650:	00083671 	.word	0x00083671

00080654 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   80654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80656:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   80658:	4b1e      	ldr	r3, [pc, #120]	; (806d4 <prvUnlockQueue+0x80>)
   8065a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   8065c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8065e:	2b00      	cmp	r3, #0
   80660:	dd13      	ble.n	8068a <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80662:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80664:	b91b      	cbnz	r3, 8066e <prvUnlockQueue+0x1a>
   80666:	e010      	b.n	8068a <prvUnlockQueue+0x36>
   80668:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8066a:	b923      	cbnz	r3, 80676 <prvUnlockQueue+0x22>
   8066c:	e00d      	b.n	8068a <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8066e:	f104 0624 	add.w	r6, r4, #36	; 0x24
   80672:	4d19      	ldr	r5, [pc, #100]	; (806d8 <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80674:	4f19      	ldr	r7, [pc, #100]	; (806dc <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80676:	4630      	mov	r0, r6
   80678:	47a8      	blx	r5
   8067a:	b100      	cbz	r0, 8067e <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   8067c:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   8067e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80680:	3b01      	subs	r3, #1
   80682:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80684:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80686:	2b00      	cmp	r3, #0
   80688:	dcee      	bgt.n	80668 <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   8068a:	f04f 33ff 	mov.w	r3, #4294967295
   8068e:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   80690:	4b13      	ldr	r3, [pc, #76]	; (806e0 <prvUnlockQueue+0x8c>)
   80692:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   80694:	4b0f      	ldr	r3, [pc, #60]	; (806d4 <prvUnlockQueue+0x80>)
   80696:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80698:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8069a:	2b00      	cmp	r3, #0
   8069c:	dd13      	ble.n	806c6 <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8069e:	6923      	ldr	r3, [r4, #16]
   806a0:	b91b      	cbnz	r3, 806aa <prvUnlockQueue+0x56>
   806a2:	e010      	b.n	806c6 <prvUnlockQueue+0x72>
   806a4:	6923      	ldr	r3, [r4, #16]
   806a6:	b923      	cbnz	r3, 806b2 <prvUnlockQueue+0x5e>
   806a8:	e00d      	b.n	806c6 <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   806aa:	f104 0610 	add.w	r6, r4, #16
   806ae:	4d0a      	ldr	r5, [pc, #40]	; (806d8 <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
   806b0:	4f0a      	ldr	r7, [pc, #40]	; (806dc <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   806b2:	4630      	mov	r0, r6
   806b4:	47a8      	blx	r5
   806b6:	b100      	cbz	r0, 806ba <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
   806b8:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   806ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
   806bc:	3b01      	subs	r3, #1
   806be:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   806c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   806c2:	2b00      	cmp	r3, #0
   806c4:	dcee      	bgt.n	806a4 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   806c6:	f04f 33ff 	mov.w	r3, #4294967295
   806ca:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   806cc:	4b04      	ldr	r3, [pc, #16]	; (806e0 <prvUnlockQueue+0x8c>)
   806ce:	4798      	blx	r3
   806d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   806d2:	bf00      	nop
   806d4:	00080375 	.word	0x00080375
   806d8:	00081615 	.word	0x00081615
   806dc:	00081755 	.word	0x00081755
   806e0:	00080395 	.word	0x00080395

000806e4 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   806e4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   806e6:	b918      	cbnz	r0, 806f0 <xQueueGenericReset+0xc>
   806e8:	4b17      	ldr	r3, [pc, #92]	; (80748 <xQueueGenericReset+0x64>)
   806ea:	4798      	blx	r3
   806ec:	bf00      	nop
   806ee:	e7fd      	b.n	806ec <xQueueGenericReset+0x8>
   806f0:	460d      	mov	r5, r1
   806f2:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
   806f4:	4b15      	ldr	r3, [pc, #84]	; (8074c <xQueueGenericReset+0x68>)
   806f6:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   806f8:	6822      	ldr	r2, [r4, #0]
   806fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
   806fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   806fe:	fb03 f301 	mul.w	r3, r3, r1
   80702:	18d0      	adds	r0, r2, r3
   80704:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   80706:	2000      	movs	r0, #0
   80708:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   8070a:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   8070c:	1a5b      	subs	r3, r3, r1
   8070e:	4413      	add	r3, r2
   80710:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80712:	f04f 33ff 	mov.w	r3, #4294967295
   80716:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   80718:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   8071a:	b955      	cbnz	r5, 80732 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8071c:	6923      	ldr	r3, [r4, #16]
   8071e:	b17b      	cbz	r3, 80740 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80720:	f104 0010 	add.w	r0, r4, #16
   80724:	4b0a      	ldr	r3, [pc, #40]	; (80750 <xQueueGenericReset+0x6c>)
   80726:	4798      	blx	r3
   80728:	2801      	cmp	r0, #1
   8072a:	d109      	bne.n	80740 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   8072c:	4b09      	ldr	r3, [pc, #36]	; (80754 <xQueueGenericReset+0x70>)
   8072e:	4798      	blx	r3
   80730:	e006      	b.n	80740 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80732:	f104 0010 	add.w	r0, r4, #16
   80736:	4d08      	ldr	r5, [pc, #32]	; (80758 <xQueueGenericReset+0x74>)
   80738:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   8073a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8073e:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   80740:	4b06      	ldr	r3, [pc, #24]	; (8075c <xQueueGenericReset+0x78>)
   80742:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   80744:	2001      	movs	r0, #1
   80746:	bd38      	pop	{r3, r4, r5, pc}
   80748:	00080365 	.word	0x00080365
   8074c:	00080375 	.word	0x00080375
   80750:	00081615 	.word	0x00081615
   80754:	00080355 	.word	0x00080355
   80758:	00080265 	.word	0x00080265
   8075c:	00080395 	.word	0x00080395

00080760 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   80760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   80764:	b1e0      	cbz	r0, 807a0 <xQueueGenericCreate+0x40>
   80766:	460e      	mov	r6, r1
   80768:	4615      	mov	r5, r2
   8076a:	4607      	mov	r7, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   8076c:	2050      	movs	r0, #80	; 0x50
   8076e:	4b26      	ldr	r3, [pc, #152]	; (80808 <xQueueGenericCreate+0xa8>)
   80770:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80772:	4604      	mov	r4, r0
   80774:	b1a0      	cbz	r0, 807a0 <xQueueGenericCreate+0x40>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   80776:	fb06 f007 	mul.w	r0, r6, r7
   8077a:	3001      	adds	r0, #1
   8077c:	4b22      	ldr	r3, [pc, #136]	; (80808 <xQueueGenericCreate+0xa8>)
   8077e:	4798      	blx	r3
   80780:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   80782:	b980      	cbnz	r0, 807a6 <xQueueGenericCreate+0x46>
				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
   80784:	4b21      	ldr	r3, [pc, #132]	; (8080c <xQueueGenericCreate+0xac>)
   80786:	5d59      	ldrb	r1, [r3, r5]
   80788:	f101 0040 	add.w	r0, r1, #64	; 0x40
   8078c:	2200      	movs	r2, #0
   8078e:	b2c0      	uxtb	r0, r0
   80790:	4b1f      	ldr	r3, [pc, #124]	; (80810 <xQueueGenericCreate+0xb0>)
   80792:	4798      	blx	r3
				vPortFree( pxNewQueue );
   80794:	4620      	mov	r0, r4
   80796:	4b1f      	ldr	r3, [pc, #124]	; (80814 <xQueueGenericCreate+0xb4>)
   80798:	4798      	blx	r3
   8079a:	e001      	b.n	807a0 <xQueueGenericCreate+0x40>
			}
		}
	}

	configASSERT( xReturn );
   8079c:	bf00      	nop
   8079e:	e7fd      	b.n	8079c <xQueueGenericCreate+0x3c>
   807a0:	4b1d      	ldr	r3, [pc, #116]	; (80818 <xQueueGenericCreate+0xb8>)
   807a2:	4798      	blx	r3
   807a4:	e7fa      	b.n	8079c <xQueueGenericCreate+0x3c>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   807a6:	63e7      	str	r7, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   807a8:	6426      	str	r6, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   807aa:	2101      	movs	r1, #1
   807ac:	4620      	mov	r0, r4
   807ae:	4b1b      	ldr	r3, [pc, #108]	; (8081c <xQueueGenericCreate+0xbc>)
   807b0:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   807b2:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
   807b6:	4620      	mov	r0, r4
   807b8:	4f19      	ldr	r7, [pc, #100]	; (80820 <xQueueGenericCreate+0xc0>)
   807ba:	47b8      	blx	r7
   807bc:	4e13      	ldr	r6, [pc, #76]	; (8080c <xQueueGenericCreate+0xac>)
   807be:	5c30      	ldrb	r0, [r6, r0]
   807c0:	4b18      	ldr	r3, [pc, #96]	; (80824 <xQueueGenericCreate+0xc4>)
   807c2:	4798      	blx	r3
   807c4:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
   807c8:	4620      	mov	r0, r4
   807ca:	47b8      	blx	r7
   807cc:	5c35      	ldrb	r5, [r6, r0]
   807ce:	3518      	adds	r5, #24
   807d0:	b2ed      	uxtb	r5, r5
   807d2:	4620      	mov	r0, r4
   807d4:	47b8      	blx	r7
   807d6:	f816 9000 	ldrb.w	r9, [r6, r0]
   807da:	4620      	mov	r0, r4
   807dc:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8082c <xQueueGenericCreate+0xcc>
   807e0:	47c0      	blx	r8
   807e2:	4602      	mov	r2, r0
   807e4:	4649      	mov	r1, r9
   807e6:	4628      	mov	r0, r5
   807e8:	4b09      	ldr	r3, [pc, #36]	; (80810 <xQueueGenericCreate+0xb0>)
   807ea:	4798      	blx	r3
   807ec:	4620      	mov	r0, r4
   807ee:	47b8      	blx	r7
   807f0:	5c35      	ldrb	r5, [r6, r0]
   807f2:	4620      	mov	r0, r4
   807f4:	47c0      	blx	r8
   807f6:	2200      	movs	r2, #0
   807f8:	4601      	mov	r1, r0
   807fa:	4628      	mov	r0, r5
   807fc:	4b0a      	ldr	r3, [pc, #40]	; (80828 <xQueueGenericCreate+0xc8>)
   807fe:	4798      	blx	r3
	}

	configASSERT( xReturn );

	return xReturn;
}
   80800:	4620      	mov	r0, r4
   80802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80806:	bf00      	nop
   80808:	000804bd 	.word	0x000804bd
   8080c:	20070140 	.word	0x20070140
   80810:	00082b25 	.word	0x00082b25
   80814:	00080591 	.word	0x00080591
   80818:	00080365 	.word	0x00080365
   8081c:	000806e5 	.word	0x000806e5
   80820:	00083081 	.word	0x00083081
   80824:	000825c5 	.word	0x000825c5
   80828:	00082ea5 	.word	0x00082ea5
   8082c:	00083075 	.word	0x00083075

00080830 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80834:	b087      	sub	sp, #28
   80836:	9101      	str	r1, [sp, #4]
   80838:	9203      	str	r2, [sp, #12]
   8083a:	9302      	str	r3, [sp, #8]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   8083c:	b918      	cbnz	r0, 80846 <xQueueGenericSend+0x16>
   8083e:	4b6c      	ldr	r3, [pc, #432]	; (809f0 <xQueueGenericSend+0x1c0>)
   80840:	4798      	blx	r3
   80842:	bf00      	nop
   80844:	e7fd      	b.n	80842 <xQueueGenericSend+0x12>
   80846:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80848:	9b01      	ldr	r3, [sp, #4]
   8084a:	b92b      	cbnz	r3, 80858 <xQueueGenericSend+0x28>
   8084c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8084e:	b133      	cbz	r3, 8085e <xQueueGenericSend+0x2e>
   80850:	4b67      	ldr	r3, [pc, #412]	; (809f0 <xQueueGenericSend+0x1c0>)
   80852:	4798      	blx	r3
   80854:	bf00      	nop
   80856:	e7fd      	b.n	80854 <xQueueGenericSend+0x24>
   80858:	f04f 0800 	mov.w	r8, #0
   8085c:	e001      	b.n	80862 <xQueueGenericSend+0x32>
   8085e:	f04f 0800 	mov.w	r8, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80862:	4e64      	ldr	r6, [pc, #400]	; (809f4 <xQueueGenericSend+0x1c4>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80864:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80a30 <xQueueGenericSend+0x200>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80868:	4d63      	ldr	r5, [pc, #396]	; (809f8 <xQueueGenericSend+0x1c8>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   8086a:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   8086c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8086e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80870:	429a      	cmp	r2, r3
   80872:	d239      	bcs.n	808e8 <xQueueGenericSend+0xb8>
			{
				traceQUEUE_SEND( pxQueue );
   80874:	4620      	mov	r0, r4
   80876:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80a18 <xQueueGenericSend+0x1e8>
   8087a:	47c0      	blx	r8
   8087c:	4f5f      	ldr	r7, [pc, #380]	; (809fc <xQueueGenericSend+0x1cc>)
   8087e:	5c3d      	ldrb	r5, [r7, r0]
   80880:	3520      	adds	r5, #32
   80882:	b2ed      	uxtb	r5, r5
   80884:	4620      	mov	r0, r4
   80886:	47c0      	blx	r8
   80888:	f817 a000 	ldrb.w	sl, [r7, r0]
   8088c:	4620      	mov	r0, r4
   8088e:	4e5c      	ldr	r6, [pc, #368]	; (80a00 <xQueueGenericSend+0x1d0>)
   80890:	47b0      	blx	r6
   80892:	4602      	mov	r2, r0
   80894:	4651      	mov	r1, sl
   80896:	4628      	mov	r0, r5
   80898:	4b5a      	ldr	r3, [pc, #360]	; (80a04 <xQueueGenericSend+0x1d4>)
   8089a:	4798      	blx	r3
   8089c:	4620      	mov	r0, r4
   8089e:	47c0      	blx	r8
   808a0:	5c3d      	ldrb	r5, [r7, r0]
   808a2:	4620      	mov	r0, r4
   808a4:	47b0      	blx	r6
   808a6:	4606      	mov	r6, r0
   808a8:	4620      	mov	r0, r4
   808aa:	47c0      	blx	r8
   808ac:	5c3b      	ldrb	r3, [r7, r0]
   808ae:	2b02      	cmp	r3, #2
   808b0:	bf1d      	ittte	ne
   808b2:	6ba2      	ldrne	r2, [r4, #56]	; 0x38
   808b4:	3201      	addne	r2, #1
   808b6:	b2d2      	uxtbne	r2, r2
   808b8:	2200      	moveq	r2, #0
   808ba:	4631      	mov	r1, r6
   808bc:	4628      	mov	r0, r5
   808be:	4b52      	ldr	r3, [pc, #328]	; (80a08 <xQueueGenericSend+0x1d8>)
   808c0:	4798      	blx	r3
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   808c2:	9a02      	ldr	r2, [sp, #8]
   808c4:	9901      	ldr	r1, [sp, #4]
   808c6:	4620      	mov	r0, r4
   808c8:	4b50      	ldr	r3, [pc, #320]	; (80a0c <xQueueGenericSend+0x1dc>)
   808ca:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   808cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   808ce:	b13b      	cbz	r3, 808e0 <xQueueGenericSend+0xb0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   808d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   808d4:	4b4e      	ldr	r3, [pc, #312]	; (80a10 <xQueueGenericSend+0x1e0>)
   808d6:	4798      	blx	r3
   808d8:	2801      	cmp	r0, #1
   808da:	d101      	bne.n	808e0 <xQueueGenericSend+0xb0>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   808dc:	4b4d      	ldr	r3, [pc, #308]	; (80a14 <xQueueGenericSend+0x1e4>)
   808de:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   808e0:	4b45      	ldr	r3, [pc, #276]	; (809f8 <xQueueGenericSend+0x1c8>)
   808e2:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   808e4:	2001      	movs	r0, #1
   808e6:	e080      	b.n	809ea <xQueueGenericSend+0x1ba>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   808e8:	9b03      	ldr	r3, [sp, #12]
   808ea:	b9ab      	cbnz	r3, 80918 <xQueueGenericSend+0xe8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   808ec:	4b42      	ldr	r3, [pc, #264]	; (809f8 <xQueueGenericSend+0x1c8>)
   808ee:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   808f0:	4620      	mov	r0, r4
   808f2:	4f49      	ldr	r7, [pc, #292]	; (80a18 <xQueueGenericSend+0x1e8>)
   808f4:	47b8      	blx	r7
   808f6:	4e41      	ldr	r6, [pc, #260]	; (809fc <xQueueGenericSend+0x1cc>)
   808f8:	5c35      	ldrb	r5, [r6, r0]
   808fa:	3548      	adds	r5, #72	; 0x48
   808fc:	b2ed      	uxtb	r5, r5
   808fe:	4620      	mov	r0, r4
   80900:	47b8      	blx	r7
   80902:	5c36      	ldrb	r6, [r6, r0]
   80904:	4620      	mov	r0, r4
   80906:	4b3e      	ldr	r3, [pc, #248]	; (80a00 <xQueueGenericSend+0x1d0>)
   80908:	4798      	blx	r3
   8090a:	4602      	mov	r2, r0
   8090c:	4631      	mov	r1, r6
   8090e:	4628      	mov	r0, r5
   80910:	4b3c      	ldr	r3, [pc, #240]	; (80a04 <xQueueGenericSend+0x1d4>)
   80912:	4798      	blx	r3
					return errQUEUE_FULL;
   80914:	2000      	movs	r0, #0
   80916:	e068      	b.n	809ea <xQueueGenericSend+0x1ba>
				}
				else if( xEntryTimeSet == pdFALSE )
   80918:	f1b8 0f00 	cmp.w	r8, #0
   8091c:	d103      	bne.n	80926 <xQueueGenericSend+0xf6>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8091e:	a804      	add	r0, sp, #16
   80920:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
   80922:	f04f 0801 	mov.w	r8, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80926:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80928:	4b3c      	ldr	r3, [pc, #240]	; (80a1c <xQueueGenericSend+0x1ec>)
   8092a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8092c:	47b0      	blx	r6
   8092e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80930:	f1b3 3fff 	cmp.w	r3, #4294967295
   80934:	bf04      	itt	eq
   80936:	2300      	moveq	r3, #0
   80938:	6463      	streq	r3, [r4, #68]	; 0x44
   8093a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8093c:	f1b3 3fff 	cmp.w	r3, #4294967295
   80940:	bf04      	itt	eq
   80942:	2300      	moveq	r3, #0
   80944:	64a3      	streq	r3, [r4, #72]	; 0x48
   80946:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80948:	a903      	add	r1, sp, #12
   8094a:	a804      	add	r0, sp, #16
   8094c:	4b34      	ldr	r3, [pc, #208]	; (80a20 <xQueueGenericSend+0x1f0>)
   8094e:	4798      	blx	r3
   80950:	2800      	cmp	r0, #0
   80952:	d132      	bne.n	809ba <xQueueGenericSend+0x18a>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80954:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   80956:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
   8095a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   8095c:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   8095e:	45ba      	cmp	sl, r7
   80960:	d125      	bne.n	809ae <xQueueGenericSend+0x17e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   80962:	4620      	mov	r0, r4
   80964:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80a18 <xQueueGenericSend+0x1e8>
   80968:	47d8      	blx	fp
   8096a:	f8df a090 	ldr.w	sl, [pc, #144]	; 809fc <xQueueGenericSend+0x1cc>
   8096e:	f81a 7000 	ldrb.w	r7, [sl, r0]
   80972:	3770      	adds	r7, #112	; 0x70
   80974:	b2ff      	uxtb	r7, r7
   80976:	4620      	mov	r0, r4
   80978:	47d8      	blx	fp
   8097a:	f81a a000 	ldrb.w	sl, [sl, r0]
   8097e:	4620      	mov	r0, r4
   80980:	4b1f      	ldr	r3, [pc, #124]	; (80a00 <xQueueGenericSend+0x1d0>)
   80982:	4798      	blx	r3
   80984:	4602      	mov	r2, r0
   80986:	4651      	mov	r1, sl
   80988:	4638      	mov	r0, r7
   8098a:	4b1e      	ldr	r3, [pc, #120]	; (80a04 <xQueueGenericSend+0x1d4>)
   8098c:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   8098e:	9903      	ldr	r1, [sp, #12]
   80990:	f104 0010 	add.w	r0, r4, #16
   80994:	4b23      	ldr	r3, [pc, #140]	; (80a24 <xQueueGenericSend+0x1f4>)
   80996:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   80998:	4620      	mov	r0, r4
   8099a:	4b23      	ldr	r3, [pc, #140]	; (80a28 <xQueueGenericSend+0x1f8>)
   8099c:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   8099e:	4b23      	ldr	r3, [pc, #140]	; (80a2c <xQueueGenericSend+0x1fc>)
   809a0:	4798      	blx	r3
   809a2:	2800      	cmp	r0, #0
   809a4:	f47f af61 	bne.w	8086a <xQueueGenericSend+0x3a>
				{
					portYIELD_WITHIN_API();
   809a8:	4b1a      	ldr	r3, [pc, #104]	; (80a14 <xQueueGenericSend+0x1e4>)
   809aa:	4798      	blx	r3
   809ac:	e75d      	b.n	8086a <xQueueGenericSend+0x3a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   809ae:	4620      	mov	r0, r4
   809b0:	4b1d      	ldr	r3, [pc, #116]	; (80a28 <xQueueGenericSend+0x1f8>)
   809b2:	4798      	blx	r3
				( void ) xTaskResumeAll();
   809b4:	4b1d      	ldr	r3, [pc, #116]	; (80a2c <xQueueGenericSend+0x1fc>)
   809b6:	4798      	blx	r3
   809b8:	e757      	b.n	8086a <xQueueGenericSend+0x3a>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   809ba:	4620      	mov	r0, r4
   809bc:	4b1a      	ldr	r3, [pc, #104]	; (80a28 <xQueueGenericSend+0x1f8>)
   809be:	4798      	blx	r3
			( void ) xTaskResumeAll();
   809c0:	4b1a      	ldr	r3, [pc, #104]	; (80a2c <xQueueGenericSend+0x1fc>)
   809c2:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
   809c4:	4620      	mov	r0, r4
   809c6:	4f14      	ldr	r7, [pc, #80]	; (80a18 <xQueueGenericSend+0x1e8>)
   809c8:	47b8      	blx	r7
   809ca:	4e0c      	ldr	r6, [pc, #48]	; (809fc <xQueueGenericSend+0x1cc>)
   809cc:	5c35      	ldrb	r5, [r6, r0]
   809ce:	3548      	adds	r5, #72	; 0x48
   809d0:	b2ed      	uxtb	r5, r5
   809d2:	4620      	mov	r0, r4
   809d4:	47b8      	blx	r7
   809d6:	5c36      	ldrb	r6, [r6, r0]
   809d8:	4620      	mov	r0, r4
   809da:	4b09      	ldr	r3, [pc, #36]	; (80a00 <xQueueGenericSend+0x1d0>)
   809dc:	4798      	blx	r3
   809de:	4602      	mov	r2, r0
   809e0:	4631      	mov	r1, r6
   809e2:	4628      	mov	r0, r5
   809e4:	4b07      	ldr	r3, [pc, #28]	; (80a04 <xQueueGenericSend+0x1d4>)
   809e6:	4798      	blx	r3
			return errQUEUE_FULL;
   809e8:	2000      	movs	r0, #0
		}
	}
}
   809ea:	b007      	add	sp, #28
   809ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   809f0:	00080365 	.word	0x00080365
   809f4:	00080375 	.word	0x00080375
   809f8:	00080395 	.word	0x00080395
   809fc:	20070140 	.word	0x20070140
   80a00:	00083075 	.word	0x00083075
   80a04:	00082b25 	.word	0x00082b25
   80a08:	00082ea5 	.word	0x00082ea5
   80a0c:	000805c9 	.word	0x000805c9
   80a10:	00081615 	.word	0x00081615
   80a14:	00080355 	.word	0x00080355
   80a18:	00083081 	.word	0x00083081
   80a1c:	00081165 	.word	0x00081165
   80a20:	000816d1 	.word	0x000816d1
   80a24:	00081545 	.word	0x00081545
   80a28:	00080655 	.word	0x00080655
   80a2c:	000812f1 	.word	0x000812f1
   80a30:	000816a9 	.word	0x000816a9

00080a34 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   80a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80a38:	b083      	sub	sp, #12
   80a3a:	9301      	str	r3, [sp, #4]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   80a3c:	b918      	cbnz	r0, 80a46 <xQueueGenericSendFromISR+0x12>
   80a3e:	4b38      	ldr	r3, [pc, #224]	; (80b20 <xQueueGenericSendFromISR+0xec>)
   80a40:	4798      	blx	r3
   80a42:	bf00      	nop
   80a44:	e7fd      	b.n	80a42 <xQueueGenericSendFromISR+0xe>
   80a46:	4689      	mov	r9, r1
   80a48:	4690      	mov	r8, r2
   80a4a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80a4c:	b929      	cbnz	r1, 80a5a <xQueueGenericSendFromISR+0x26>
   80a4e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80a50:	b11b      	cbz	r3, 80a5a <xQueueGenericSendFromISR+0x26>
   80a52:	4b33      	ldr	r3, [pc, #204]	; (80b20 <xQueueGenericSendFromISR+0xec>)
   80a54:	4798      	blx	r3
   80a56:	bf00      	nop
   80a58:	e7fd      	b.n	80a56 <xQueueGenericSendFromISR+0x22>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80a5a:	4b31      	ldr	r3, [pc, #196]	; (80b20 <xQueueGenericSendFromISR+0xec>)
   80a5c:	4798      	blx	r3
   80a5e:	9000      	str	r0, [sp, #0]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80a60:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80a62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80a64:	429a      	cmp	r2, r3
   80a66:	d23b      	bcs.n	80ae0 <xQueueGenericSendFromISR+0xac>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   80a68:	4620      	mov	r0, r4
   80a6a:	4f2e      	ldr	r7, [pc, #184]	; (80b24 <xQueueGenericSendFromISR+0xf0>)
   80a6c:	47b8      	blx	r7
   80a6e:	4e2e      	ldr	r6, [pc, #184]	; (80b28 <xQueueGenericSendFromISR+0xf4>)
   80a70:	5c35      	ldrb	r5, [r6, r0]
   80a72:	3530      	adds	r5, #48	; 0x30
   80a74:	b2ed      	uxtb	r5, r5
   80a76:	4620      	mov	r0, r4
   80a78:	47b8      	blx	r7
   80a7a:	f816 b000 	ldrb.w	fp, [r6, r0]
   80a7e:	4620      	mov	r0, r4
   80a80:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80b3c <xQueueGenericSendFromISR+0x108>
   80a84:	47d0      	blx	sl
   80a86:	4602      	mov	r2, r0
   80a88:	4659      	mov	r1, fp
   80a8a:	4628      	mov	r0, r5
   80a8c:	4b27      	ldr	r3, [pc, #156]	; (80b2c <xQueueGenericSendFromISR+0xf8>)
   80a8e:	4798      	blx	r3
   80a90:	4620      	mov	r0, r4
   80a92:	47b8      	blx	r7
   80a94:	5c35      	ldrb	r5, [r6, r0]
   80a96:	4620      	mov	r0, r4
   80a98:	47d0      	blx	sl
   80a9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80a9c:	3201      	adds	r2, #1
   80a9e:	b2d2      	uxtb	r2, r2
   80aa0:	4601      	mov	r1, r0
   80aa2:	4628      	mov	r0, r5
   80aa4:	4b22      	ldr	r3, [pc, #136]	; (80b30 <xQueueGenericSendFromISR+0xfc>)
   80aa6:	4798      	blx	r3

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80aa8:	9a01      	ldr	r2, [sp, #4]
   80aaa:	4649      	mov	r1, r9
   80aac:	4620      	mov	r0, r4
   80aae:	4b21      	ldr	r3, [pc, #132]	; (80b34 <xQueueGenericSendFromISR+0x100>)
   80ab0:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   80ab2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
   80ab8:	d10d      	bne.n	80ad6 <xQueueGenericSendFromISR+0xa2>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80abc:	b323      	cbz	r3, 80b08 <xQueueGenericSendFromISR+0xd4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80abe:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80ac2:	4b1d      	ldr	r3, [pc, #116]	; (80b38 <xQueueGenericSendFromISR+0x104>)
   80ac4:	4798      	blx	r3
   80ac6:	b308      	cbz	r0, 80b0c <xQueueGenericSendFromISR+0xd8>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   80ac8:	f1b8 0f00 	cmp.w	r8, #0
   80acc:	d020      	beq.n	80b10 <xQueueGenericSendFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   80ace:	2401      	movs	r4, #1
   80ad0:	f8c8 4000 	str.w	r4, [r8]
   80ad4:	e01d      	b.n	80b12 <xQueueGenericSendFromISR+0xde>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   80ad6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80ad8:	3301      	adds	r3, #1
   80ada:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   80adc:	2401      	movs	r4, #1
   80ade:	e018      	b.n	80b12 <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   80ae0:	4620      	mov	r0, r4
   80ae2:	4f10      	ldr	r7, [pc, #64]	; (80b24 <xQueueGenericSendFromISR+0xf0>)
   80ae4:	47b8      	blx	r7
   80ae6:	4e10      	ldr	r6, [pc, #64]	; (80b28 <xQueueGenericSendFromISR+0xf4>)
   80ae8:	5c35      	ldrb	r5, [r6, r0]
   80aea:	3558      	adds	r5, #88	; 0x58
   80aec:	b2ed      	uxtb	r5, r5
   80aee:	4620      	mov	r0, r4
   80af0:	47b8      	blx	r7
   80af2:	5c36      	ldrb	r6, [r6, r0]
   80af4:	4620      	mov	r0, r4
   80af6:	4b11      	ldr	r3, [pc, #68]	; (80b3c <xQueueGenericSendFromISR+0x108>)
   80af8:	4798      	blx	r3
   80afa:	4602      	mov	r2, r0
   80afc:	4631      	mov	r1, r6
   80afe:	4628      	mov	r0, r5
   80b00:	4b0a      	ldr	r3, [pc, #40]	; (80b2c <xQueueGenericSendFromISR+0xf8>)
   80b02:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   80b04:	2400      	movs	r4, #0
   80b06:	e004      	b.n	80b12 <xQueueGenericSendFromISR+0xde>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   80b08:	2401      	movs	r4, #1
   80b0a:	e002      	b.n	80b12 <xQueueGenericSendFromISR+0xde>
   80b0c:	2401      	movs	r4, #1
   80b0e:	e000      	b.n	80b12 <xQueueGenericSendFromISR+0xde>
   80b10:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80b12:	9800      	ldr	r0, [sp, #0]
   80b14:	4b0a      	ldr	r3, [pc, #40]	; (80b40 <xQueueGenericSendFromISR+0x10c>)
   80b16:	4798      	blx	r3

	return xReturn;
}
   80b18:	4620      	mov	r0, r4
   80b1a:	b003      	add	sp, #12
   80b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80b20:	00080365 	.word	0x00080365
   80b24:	00083081 	.word	0x00083081
   80b28:	20070140 	.word	0x20070140
   80b2c:	00082b25 	.word	0x00082b25
   80b30:	00082ea5 	.word	0x00082ea5
   80b34:	000805c9 	.word	0x000805c9
   80b38:	00081615 	.word	0x00081615
   80b3c:	00083075 	.word	0x00083075
   80b40:	0008038d 	.word	0x0008038d

00080b44 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   80b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80b48:	b087      	sub	sp, #28
   80b4a:	9100      	str	r1, [sp, #0]
   80b4c:	9203      	str	r2, [sp, #12]
   80b4e:	9302      	str	r3, [sp, #8]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   80b50:	b918      	cbnz	r0, 80b5a <xQueueGenericReceive+0x16>
   80b52:	4b8c      	ldr	r3, [pc, #560]	; (80d84 <xQueueGenericReceive+0x240>)
   80b54:	4798      	blx	r3
   80b56:	bf00      	nop
   80b58:	e7fd      	b.n	80b56 <xQueueGenericReceive+0x12>
   80b5a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80b5c:	9b00      	ldr	r3, [sp, #0]
   80b5e:	b92b      	cbnz	r3, 80b6c <xQueueGenericReceive+0x28>
   80b60:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80b62:	b133      	cbz	r3, 80b72 <xQueueGenericReceive+0x2e>
   80b64:	4b87      	ldr	r3, [pc, #540]	; (80d84 <xQueueGenericReceive+0x240>)
   80b66:	4798      	blx	r3
   80b68:	bf00      	nop
   80b6a:	e7fd      	b.n	80b68 <xQueueGenericReceive+0x24>
   80b6c:	f04f 0800 	mov.w	r8, #0
   80b70:	e001      	b.n	80b76 <xQueueGenericReceive+0x32>
   80b72:	f04f 0800 	mov.w	r8, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80b76:	4e84      	ldr	r6, [pc, #528]	; (80d88 <xQueueGenericReceive+0x244>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80b78:	f8df b25c 	ldr.w	fp, [pc, #604]	; 80dd8 <xQueueGenericReceive+0x294>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80b7c:	4d83      	ldr	r5, [pc, #524]	; (80d8c <xQueueGenericReceive+0x248>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80b7e:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80b80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80b82:	2b00      	cmp	r3, #0
   80b84:	d067      	beq.n	80c56 <xQueueGenericReceive+0x112>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   80b86:	68e7      	ldr	r7, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80b88:	9900      	ldr	r1, [sp, #0]
   80b8a:	4620      	mov	r0, r4
   80b8c:	4b80      	ldr	r3, [pc, #512]	; (80d90 <xQueueGenericReceive+0x24c>)
   80b8e:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   80b90:	9b02      	ldr	r3, [sp, #8]
   80b92:	2b00      	cmp	r3, #0
   80b94:	d13e      	bne.n	80c14 <xQueueGenericReceive+0xd0>
				{
					traceQUEUE_RECEIVE( pxQueue );
   80b96:	4620      	mov	r0, r4
   80b98:	4f7e      	ldr	r7, [pc, #504]	; (80d94 <xQueueGenericReceive+0x250>)
   80b9a:	47b8      	blx	r7
   80b9c:	4e7e      	ldr	r6, [pc, #504]	; (80d98 <xQueueGenericReceive+0x254>)
   80b9e:	5c35      	ldrb	r5, [r6, r0]
   80ba0:	3528      	adds	r5, #40	; 0x28
   80ba2:	b2ed      	uxtb	r5, r5
   80ba4:	4620      	mov	r0, r4
   80ba6:	47b8      	blx	r7
   80ba8:	f816 9000 	ldrb.w	r9, [r6, r0]
   80bac:	4620      	mov	r0, r4
   80bae:	f8df 8208 	ldr.w	r8, [pc, #520]	; 80db8 <xQueueGenericReceive+0x274>
   80bb2:	47c0      	blx	r8
   80bb4:	4602      	mov	r2, r0
   80bb6:	4649      	mov	r1, r9
   80bb8:	4628      	mov	r0, r5
   80bba:	4b78      	ldr	r3, [pc, #480]	; (80d9c <xQueueGenericReceive+0x258>)
   80bbc:	4798      	blx	r3
   80bbe:	4620      	mov	r0, r4
   80bc0:	47b8      	blx	r7
   80bc2:	5c35      	ldrb	r5, [r6, r0]
   80bc4:	4620      	mov	r0, r4
   80bc6:	47c0      	blx	r8
   80bc8:	4680      	mov	r8, r0
   80bca:	4620      	mov	r0, r4
   80bcc:	47b8      	blx	r7
   80bce:	5c33      	ldrb	r3, [r6, r0]
   80bd0:	2b02      	cmp	r3, #2
   80bd2:	d105      	bne.n	80be0 <xQueueGenericReceive+0x9c>
   80bd4:	4b72      	ldr	r3, [pc, #456]	; (80da0 <xQueueGenericReceive+0x25c>)
   80bd6:	4798      	blx	r3
   80bd8:	4b72      	ldr	r3, [pc, #456]	; (80da4 <xQueueGenericReceive+0x260>)
   80bda:	4798      	blx	r3
   80bdc:	4602      	mov	r2, r0
   80bde:	e002      	b.n	80be6 <xQueueGenericReceive+0xa2>
   80be0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80be2:	3a01      	subs	r2, #1
   80be4:	b2d2      	uxtb	r2, r2
   80be6:	4641      	mov	r1, r8
   80be8:	4628      	mov	r0, r5
   80bea:	4b6f      	ldr	r3, [pc, #444]	; (80da8 <xQueueGenericReceive+0x264>)
   80bec:	4798      	blx	r3

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   80bee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80bf0:	3b01      	subs	r3, #1
   80bf2:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80bf4:	6823      	ldr	r3, [r4, #0]
   80bf6:	b913      	cbnz	r3, 80bfe <xQueueGenericReceive+0xba>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80bf8:	4b6c      	ldr	r3, [pc, #432]	; (80dac <xQueueGenericReceive+0x268>)
   80bfa:	4798      	blx	r3
   80bfc:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80bfe:	6923      	ldr	r3, [r4, #16]
   80c00:	b32b      	cbz	r3, 80c4e <xQueueGenericReceive+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80c02:	f104 0010 	add.w	r0, r4, #16
   80c06:	4b6a      	ldr	r3, [pc, #424]	; (80db0 <xQueueGenericReceive+0x26c>)
   80c08:	4798      	blx	r3
   80c0a:	2801      	cmp	r0, #1
   80c0c:	d11f      	bne.n	80c4e <xQueueGenericReceive+0x10a>
						{
							portYIELD_WITHIN_API();
   80c0e:	4b69      	ldr	r3, [pc, #420]	; (80db4 <xQueueGenericReceive+0x270>)
   80c10:	4798      	blx	r3
   80c12:	e01c      	b.n	80c4e <xQueueGenericReceive+0x10a>
						}
					}
				}
				else
				{
					traceQUEUE_PEEK( pxQueue );
   80c14:	4620      	mov	r0, r4
   80c16:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80d94 <xQueueGenericReceive+0x250>
   80c1a:	47c0      	blx	r8
   80c1c:	4e5e      	ldr	r6, [pc, #376]	; (80d98 <xQueueGenericReceive+0x254>)
   80c1e:	5c35      	ldrb	r5, [r6, r0]
   80c20:	3578      	adds	r5, #120	; 0x78
   80c22:	b2ed      	uxtb	r5, r5
   80c24:	4620      	mov	r0, r4
   80c26:	47c0      	blx	r8
   80c28:	5c36      	ldrb	r6, [r6, r0]
   80c2a:	4620      	mov	r0, r4
   80c2c:	4b62      	ldr	r3, [pc, #392]	; (80db8 <xQueueGenericReceive+0x274>)
   80c2e:	4798      	blx	r3
   80c30:	4602      	mov	r2, r0
   80c32:	4631      	mov	r1, r6
   80c34:	4628      	mov	r0, r5
   80c36:	4b59      	ldr	r3, [pc, #356]	; (80d9c <xQueueGenericReceive+0x258>)
   80c38:	4798      	blx	r3

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   80c3a:	60e7      	str	r7, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80c3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80c3e:	b133      	cbz	r3, 80c4e <xQueueGenericReceive+0x10a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80c40:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80c44:	4b5a      	ldr	r3, [pc, #360]	; (80db0 <xQueueGenericReceive+0x26c>)
   80c46:	4798      	blx	r3
   80c48:	b108      	cbz	r0, 80c4e <xQueueGenericReceive+0x10a>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   80c4a:	4b5a      	ldr	r3, [pc, #360]	; (80db4 <xQueueGenericReceive+0x270>)
   80c4c:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   80c4e:	4b4f      	ldr	r3, [pc, #316]	; (80d8c <xQueueGenericReceive+0x248>)
   80c50:	4798      	blx	r3
				return pdPASS;
   80c52:	2001      	movs	r0, #1
   80c54:	e092      	b.n	80d7c <xQueueGenericReceive+0x238>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80c56:	9b03      	ldr	r3, [sp, #12]
   80c58:	b9ab      	cbnz	r3, 80c86 <xQueueGenericReceive+0x142>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80c5a:	4b4c      	ldr	r3, [pc, #304]	; (80d8c <xQueueGenericReceive+0x248>)
   80c5c:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   80c5e:	4620      	mov	r0, r4
   80c60:	4f4c      	ldr	r7, [pc, #304]	; (80d94 <xQueueGenericReceive+0x250>)
   80c62:	47b8      	blx	r7
   80c64:	4e4c      	ldr	r6, [pc, #304]	; (80d98 <xQueueGenericReceive+0x254>)
   80c66:	5c35      	ldrb	r5, [r6, r0]
   80c68:	3550      	adds	r5, #80	; 0x50
   80c6a:	b2ed      	uxtb	r5, r5
   80c6c:	4620      	mov	r0, r4
   80c6e:	47b8      	blx	r7
   80c70:	5c36      	ldrb	r6, [r6, r0]
   80c72:	4620      	mov	r0, r4
   80c74:	4b50      	ldr	r3, [pc, #320]	; (80db8 <xQueueGenericReceive+0x274>)
   80c76:	4798      	blx	r3
   80c78:	4602      	mov	r2, r0
   80c7a:	4631      	mov	r1, r6
   80c7c:	4628      	mov	r0, r5
   80c7e:	4b47      	ldr	r3, [pc, #284]	; (80d9c <xQueueGenericReceive+0x258>)
   80c80:	4798      	blx	r3
					return errQUEUE_EMPTY;
   80c82:	2000      	movs	r0, #0
   80c84:	e07a      	b.n	80d7c <xQueueGenericReceive+0x238>
				}
				else if( xEntryTimeSet == pdFALSE )
   80c86:	f1b8 0f00 	cmp.w	r8, #0
   80c8a:	d103      	bne.n	80c94 <xQueueGenericReceive+0x150>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80c8c:	a804      	add	r0, sp, #16
   80c8e:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   80c90:	f04f 0801 	mov.w	r8, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80c94:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80c96:	4b49      	ldr	r3, [pc, #292]	; (80dbc <xQueueGenericReceive+0x278>)
   80c98:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80c9a:	47b0      	blx	r6
   80c9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
   80ca2:	bf04      	itt	eq
   80ca4:	2300      	moveq	r3, #0
   80ca6:	6463      	streq	r3, [r4, #68]	; 0x44
   80ca8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80caa:	f1b3 3fff 	cmp.w	r3, #4294967295
   80cae:	bf04      	itt	eq
   80cb0:	2300      	moveq	r3, #0
   80cb2:	64a3      	streq	r3, [r4, #72]	; 0x48
   80cb4:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80cb6:	a903      	add	r1, sp, #12
   80cb8:	a804      	add	r0, sp, #16
   80cba:	4b41      	ldr	r3, [pc, #260]	; (80dc0 <xQueueGenericReceive+0x27c>)
   80cbc:	4798      	blx	r3
   80cbe:	2800      	cmp	r0, #0
   80cc0:	d144      	bne.n	80d4c <xQueueGenericReceive+0x208>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80cc2:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80cc4:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80cc6:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80cc8:	2f00      	cmp	r7, #0
   80cca:	d139      	bne.n	80d40 <xQueueGenericReceive+0x1fc>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   80ccc:	4620      	mov	r0, r4
   80cce:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80d94 <xQueueGenericReceive+0x250>
   80cd2:	47c8      	blx	r9
   80cd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80d98 <xQueueGenericReceive+0x254>
   80cd8:	f81a 7000 	ldrb.w	r7, [sl, r0]
   80cdc:	3768      	adds	r7, #104	; 0x68
   80cde:	b2ff      	uxtb	r7, r7
   80ce0:	4620      	mov	r0, r4
   80ce2:	47c8      	blx	r9
   80ce4:	f81a 3000 	ldrb.w	r3, [sl, r0]
   80ce8:	9301      	str	r3, [sp, #4]
   80cea:	4620      	mov	r0, r4
   80cec:	4b32      	ldr	r3, [pc, #200]	; (80db8 <xQueueGenericReceive+0x274>)
   80cee:	4798      	blx	r3
   80cf0:	4602      	mov	r2, r0
   80cf2:	9901      	ldr	r1, [sp, #4]
   80cf4:	4638      	mov	r0, r7
   80cf6:	4b29      	ldr	r3, [pc, #164]	; (80d9c <xQueueGenericReceive+0x258>)
   80cf8:	4798      	blx	r3
   80cfa:	4620      	mov	r0, r4
   80cfc:	47c8      	blx	r9
   80cfe:	f81a 3000 	ldrb.w	r3, [sl, r0]
   80d02:	2b02      	cmp	r3, #2
   80d04:	d005      	beq.n	80d12 <xQueueGenericReceive+0x1ce>
   80d06:	4b26      	ldr	r3, [pc, #152]	; (80da0 <xQueueGenericReceive+0x25c>)
   80d08:	4798      	blx	r3
   80d0a:	4b26      	ldr	r3, [pc, #152]	; (80da4 <xQueueGenericReceive+0x260>)
   80d0c:	4798      	blx	r3
   80d0e:	4b2d      	ldr	r3, [pc, #180]	; (80dc4 <xQueueGenericReceive+0x280>)
   80d10:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80d12:	6823      	ldr	r3, [r4, #0]
   80d14:	b923      	cbnz	r3, 80d20 <xQueueGenericReceive+0x1dc>
					{
						portENTER_CRITICAL();
   80d16:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80d18:	6860      	ldr	r0, [r4, #4]
   80d1a:	4b2b      	ldr	r3, [pc, #172]	; (80dc8 <xQueueGenericReceive+0x284>)
   80d1c:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   80d1e:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80d20:	9903      	ldr	r1, [sp, #12]
   80d22:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80d26:	4b29      	ldr	r3, [pc, #164]	; (80dcc <xQueueGenericReceive+0x288>)
   80d28:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80d2a:	4620      	mov	r0, r4
   80d2c:	4b28      	ldr	r3, [pc, #160]	; (80dd0 <xQueueGenericReceive+0x28c>)
   80d2e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80d30:	4b28      	ldr	r3, [pc, #160]	; (80dd4 <xQueueGenericReceive+0x290>)
   80d32:	4798      	blx	r3
   80d34:	2800      	cmp	r0, #0
   80d36:	f47f af22 	bne.w	80b7e <xQueueGenericReceive+0x3a>
				{
					portYIELD_WITHIN_API();
   80d3a:	4b1e      	ldr	r3, [pc, #120]	; (80db4 <xQueueGenericReceive+0x270>)
   80d3c:	4798      	blx	r3
   80d3e:	e71e      	b.n	80b7e <xQueueGenericReceive+0x3a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80d40:	4620      	mov	r0, r4
   80d42:	4b23      	ldr	r3, [pc, #140]	; (80dd0 <xQueueGenericReceive+0x28c>)
   80d44:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80d46:	4b23      	ldr	r3, [pc, #140]	; (80dd4 <xQueueGenericReceive+0x290>)
   80d48:	4798      	blx	r3
   80d4a:	e718      	b.n	80b7e <xQueueGenericReceive+0x3a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   80d4c:	4620      	mov	r0, r4
   80d4e:	4b20      	ldr	r3, [pc, #128]	; (80dd0 <xQueueGenericReceive+0x28c>)
   80d50:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80d52:	4b20      	ldr	r3, [pc, #128]	; (80dd4 <xQueueGenericReceive+0x290>)
   80d54:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
   80d56:	4620      	mov	r0, r4
   80d58:	4f0e      	ldr	r7, [pc, #56]	; (80d94 <xQueueGenericReceive+0x250>)
   80d5a:	47b8      	blx	r7
   80d5c:	4e0e      	ldr	r6, [pc, #56]	; (80d98 <xQueueGenericReceive+0x254>)
   80d5e:	5c35      	ldrb	r5, [r6, r0]
   80d60:	3550      	adds	r5, #80	; 0x50
   80d62:	b2ed      	uxtb	r5, r5
   80d64:	4620      	mov	r0, r4
   80d66:	47b8      	blx	r7
   80d68:	5c36      	ldrb	r6, [r6, r0]
   80d6a:	4620      	mov	r0, r4
   80d6c:	4b12      	ldr	r3, [pc, #72]	; (80db8 <xQueueGenericReceive+0x274>)
   80d6e:	4798      	blx	r3
   80d70:	4602      	mov	r2, r0
   80d72:	4631      	mov	r1, r6
   80d74:	4628      	mov	r0, r5
   80d76:	4b09      	ldr	r3, [pc, #36]	; (80d9c <xQueueGenericReceive+0x258>)
   80d78:	4798      	blx	r3
			return errQUEUE_EMPTY;
   80d7a:	2000      	movs	r0, #0
		}
	}
}
   80d7c:	b007      	add	sp, #28
   80d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80d82:	bf00      	nop
   80d84:	00080365 	.word	0x00080365
   80d88:	00080375 	.word	0x00080375
   80d8c:	00080395 	.word	0x00080395
   80d90:	0008062d 	.word	0x0008062d
   80d94:	00083081 	.word	0x00083081
   80d98:	20070140 	.word	0x20070140
   80d9c:	00082b25 	.word	0x00082b25
   80da0:	0008309d 	.word	0x0008309d
   80da4:	0008308d 	.word	0x0008308d
   80da8:	00082ea5 	.word	0x00082ea5
   80dac:	0008176d 	.word	0x0008176d
   80db0:	00081615 	.word	0x00081615
   80db4:	00080355 	.word	0x00080355
   80db8:	00083075 	.word	0x00083075
   80dbc:	00081165 	.word	0x00081165
   80dc0:	000816d1 	.word	0x000816d1
   80dc4:	00083035 	.word	0x00083035
   80dc8:	00081799 	.word	0x00081799
   80dcc:	00081545 	.word	0x00081545
   80dd0:	00080655 	.word	0x00080655
   80dd4:	000812f1 	.word	0x000812f1
   80dd8:	000816a9 	.word	0x000816a9

00080ddc <ucQueueGetQueueNumber>:
#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned char ucQueueGetQueueNumber( xQueueHandle pxQueue )
	{
		return pxQueue->ucQueueNumber;
	}
   80ddc:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   80de0:	4770      	bx	lr
   80de2:	bf00      	nop

00080de4 <ucQueueGetQueueType>:
#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned char ucQueueGetQueueType( xQueueHandle pxQueue )
	{
		return pxQueue->ucQueueType;
	}
   80de4:	f890 004d 	ldrb.w	r0, [r0, #77]	; 0x4d
   80de8:	4770      	bx	lr
   80dea:	bf00      	nop

00080dec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80dec:	b538      	push	{r3, r4, r5, lr}
   80dee:	4604      	mov	r4, r0
   80df0:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80df2:	4b0d      	ldr	r3, [pc, #52]	; (80e28 <vQueueWaitForMessageRestricted+0x3c>)
   80df4:	4798      	blx	r3
   80df6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80df8:	f1b3 3fff 	cmp.w	r3, #4294967295
   80dfc:	bf04      	itt	eq
   80dfe:	2300      	moveq	r3, #0
   80e00:	6463      	streq	r3, [r4, #68]	; 0x44
   80e02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80e04:	f1b3 3fff 	cmp.w	r3, #4294967295
   80e08:	bf04      	itt	eq
   80e0a:	2300      	moveq	r3, #0
   80e0c:	64a3      	streq	r3, [r4, #72]	; 0x48
   80e0e:	4b07      	ldr	r3, [pc, #28]	; (80e2c <vQueueWaitForMessageRestricted+0x40>)
   80e10:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   80e12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80e14:	b923      	cbnz	r3, 80e20 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80e16:	4629      	mov	r1, r5
   80e18:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80e1c:	4b04      	ldr	r3, [pc, #16]	; (80e30 <vQueueWaitForMessageRestricted+0x44>)
   80e1e:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   80e20:	4620      	mov	r0, r4
   80e22:	4b04      	ldr	r3, [pc, #16]	; (80e34 <vQueueWaitForMessageRestricted+0x48>)
   80e24:	4798      	blx	r3
   80e26:	bd38      	pop	{r3, r4, r5, pc}
   80e28:	00080375 	.word	0x00080375
   80e2c:	00080395 	.word	0x00080395
   80e30:	000815a5 	.word	0x000815a5
   80e34:	00080655 	.word	0x00080655

00080e38 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   80e38:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   80e3a:	4b0f      	ldr	r3, [pc, #60]	; (80e78 <prvAddCurrentTaskToDelayedList+0x40>)
   80e3c:	681b      	ldr	r3, [r3, #0]
   80e3e:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   80e40:	4b0e      	ldr	r3, [pc, #56]	; (80e7c <prvAddCurrentTaskToDelayedList+0x44>)
   80e42:	681b      	ldr	r3, [r3, #0]
   80e44:	4298      	cmp	r0, r3
   80e46:	d207      	bcs.n	80e58 <prvAddCurrentTaskToDelayedList+0x20>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80e48:	4b0d      	ldr	r3, [pc, #52]	; (80e80 <prvAddCurrentTaskToDelayedList+0x48>)
   80e4a:	6818      	ldr	r0, [r3, #0]
   80e4c:	4b0a      	ldr	r3, [pc, #40]	; (80e78 <prvAddCurrentTaskToDelayedList+0x40>)
   80e4e:	6819      	ldr	r1, [r3, #0]
   80e50:	3104      	adds	r1, #4
   80e52:	4b0c      	ldr	r3, [pc, #48]	; (80e84 <prvAddCurrentTaskToDelayedList+0x4c>)
   80e54:	4798      	blx	r3
   80e56:	bd10      	pop	{r4, pc}
   80e58:	4604      	mov	r4, r0
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80e5a:	4b0b      	ldr	r3, [pc, #44]	; (80e88 <prvAddCurrentTaskToDelayedList+0x50>)
   80e5c:	6818      	ldr	r0, [r3, #0]
   80e5e:	4b06      	ldr	r3, [pc, #24]	; (80e78 <prvAddCurrentTaskToDelayedList+0x40>)
   80e60:	6819      	ldr	r1, [r3, #0]
   80e62:	3104      	adds	r1, #4
   80e64:	4b07      	ldr	r3, [pc, #28]	; (80e84 <prvAddCurrentTaskToDelayedList+0x4c>)
   80e66:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   80e68:	4b08      	ldr	r3, [pc, #32]	; (80e8c <prvAddCurrentTaskToDelayedList+0x54>)
   80e6a:	681b      	ldr	r3, [r3, #0]
   80e6c:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   80e6e:	bf3c      	itt	cc
   80e70:	4b06      	ldrcc	r3, [pc, #24]	; (80e8c <prvAddCurrentTaskToDelayedList+0x54>)
   80e72:	601c      	strcc	r4, [r3, #0]
   80e74:	bd10      	pop	{r4, pc}
   80e76:	bf00      	nop
   80e78:	2007aa64 	.word	0x2007aa64
   80e7c:	2007a9bc 	.word	0x2007a9bc
   80e80:	2007aa24 	.word	0x2007aa24
   80e84:	000802a1 	.word	0x000802a1
   80e88:	2007aa3c 	.word	0x2007aa3c
   80e8c:	20070134 	.word	0x20070134

00080e90 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   80e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e94:	b083      	sub	sp, #12
   80e96:	9301      	str	r3, [sp, #4]
   80e98:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   80e9a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   80e9e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   80ea0:	9000      	str	r0, [sp, #0]
   80ea2:	b918      	cbnz	r0, 80eac <xTaskGenericCreate+0x1c>
   80ea4:	4b75      	ldr	r3, [pc, #468]	; (8107c <xTaskGenericCreate+0x1ec>)
   80ea6:	4798      	blx	r3
   80ea8:	bf00      	nop
   80eaa:	e7fd      	b.n	80ea8 <xTaskGenericCreate+0x18>
   80eac:	4689      	mov	r9, r1
   80eae:	4615      	mov	r5, r2
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   80eb0:	2f04      	cmp	r7, #4
   80eb2:	d903      	bls.n	80ebc <xTaskGenericCreate+0x2c>
   80eb4:	4b71      	ldr	r3, [pc, #452]	; (8107c <xTaskGenericCreate+0x1ec>)
   80eb6:	4798      	blx	r3
   80eb8:	bf00      	nop
   80eba:	e7fd      	b.n	80eb8 <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   80ebc:	204c      	movs	r0, #76	; 0x4c
   80ebe:	4b70      	ldr	r3, [pc, #448]	; (81080 <xTaskGenericCreate+0x1f0>)
   80ec0:	4798      	blx	r3

	if( pxNewTCB != NULL )
   80ec2:	4604      	mov	r4, r0
   80ec4:	2800      	cmp	r0, #0
   80ec6:	f000 80a4 	beq.w	81012 <xTaskGenericCreate+0x182>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80eca:	2e00      	cmp	r6, #0
   80ecc:	f040 809e 	bne.w	8100c <xTaskGenericCreate+0x17c>
   80ed0:	00a8      	lsls	r0, r5, #2
   80ed2:	4b6b      	ldr	r3, [pc, #428]	; (81080 <xTaskGenericCreate+0x1f0>)
   80ed4:	4798      	blx	r3
   80ed6:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   80ed8:	b918      	cbnz	r0, 80ee2 <xTaskGenericCreate+0x52>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   80eda:	4620      	mov	r0, r4
   80edc:	4b69      	ldr	r3, [pc, #420]	; (81084 <xTaskGenericCreate+0x1f4>)
   80ede:	4798      	blx	r3
   80ee0:	e097      	b.n	81012 <xTaskGenericCreate+0x182>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   80ee2:	00aa      	lsls	r2, r5, #2
   80ee4:	21a5      	movs	r1, #165	; 0xa5
   80ee6:	4b68      	ldr	r3, [pc, #416]	; (81088 <xTaskGenericCreate+0x1f8>)
   80ee8:	4798      	blx	r3
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   80eea:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   80eee:	3d01      	subs	r5, #1
   80ef0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80ef2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   80ef6:	f023 0507 	bic.w	r5, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   80efa:	f104 0834 	add.w	r8, r4, #52	; 0x34
   80efe:	220a      	movs	r2, #10
   80f00:	4649      	mov	r1, r9
   80f02:	4640      	mov	r0, r8
   80f04:	4b61      	ldr	r3, [pc, #388]	; (8108c <xTaskGenericCreate+0x1fc>)
   80f06:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   80f08:	2300      	movs	r3, #0
   80f0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   80f0e:	463e      	mov	r6, r7
   80f10:	2f04      	cmp	r7, #4
   80f12:	bf28      	it	cs
   80f14:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   80f16:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   80f18:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   80f1a:	f104 0904 	add.w	r9, r4, #4
   80f1e:	4648      	mov	r0, r9
   80f20:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 810f4 <xTaskGenericCreate+0x264>
   80f24:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   80f26:	f104 0018 	add.w	r0, r4, #24
   80f2a:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   80f2c:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   80f2e:	f1c6 0605 	rsb	r6, r6, #5
   80f32:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   80f34:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   80f36:	9a01      	ldr	r2, [sp, #4]
   80f38:	9900      	ldr	r1, [sp, #0]
   80f3a:	4628      	mov	r0, r5
   80f3c:	4b54      	ldr	r3, [pc, #336]	; (81090 <xTaskGenericCreate+0x200>)
   80f3e:	4798      	blx	r3
   80f40:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80f42:	f010 0f07 	tst.w	r0, #7
   80f46:	d003      	beq.n	80f50 <xTaskGenericCreate+0xc0>
   80f48:	4b4c      	ldr	r3, [pc, #304]	; (8107c <xTaskGenericCreate+0x1ec>)
   80f4a:	4798      	blx	r3
   80f4c:	bf00      	nop
   80f4e:	e7fd      	b.n	80f4c <xTaskGenericCreate+0xbc>

		if( ( void * ) pxCreatedTask != NULL )
   80f50:	f1ba 0f00 	cmp.w	sl, #0
   80f54:	d001      	beq.n	80f5a <xTaskGenericCreate+0xca>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   80f56:	f8ca 4000 	str.w	r4, [sl]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   80f5a:	4b4e      	ldr	r3, [pc, #312]	; (81094 <xTaskGenericCreate+0x204>)
   80f5c:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   80f5e:	4a4e      	ldr	r2, [pc, #312]	; (81098 <xTaskGenericCreate+0x208>)
   80f60:	6813      	ldr	r3, [r2, #0]
   80f62:	3301      	adds	r3, #1
   80f64:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   80f66:	4b4d      	ldr	r3, [pc, #308]	; (8109c <xTaskGenericCreate+0x20c>)
   80f68:	681b      	ldr	r3, [r3, #0]
   80f6a:	bb0b      	cbnz	r3, 80fb0 <xTaskGenericCreate+0x120>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   80f6c:	4b4b      	ldr	r3, [pc, #300]	; (8109c <xTaskGenericCreate+0x20c>)
   80f6e:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   80f70:	6813      	ldr	r3, [r2, #0]
   80f72:	2b01      	cmp	r3, #1
   80f74:	d126      	bne.n	80fc4 <xTaskGenericCreate+0x134>
   80f76:	4d4a      	ldr	r5, [pc, #296]	; (810a0 <xTaskGenericCreate+0x210>)
   80f78:	f105 0a64 	add.w	sl, r5, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   80f7c:	4e49      	ldr	r6, [pc, #292]	; (810a4 <xTaskGenericCreate+0x214>)
   80f7e:	4628      	mov	r0, r5
   80f80:	47b0      	blx	r6
   80f82:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   80f84:	4555      	cmp	r5, sl
   80f86:	d1fa      	bne.n	80f7e <xTaskGenericCreate+0xee>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   80f88:	f8df a16c 	ldr.w	sl, [pc, #364]	; 810f8 <xTaskGenericCreate+0x268>
   80f8c:	4650      	mov	r0, sl
   80f8e:	4d45      	ldr	r5, [pc, #276]	; (810a4 <xTaskGenericCreate+0x214>)
   80f90:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   80f92:	4e45      	ldr	r6, [pc, #276]	; (810a8 <xTaskGenericCreate+0x218>)
   80f94:	4630      	mov	r0, r6
   80f96:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   80f98:	4844      	ldr	r0, [pc, #272]	; (810ac <xTaskGenericCreate+0x21c>)
   80f9a:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   80f9c:	4844      	ldr	r0, [pc, #272]	; (810b0 <xTaskGenericCreate+0x220>)
   80f9e:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   80fa0:	4844      	ldr	r0, [pc, #272]	; (810b4 <xTaskGenericCreate+0x224>)
   80fa2:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   80fa4:	4b44      	ldr	r3, [pc, #272]	; (810b8 <xTaskGenericCreate+0x228>)
   80fa6:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   80faa:	4b44      	ldr	r3, [pc, #272]	; (810bc <xTaskGenericCreate+0x22c>)
   80fac:	601e      	str	r6, [r3, #0]
   80fae:	e009      	b.n	80fc4 <xTaskGenericCreate+0x134>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   80fb0:	4b43      	ldr	r3, [pc, #268]	; (810c0 <xTaskGenericCreate+0x230>)
   80fb2:	681b      	ldr	r3, [r3, #0]
   80fb4:	b933      	cbnz	r3, 80fc4 <xTaskGenericCreate+0x134>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   80fb6:	4b39      	ldr	r3, [pc, #228]	; (8109c <xTaskGenericCreate+0x20c>)
   80fb8:	681b      	ldr	r3, [r3, #0]
   80fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80fbc:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
   80fbe:	bf24      	itt	cs
   80fc0:	4b36      	ldrcs	r3, [pc, #216]	; (8109c <xTaskGenericCreate+0x20c>)
   80fc2:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   80fc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   80fc6:	4a3f      	ldr	r2, [pc, #252]	; (810c4 <xTaskGenericCreate+0x234>)
   80fc8:	6812      	ldr	r2, [r2, #0]
   80fca:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   80fcc:	bf84      	itt	hi
   80fce:	4a3d      	ldrhi	r2, [pc, #244]	; (810c4 <xTaskGenericCreate+0x234>)
   80fd0:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   80fd2:	4a3d      	ldr	r2, [pc, #244]	; (810c8 <xTaskGenericCreate+0x238>)
   80fd4:	6813      	ldr	r3, [r2, #0]
   80fd6:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   80fd8:	3301      	adds	r3, #1
   80fda:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   80fdc:	4620      	mov	r0, r4
   80fde:	4b3b      	ldr	r3, [pc, #236]	; (810cc <xTaskGenericCreate+0x23c>)
   80fe0:	4798      	blx	r3
   80fe2:	4b3b      	ldr	r3, [pc, #236]	; (810d0 <xTaskGenericCreate+0x240>)
   80fe4:	4798      	blx	r3
   80fe6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80fe8:	4b3a      	ldr	r3, [pc, #232]	; (810d4 <xTaskGenericCreate+0x244>)
   80fea:	681b      	ldr	r3, [r3, #0]
   80fec:	4298      	cmp	r0, r3
   80fee:	d918      	bls.n	81022 <xTaskGenericCreate+0x192>
   80ff0:	4b38      	ldr	r3, [pc, #224]	; (810d4 <xTaskGenericCreate+0x244>)
   80ff2:	6018      	str	r0, [r3, #0]
   80ff4:	e015      	b.n	81022 <xTaskGenericCreate+0x192>
	{
		if( xSchedulerRunning != pdFALSE )
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   80ff6:	4b29      	ldr	r3, [pc, #164]	; (8109c <xTaskGenericCreate+0x20c>)
   80ff8:	681b      	ldr	r3, [r3, #0]
   80ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80ffc:	429f      	cmp	r7, r3
   80ffe:	d903      	bls.n	81008 <xTaskGenericCreate+0x178>
			{
				portYIELD_WITHIN_API();
   81000:	4b35      	ldr	r3, [pc, #212]	; (810d8 <xTaskGenericCreate+0x248>)
   81002:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   81004:	2001      	movs	r0, #1
   81006:	e036      	b.n	81076 <xTaskGenericCreate+0x1e6>
   81008:	2001      	movs	r0, #1
   8100a:	e034      	b.n	81076 <xTaskGenericCreate+0x1e6>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   8100c:	6306      	str	r6, [r0, #48]	; 0x30
   8100e:	4630      	mov	r0, r6
   81010:	e767      	b.n	80ee2 <xTaskGenericCreate+0x52>
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		traceTASK_CREATE_FAILED();
   81012:	2200      	movs	r2, #0
   81014:	2103      	movs	r1, #3
   81016:	2043      	movs	r0, #67	; 0x43
   81018:	4b30      	ldr	r3, [pc, #192]	; (810dc <xTaskGenericCreate+0x24c>)
   8101a:	4798      	blx	r3
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   8101c:	f04f 30ff 	mov.w	r0, #4294967295
   81020:	e029      	b.n	81076 <xTaskGenericCreate+0x1e6>
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );
   81022:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81026:	4649      	mov	r1, r9
   81028:	4b1d      	ldr	r3, [pc, #116]	; (810a0 <xTaskGenericCreate+0x210>)
   8102a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8102e:	4b2c      	ldr	r3, [pc, #176]	; (810e0 <xTaskGenericCreate+0x250>)
   81030:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
   81032:	2003      	movs	r0, #3
   81034:	4b2b      	ldr	r3, [pc, #172]	; (810e4 <xTaskGenericCreate+0x254>)
   81036:	4798      	blx	r3
   81038:	6460      	str	r0, [r4, #68]	; 0x44
   8103a:	4620      	mov	r0, r4
   8103c:	4d23      	ldr	r5, [pc, #140]	; (810cc <xTaskGenericCreate+0x23c>)
   8103e:	47a8      	blx	r5
   81040:	4642      	mov	r2, r8
   81042:	4601      	mov	r1, r0
   81044:	2003      	movs	r0, #3
   81046:	4b28      	ldr	r3, [pc, #160]	; (810e8 <xTaskGenericCreate+0x258>)
   81048:	4798      	blx	r3
   8104a:	4620      	mov	r0, r4
   8104c:	47a8      	blx	r5
   8104e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   81052:	4601      	mov	r1, r0
   81054:	2003      	movs	r0, #3
   81056:	4b25      	ldr	r3, [pc, #148]	; (810ec <xTaskGenericCreate+0x25c>)
   81058:	4798      	blx	r3
   8105a:	4620      	mov	r0, r4
   8105c:	47a8      	blx	r5
   8105e:	4602      	mov	r2, r0
   81060:	2103      	movs	r1, #3
   81062:	201b      	movs	r0, #27
   81064:	4b1d      	ldr	r3, [pc, #116]	; (810dc <xTaskGenericCreate+0x24c>)
   81066:	4798      	blx	r3
		}
		taskEXIT_CRITICAL();
   81068:	4b21      	ldr	r3, [pc, #132]	; (810f0 <xTaskGenericCreate+0x260>)
   8106a:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   8106c:	4b14      	ldr	r3, [pc, #80]	; (810c0 <xTaskGenericCreate+0x230>)
   8106e:	681b      	ldr	r3, [r3, #0]
   81070:	2b00      	cmp	r3, #0
   81072:	d1c0      	bne.n	80ff6 <xTaskGenericCreate+0x166>
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   81074:	2001      	movs	r0, #1
			}
		}
	}

	return xReturn;
}
   81076:	b003      	add	sp, #12
   81078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8107c:	00080365 	.word	0x00080365
   81080:	000804bd 	.word	0x000804bd
   81084:	00080591 	.word	0x00080591
   81088:	0008375d 	.word	0x0008375d
   8108c:	00083a2d 	.word	0x00083a2d
   81090:	00080319 	.word	0x00080319
   81094:	00080375 	.word	0x00080375
   81098:	2007aa40 	.word	0x2007aa40
   8109c:	2007aa64 	.word	0x2007aa64
   810a0:	2007a9c0 	.word	0x2007a9c0
   810a4:	00080265 	.word	0x00080265
   810a8:	2007aa90 	.word	0x2007aa90
   810ac:	2007aa44 	.word	0x2007aa44
   810b0:	2007aa28 	.word	0x2007aa28
   810b4:	2007aa68 	.word	0x2007aa68
   810b8:	2007aa3c 	.word	0x2007aa3c
   810bc:	2007aa24 	.word	0x2007aa24
   810c0:	2007aa58 	.word	0x2007aa58
   810c4:	2007aab0 	.word	0x2007aab0
   810c8:	2007aa60 	.word	0x2007aa60
   810cc:	0008308d 	.word	0x0008308d
   810d0:	00082a75 	.word	0x00082a75
   810d4:	2007a9b4 	.word	0x2007a9b4
   810d8:	00080355 	.word	0x00080355
   810dc:	00082b25 	.word	0x00082b25
   810e0:	00080285 	.word	0x00080285
   810e4:	000825c5 	.word	0x000825c5
   810e8:	00082711 	.word	0x00082711
   810ec:	00082df1 	.word	0x00082df1
   810f0:	00080395 	.word	0x00080395
   810f4:	0008027d 	.word	0x0008027d
   810f8:	2007aa7c 	.word	0x2007aa7c

000810fc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   810fc:	b510      	push	{r4, lr}
   810fe:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81100:	2300      	movs	r3, #0
   81102:	9303      	str	r3, [sp, #12]
   81104:	9302      	str	r3, [sp, #8]
   81106:	9301      	str	r3, [sp, #4]
   81108:	9300      	str	r3, [sp, #0]
   8110a:	2282      	movs	r2, #130	; 0x82
   8110c:	490d      	ldr	r1, [pc, #52]	; (81144 <vTaskStartScheduler+0x48>)
   8110e:	480e      	ldr	r0, [pc, #56]	; (81148 <vTaskStartScheduler+0x4c>)
   81110:	4c0e      	ldr	r4, [pc, #56]	; (8114c <vTaskStartScheduler+0x50>)
   81112:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   81114:	2801      	cmp	r0, #1
   81116:	d10e      	bne.n	81136 <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
   81118:	4b0d      	ldr	r3, [pc, #52]	; (81150 <vTaskStartScheduler+0x54>)
   8111a:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   8111c:	2801      	cmp	r0, #1
   8111e:	d10a      	bne.n	81136 <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   81120:	4b0c      	ldr	r3, [pc, #48]	; (81154 <vTaskStartScheduler+0x58>)
   81122:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   81124:	2201      	movs	r2, #1
   81126:	4b0c      	ldr	r3, [pc, #48]	; (81158 <vTaskStartScheduler+0x5c>)
   81128:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   8112a:	2200      	movs	r2, #0
   8112c:	4b0b      	ldr	r3, [pc, #44]	; (8115c <vTaskStartScheduler+0x60>)
   8112e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   81130:	4b0b      	ldr	r3, [pc, #44]	; (81160 <vTaskStartScheduler+0x64>)
   81132:	4798      	blx	r3
   81134:	e004      	b.n	81140 <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   81136:	b918      	cbnz	r0, 81140 <vTaskStartScheduler+0x44>
   81138:	4b06      	ldr	r3, [pc, #24]	; (81154 <vTaskStartScheduler+0x58>)
   8113a:	4798      	blx	r3
   8113c:	bf00      	nop
   8113e:	e7fd      	b.n	8113c <vTaskStartScheduler+0x40>
}
   81140:	b004      	add	sp, #16
   81142:	bd10      	pop	{r4, pc}
   81144:	00085248 	.word	0x00085248
   81148:	00081405 	.word	0x00081405
   8114c:	00080e91 	.word	0x00080e91
   81150:	000819b5 	.word	0x000819b5
   81154:	00080365 	.word	0x00080365
   81158:	2007aa58 	.word	0x2007aa58
   8115c:	2007a9bc 	.word	0x2007a9bc
   81160:	00080431 	.word	0x00080431

00081164 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81164:	4a02      	ldr	r2, [pc, #8]	; (81170 <vTaskSuspendAll+0xc>)
   81166:	6813      	ldr	r3, [r2, #0]
   81168:	3301      	adds	r3, #1
   8116a:	6013      	str	r3, [r2, #0]
   8116c:	4770      	bx	lr
   8116e:	bf00      	nop
   81170:	2007aaa4 	.word	0x2007aaa4

00081174 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   81174:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   81176:	4b04      	ldr	r3, [pc, #16]	; (81188 <xTaskGetTickCount+0x14>)
   81178:	4798      	blx	r3
	{
		xTicks = xTickCount;
   8117a:	4b04      	ldr	r3, [pc, #16]	; (8118c <xTaskGetTickCount+0x18>)
   8117c:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
   8117e:	4b04      	ldr	r3, [pc, #16]	; (81190 <xTaskGetTickCount+0x1c>)
   81180:	4798      	blx	r3

	return xTicks;
}
   81182:	4620      	mov	r0, r4
   81184:	bd10      	pop	{r4, pc}
   81186:	bf00      	nop
   81188:	00080375 	.word	0x00080375
   8118c:	2007a9bc 	.word	0x2007a9bc
   81190:	00080395 	.word	0x00080395

00081194 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   81198:	4b45      	ldr	r3, [pc, #276]	; (812b0 <vTaskIncrementTick+0x11c>)
   8119a:	681b      	ldr	r3, [r3, #0]
   8119c:	2b01      	cmp	r3, #1
   8119e:	d002      	beq.n	811a6 <vTaskIncrementTick+0x12>
   811a0:	4b44      	ldr	r3, [pc, #272]	; (812b4 <vTaskIncrementTick+0x120>)
   811a2:	681b      	ldr	r3, [r3, #0]
   811a4:	b933      	cbnz	r3, 811b4 <vTaskIncrementTick+0x20>
   811a6:	4a44      	ldr	r2, [pc, #272]	; (812b8 <vTaskIncrementTick+0x124>)
   811a8:	6813      	ldr	r3, [r2, #0]
   811aa:	3301      	adds	r3, #1
   811ac:	6013      	str	r3, [r2, #0]
   811ae:	2000      	movs	r0, #0
   811b0:	4b42      	ldr	r3, [pc, #264]	; (812bc <vTaskIncrementTick+0x128>)
   811b2:	4798      	blx	r3
   811b4:	4b3e      	ldr	r3, [pc, #248]	; (812b0 <vTaskIncrementTick+0x11c>)
   811b6:	681a      	ldr	r2, [r3, #0]
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   811b8:	681b      	ldr	r3, [r3, #0]
   811ba:	2b00      	cmp	r3, #0
   811bc:	d171      	bne.n	812a2 <vTaskIncrementTick+0x10e>
	{
		++xTickCount;
   811be:	4b40      	ldr	r3, [pc, #256]	; (812c0 <vTaskIncrementTick+0x12c>)
   811c0:	681a      	ldr	r2, [r3, #0]
   811c2:	3201      	adds	r2, #1
   811c4:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   811c6:	681b      	ldr	r3, [r3, #0]
   811c8:	bb03      	cbnz	r3, 8120c <vTaskIncrementTick+0x78>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   811ca:	4b3e      	ldr	r3, [pc, #248]	; (812c4 <vTaskIncrementTick+0x130>)
   811cc:	681b      	ldr	r3, [r3, #0]
   811ce:	681b      	ldr	r3, [r3, #0]
   811d0:	b11b      	cbz	r3, 811da <vTaskIncrementTick+0x46>
   811d2:	4b3d      	ldr	r3, [pc, #244]	; (812c8 <vTaskIncrementTick+0x134>)
   811d4:	4798      	blx	r3
   811d6:	bf00      	nop
   811d8:	e7fd      	b.n	811d6 <vTaskIncrementTick+0x42>

			pxTemp = pxDelayedTaskList;
   811da:	4b3a      	ldr	r3, [pc, #232]	; (812c4 <vTaskIncrementTick+0x130>)
   811dc:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   811de:	4a3b      	ldr	r2, [pc, #236]	; (812cc <vTaskIncrementTick+0x138>)
   811e0:	6810      	ldr	r0, [r2, #0]
   811e2:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   811e4:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   811e6:	493a      	ldr	r1, [pc, #232]	; (812d0 <vTaskIncrementTick+0x13c>)
   811e8:	680a      	ldr	r2, [r1, #0]
   811ea:	3201      	adds	r2, #1
   811ec:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   811ee:	681b      	ldr	r3, [r3, #0]
   811f0:	681b      	ldr	r3, [r3, #0]
   811f2:	b923      	cbnz	r3, 811fe <vTaskIncrementTick+0x6a>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   811f4:	f04f 32ff 	mov.w	r2, #4294967295
   811f8:	4b36      	ldr	r3, [pc, #216]	; (812d4 <vTaskIncrementTick+0x140>)
   811fa:	601a      	str	r2, [r3, #0]
   811fc:	e006      	b.n	8120c <vTaskIncrementTick+0x78>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   811fe:	4b31      	ldr	r3, [pc, #196]	; (812c4 <vTaskIncrementTick+0x130>)
   81200:	681b      	ldr	r3, [r3, #0]
   81202:	68db      	ldr	r3, [r3, #12]
   81204:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81206:	685a      	ldr	r2, [r3, #4]
   81208:	4b32      	ldr	r3, [pc, #200]	; (812d4 <vTaskIncrementTick+0x140>)
   8120a:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   8120c:	4b2c      	ldr	r3, [pc, #176]	; (812c0 <vTaskIncrementTick+0x12c>)
   8120e:	681a      	ldr	r2, [r3, #0]
   81210:	4b30      	ldr	r3, [pc, #192]	; (812d4 <vTaskIncrementTick+0x140>)
   81212:	681b      	ldr	r3, [r3, #0]
   81214:	429a      	cmp	r2, r3
   81216:	d348      	bcc.n	812aa <vTaskIncrementTick+0x116>
   81218:	4b2a      	ldr	r3, [pc, #168]	; (812c4 <vTaskIncrementTick+0x130>)
   8121a:	681b      	ldr	r3, [r3, #0]
   8121c:	681b      	ldr	r3, [r3, #0]
   8121e:	b16b      	cbz	r3, 8123c <vTaskIncrementTick+0xa8>
   81220:	4b28      	ldr	r3, [pc, #160]	; (812c4 <vTaskIncrementTick+0x130>)
   81222:	681b      	ldr	r3, [r3, #0]
   81224:	68db      	ldr	r3, [r3, #12]
   81226:	68dc      	ldr	r4, [r3, #12]
   81228:	6863      	ldr	r3, [r4, #4]
   8122a:	4a25      	ldr	r2, [pc, #148]	; (812c0 <vTaskIncrementTick+0x12c>)
   8122c:	6812      	ldr	r2, [r2, #0]
   8122e:	4293      	cmp	r3, r2
   81230:	d813      	bhi.n	8125a <vTaskIncrementTick+0xc6>
   81232:	4e29      	ldr	r6, [pc, #164]	; (812d8 <vTaskIncrementTick+0x144>)
   81234:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 812ec <vTaskIncrementTick+0x158>
   81238:	4f28      	ldr	r7, [pc, #160]	; (812dc <vTaskIncrementTick+0x148>)
   8123a:	e012      	b.n	81262 <vTaskIncrementTick+0xce>
   8123c:	f04f 32ff 	mov.w	r2, #4294967295
   81240:	4b24      	ldr	r3, [pc, #144]	; (812d4 <vTaskIncrementTick+0x140>)
   81242:	601a      	str	r2, [r3, #0]
   81244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81248:	4b1e      	ldr	r3, [pc, #120]	; (812c4 <vTaskIncrementTick+0x130>)
   8124a:	681b      	ldr	r3, [r3, #0]
   8124c:	68db      	ldr	r3, [r3, #12]
   8124e:	68dc      	ldr	r4, [r3, #12]
   81250:	6863      	ldr	r3, [r4, #4]
   81252:	4a1b      	ldr	r2, [pc, #108]	; (812c0 <vTaskIncrementTick+0x12c>)
   81254:	6812      	ldr	r2, [r2, #0]
   81256:	4293      	cmp	r3, r2
   81258:	d903      	bls.n	81262 <vTaskIncrementTick+0xce>
   8125a:	4a1e      	ldr	r2, [pc, #120]	; (812d4 <vTaskIncrementTick+0x140>)
   8125c:	6013      	str	r3, [r2, #0]
   8125e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81262:	1d25      	adds	r5, r4, #4
   81264:	4628      	mov	r0, r5
   81266:	47b0      	blx	r6
   81268:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8126a:	b113      	cbz	r3, 81272 <vTaskIncrementTick+0xde>
   8126c:	f104 0018 	add.w	r0, r4, #24
   81270:	47b0      	blx	r6
   81272:	4620      	mov	r0, r4
   81274:	47c0      	blx	r8
   81276:	47b8      	blx	r7
   81278:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8127a:	4b19      	ldr	r3, [pc, #100]	; (812e0 <vTaskIncrementTick+0x14c>)
   8127c:	681b      	ldr	r3, [r3, #0]
   8127e:	4298      	cmp	r0, r3
   81280:	bf84      	itt	hi
   81282:	4b17      	ldrhi	r3, [pc, #92]	; (812e0 <vTaskIncrementTick+0x14c>)
   81284:	6018      	strhi	r0, [r3, #0]
   81286:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8128a:	4629      	mov	r1, r5
   8128c:	4b15      	ldr	r3, [pc, #84]	; (812e4 <vTaskIncrementTick+0x150>)
   8128e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81292:	4b15      	ldr	r3, [pc, #84]	; (812e8 <vTaskIncrementTick+0x154>)
   81294:	4798      	blx	r3
   81296:	4b0b      	ldr	r3, [pc, #44]	; (812c4 <vTaskIncrementTick+0x130>)
   81298:	681b      	ldr	r3, [r3, #0]
   8129a:	681b      	ldr	r3, [r3, #0]
   8129c:	2b00      	cmp	r3, #0
   8129e:	d1d3      	bne.n	81248 <vTaskIncrementTick+0xb4>
   812a0:	e7cc      	b.n	8123c <vTaskIncrementTick+0xa8>
	}
	else
	{
		++uxMissedTicks;
   812a2:	4a04      	ldr	r2, [pc, #16]	; (812b4 <vTaskIncrementTick+0x120>)
   812a4:	6813      	ldr	r3, [r2, #0]
   812a6:	3301      	adds	r3, #1
   812a8:	6013      	str	r3, [r2, #0]
   812aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   812ae:	bf00      	nop
   812b0:	2007aaa4 	.word	0x2007aaa4
   812b4:	2007aaa8 	.word	0x2007aaa8
   812b8:	2007ac10 	.word	0x2007ac10
   812bc:	000829c1 	.word	0x000829c1
   812c0:	2007a9bc 	.word	0x2007a9bc
   812c4:	2007aa3c 	.word	0x2007aa3c
   812c8:	00080365 	.word	0x00080365
   812cc:	2007aa24 	.word	0x2007aa24
   812d0:	2007aaac 	.word	0x2007aaac
   812d4:	20070134 	.word	0x20070134
   812d8:	000802dd 	.word	0x000802dd
   812dc:	00082a75 	.word	0x00082a75
   812e0:	2007a9b4 	.word	0x2007a9b4
   812e4:	2007a9c0 	.word	0x2007a9c0
   812e8:	00080285 	.word	0x00080285
   812ec:	0008308d 	.word	0x0008308d

000812f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   812f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   812f4:	4b32      	ldr	r3, [pc, #200]	; (813c0 <xTaskResumeAll+0xd0>)
   812f6:	681b      	ldr	r3, [r3, #0]
   812f8:	b91b      	cbnz	r3, 81302 <xTaskResumeAll+0x12>
   812fa:	4b32      	ldr	r3, [pc, #200]	; (813c4 <xTaskResumeAll+0xd4>)
   812fc:	4798      	blx	r3
   812fe:	bf00      	nop
   81300:	e7fd      	b.n	812fe <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   81302:	4b31      	ldr	r3, [pc, #196]	; (813c8 <xTaskResumeAll+0xd8>)
   81304:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   81306:	4b2e      	ldr	r3, [pc, #184]	; (813c0 <xTaskResumeAll+0xd0>)
   81308:	681a      	ldr	r2, [r3, #0]
   8130a:	3a01      	subs	r2, #1
   8130c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8130e:	681b      	ldr	r3, [r3, #0]
   81310:	2b00      	cmp	r3, #0
   81312:	d14d      	bne.n	813b0 <xTaskResumeAll+0xc0>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81314:	4b2d      	ldr	r3, [pc, #180]	; (813cc <xTaskResumeAll+0xdc>)
   81316:	681b      	ldr	r3, [r3, #0]
   81318:	bb2b      	cbnz	r3, 81366 <xTaskResumeAll+0x76>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8131a:	2400      	movs	r4, #0
   8131c:	e04b      	b.n	813b6 <xTaskResumeAll+0xc6>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   8131e:	68fb      	ldr	r3, [r7, #12]
   81320:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81322:	f104 0018 	add.w	r0, r4, #24
   81326:	47b0      	blx	r6
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81328:	f104 0804 	add.w	r8, r4, #4
   8132c:	4640      	mov	r0, r8
   8132e:	47b0      	blx	r6
					prvAddTaskToReadyQueue( pxTCB );
   81330:	4620      	mov	r0, r4
   81332:	47c8      	blx	r9
   81334:	4b26      	ldr	r3, [pc, #152]	; (813d0 <xTaskResumeAll+0xe0>)
   81336:	4798      	blx	r3
   81338:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8133a:	4b26      	ldr	r3, [pc, #152]	; (813d4 <xTaskResumeAll+0xe4>)
   8133c:	681b      	ldr	r3, [r3, #0]
   8133e:	4298      	cmp	r0, r3
   81340:	bf84      	itt	hi
   81342:	4b24      	ldrhi	r3, [pc, #144]	; (813d4 <xTaskResumeAll+0xe4>)
   81344:	6018      	strhi	r0, [r3, #0]
   81346:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8134a:	4641      	mov	r1, r8
   8134c:	4b22      	ldr	r3, [pc, #136]	; (813d8 <xTaskResumeAll+0xe8>)
   8134e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81352:	4b22      	ldr	r3, [pc, #136]	; (813dc <xTaskResumeAll+0xec>)
   81354:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81356:	4b22      	ldr	r3, [pc, #136]	; (813e0 <xTaskResumeAll+0xf0>)
   81358:	681b      	ldr	r3, [r3, #0]
   8135a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   8135c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   8135e:	429a      	cmp	r2, r3
   81360:	bf28      	it	cs
   81362:	2501      	movcs	r5, #1
   81364:	e004      	b.n	81370 <xTaskResumeAll+0x80>
   81366:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81368:	4f1e      	ldr	r7, [pc, #120]	; (813e4 <xTaskResumeAll+0xf4>)
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   8136a:	4e1f      	ldr	r6, [pc, #124]	; (813e8 <xTaskResumeAll+0xf8>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   8136c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 81400 <xTaskResumeAll+0x110>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81370:	683b      	ldr	r3, [r7, #0]
   81372:	2b00      	cmp	r3, #0
   81374:	d1d3      	bne.n	8131e <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81376:	4b1d      	ldr	r3, [pc, #116]	; (813ec <xTaskResumeAll+0xfc>)
   81378:	681b      	ldr	r3, [r3, #0]
   8137a:	b163      	cbz	r3, 81396 <xTaskResumeAll+0xa6>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8137c:	4b1b      	ldr	r3, [pc, #108]	; (813ec <xTaskResumeAll+0xfc>)
   8137e:	681b      	ldr	r3, [r3, #0]
   81380:	b17b      	cbz	r3, 813a2 <xTaskResumeAll+0xb2>
					{
						vTaskIncrementTick();
   81382:	4d1b      	ldr	r5, [pc, #108]	; (813f0 <xTaskResumeAll+0x100>)
						--uxMissedTicks;
   81384:	4c19      	ldr	r4, [pc, #100]	; (813ec <xTaskResumeAll+0xfc>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   81386:	47a8      	blx	r5
						--uxMissedTicks;
   81388:	6823      	ldr	r3, [r4, #0]
   8138a:	3b01      	subs	r3, #1
   8138c:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8138e:	6823      	ldr	r3, [r4, #0]
   81390:	2b00      	cmp	r3, #0
   81392:	d1f8      	bne.n	81386 <xTaskResumeAll+0x96>
   81394:	e005      	b.n	813a2 <xTaskResumeAll+0xb2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81396:	2d01      	cmp	r5, #1
   81398:	d003      	beq.n	813a2 <xTaskResumeAll+0xb2>
   8139a:	4b16      	ldr	r3, [pc, #88]	; (813f4 <xTaskResumeAll+0x104>)
   8139c:	681b      	ldr	r3, [r3, #0]
   8139e:	2b01      	cmp	r3, #1
   813a0:	d108      	bne.n	813b4 <xTaskResumeAll+0xc4>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   813a2:	2200      	movs	r2, #0
   813a4:	4b13      	ldr	r3, [pc, #76]	; (813f4 <xTaskResumeAll+0x104>)
   813a6:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   813a8:	4b13      	ldr	r3, [pc, #76]	; (813f8 <xTaskResumeAll+0x108>)
   813aa:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   813ac:	2401      	movs	r4, #1
   813ae:	e002      	b.n	813b6 <xTaskResumeAll+0xc6>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   813b0:	2400      	movs	r4, #0
   813b2:	e000      	b.n	813b6 <xTaskResumeAll+0xc6>
   813b4:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   813b6:	4b11      	ldr	r3, [pc, #68]	; (813fc <xTaskResumeAll+0x10c>)
   813b8:	4798      	blx	r3

	return xAlreadyYielded;
}
   813ba:	4620      	mov	r0, r4
   813bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   813c0:	2007aaa4 	.word	0x2007aaa4
   813c4:	00080365 	.word	0x00080365
   813c8:	00080375 	.word	0x00080375
   813cc:	2007aa40 	.word	0x2007aa40
   813d0:	00082a75 	.word	0x00082a75
   813d4:	2007a9b4 	.word	0x2007a9b4
   813d8:	2007a9c0 	.word	0x2007a9c0
   813dc:	00080285 	.word	0x00080285
   813e0:	2007aa64 	.word	0x2007aa64
   813e4:	2007aa44 	.word	0x2007aa44
   813e8:	000802dd 	.word	0x000802dd
   813ec:	2007aaa8 	.word	0x2007aaa8
   813f0:	00081195 	.word	0x00081195
   813f4:	2007aa5c 	.word	0x2007aa5c
   813f8:	00080355 	.word	0x00080355
   813fc:	00080395 	.word	0x00080395
   81400:	0008308d 	.word	0x0008308d

00081404 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81404:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81406:	4d15      	ldr	r5, [pc, #84]	; (8145c <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81408:	4f15      	ldr	r7, [pc, #84]	; (81460 <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   8140a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 81480 <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
   8140e:	4e15      	ldr	r6, [pc, #84]	; (81464 <prvIdleTask+0x60>)
   81410:	e019      	b.n	81446 <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81412:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81414:	683c      	ldr	r4, [r7, #0]
			xTaskResumeAll();
   81416:	47b0      	blx	r6

			if( xListIsEmpty == pdFALSE )
   81418:	b1ac      	cbz	r4, 81446 <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   8141a:	4b13      	ldr	r3, [pc, #76]	; (81468 <prvIdleTask+0x64>)
   8141c:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   8141e:	68fb      	ldr	r3, [r7, #12]
   81420:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81422:	1d20      	adds	r0, r4, #4
   81424:	4b11      	ldr	r3, [pc, #68]	; (8146c <prvIdleTask+0x68>)
   81426:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81428:	4a11      	ldr	r2, [pc, #68]	; (81470 <prvIdleTask+0x6c>)
   8142a:	6813      	ldr	r3, [r2, #0]
   8142c:	3b01      	subs	r3, #1
   8142e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   81430:	682b      	ldr	r3, [r5, #0]
   81432:	3b01      	subs	r3, #1
   81434:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   81436:	4b0f      	ldr	r3, [pc, #60]	; (81474 <prvIdleTask+0x70>)
   81438:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   8143a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   8143c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 81484 <prvIdleTask+0x80>
   81440:	47c8      	blx	r9
		vPortFree( pxTCB );
   81442:	4620      	mov	r0, r4
   81444:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81446:	682b      	ldr	r3, [r5, #0]
   81448:	2b00      	cmp	r3, #0
   8144a:	d1e2      	bne.n	81412 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   8144c:	4b0a      	ldr	r3, [pc, #40]	; (81478 <prvIdleTask+0x74>)
   8144e:	681b      	ldr	r3, [r3, #0]
   81450:	2b01      	cmp	r3, #1
   81452:	d9dc      	bls.n	8140e <prvIdleTask+0xa>
			{
				taskYIELD();
   81454:	4b09      	ldr	r3, [pc, #36]	; (8147c <prvIdleTask+0x78>)
   81456:	4798      	blx	r3
   81458:	e7d7      	b.n	8140a <prvIdleTask+0x6>
   8145a:	bf00      	nop
   8145c:	2007a9b8 	.word	0x2007a9b8
   81460:	2007aa28 	.word	0x2007aa28
   81464:	000812f1 	.word	0x000812f1
   81468:	00080375 	.word	0x00080375
   8146c:	000802dd 	.word	0x000802dd
   81470:	2007aa40 	.word	0x2007aa40
   81474:	00080395 	.word	0x00080395
   81478:	2007a9c0 	.word	0x2007a9c0
   8147c:	00080355 	.word	0x00080355
   81480:	00081165 	.word	0x00081165
   81484:	00080591 	.word	0x00080591

00081488 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81488:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   8148a:	4b25      	ldr	r3, [pc, #148]	; (81520 <vTaskSwitchContext+0x98>)
   8148c:	681b      	ldr	r3, [r3, #0]
   8148e:	b96b      	cbnz	r3, 814ac <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81490:	4b24      	ldr	r3, [pc, #144]	; (81524 <vTaskSwitchContext+0x9c>)
   81492:	681b      	ldr	r3, [r3, #0]
   81494:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81498:	009b      	lsls	r3, r3, #2
   8149a:	4a23      	ldr	r2, [pc, #140]	; (81528 <vTaskSwitchContext+0xa0>)
   8149c:	58d3      	ldr	r3, [r2, r3]
   8149e:	b9cb      	cbnz	r3, 814d4 <vTaskSwitchContext+0x4c>
   814a0:	4b20      	ldr	r3, [pc, #128]	; (81524 <vTaskSwitchContext+0x9c>)
   814a2:	681b      	ldr	r3, [r3, #0]
   814a4:	b143      	cbz	r3, 814b8 <vTaskSwitchContext+0x30>
   814a6:	4a1f      	ldr	r2, [pc, #124]	; (81524 <vTaskSwitchContext+0x9c>)
   814a8:	491f      	ldr	r1, [pc, #124]	; (81528 <vTaskSwitchContext+0xa0>)
   814aa:	e009      	b.n	814c0 <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   814ac:	2201      	movs	r2, #1
   814ae:	4b1f      	ldr	r3, [pc, #124]	; (8152c <vTaskSwitchContext+0xa4>)
   814b0:	601a      	str	r2, [r3, #0]
   814b2:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   814b4:	6813      	ldr	r3, [r2, #0]
   814b6:	b91b      	cbnz	r3, 814c0 <vTaskSwitchContext+0x38>
   814b8:	4b1d      	ldr	r3, [pc, #116]	; (81530 <vTaskSwitchContext+0xa8>)
   814ba:	4798      	blx	r3
   814bc:	bf00      	nop
   814be:	e7fd      	b.n	814bc <vTaskSwitchContext+0x34>
   814c0:	6813      	ldr	r3, [r2, #0]
   814c2:	3b01      	subs	r3, #1
   814c4:	6013      	str	r3, [r2, #0]
   814c6:	6813      	ldr	r3, [r2, #0]
   814c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   814cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   814d0:	2b00      	cmp	r3, #0
   814d2:	d0ef      	beq.n	814b4 <vTaskSwitchContext+0x2c>
   814d4:	4b13      	ldr	r3, [pc, #76]	; (81524 <vTaskSwitchContext+0x9c>)
   814d6:	681b      	ldr	r3, [r3, #0]
   814d8:	4a13      	ldr	r2, [pc, #76]	; (81528 <vTaskSwitchContext+0xa0>)
   814da:	0099      	lsls	r1, r3, #2
   814dc:	18c8      	adds	r0, r1, r3
   814de:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   814e2:	6844      	ldr	r4, [r0, #4]
   814e4:	6864      	ldr	r4, [r4, #4]
   814e6:	6044      	str	r4, [r0, #4]
   814e8:	4602      	mov	r2, r0
   814ea:	3208      	adds	r2, #8
   814ec:	4294      	cmp	r4, r2
   814ee:	d106      	bne.n	814fe <vTaskSwitchContext+0x76>
   814f0:	6860      	ldr	r0, [r4, #4]
   814f2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   814f6:	4a0c      	ldr	r2, [pc, #48]	; (81528 <vTaskSwitchContext+0xa0>)
   814f8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   814fc:	6050      	str	r0, [r2, #4]
   814fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81502:	4a09      	ldr	r2, [pc, #36]	; (81528 <vTaskSwitchContext+0xa0>)
   81504:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81508:	685b      	ldr	r3, [r3, #4]
   8150a:	68da      	ldr	r2, [r3, #12]
   8150c:	4b09      	ldr	r3, [pc, #36]	; (81534 <vTaskSwitchContext+0xac>)
   8150e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
   81510:	4b09      	ldr	r3, [pc, #36]	; (81538 <vTaskSwitchContext+0xb0>)
   81512:	4798      	blx	r3
   81514:	4b09      	ldr	r3, [pc, #36]	; (8153c <vTaskSwitchContext+0xb4>)
   81516:	4798      	blx	r3
   81518:	4b09      	ldr	r3, [pc, #36]	; (81540 <vTaskSwitchContext+0xb8>)
   8151a:	4798      	blx	r3
   8151c:	bd10      	pop	{r4, pc}
   8151e:	bf00      	nop
   81520:	2007aaa4 	.word	0x2007aaa4
   81524:	2007a9b4 	.word	0x2007a9b4
   81528:	2007a9c0 	.word	0x2007a9c0
   8152c:	2007aa5c 	.word	0x2007aa5c
   81530:	00080365 	.word	0x00080365
   81534:	2007aa64 	.word	0x2007aa64
   81538:	0008309d 	.word	0x0008309d
   8153c:	0008308d 	.word	0x0008308d
   81540:	00082f59 	.word	0x00082f59

00081544 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   81544:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
   81546:	b918      	cbnz	r0, 81550 <vTaskPlaceOnEventList+0xc>
   81548:	4b0e      	ldr	r3, [pc, #56]	; (81584 <vTaskPlaceOnEventList+0x40>)
   8154a:	4798      	blx	r3
   8154c:	bf00      	nop
   8154e:	e7fd      	b.n	8154c <vTaskPlaceOnEventList+0x8>
   81550:	460c      	mov	r4, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81552:	4d0d      	ldr	r5, [pc, #52]	; (81588 <vTaskPlaceOnEventList+0x44>)
   81554:	6829      	ldr	r1, [r5, #0]
   81556:	3118      	adds	r1, #24
   81558:	4b0c      	ldr	r3, [pc, #48]	; (8158c <vTaskPlaceOnEventList+0x48>)
   8155a:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8155c:	6828      	ldr	r0, [r5, #0]
   8155e:	3004      	adds	r0, #4
   81560:	4b0b      	ldr	r3, [pc, #44]	; (81590 <vTaskPlaceOnEventList+0x4c>)
   81562:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81564:	f1b4 3fff 	cmp.w	r4, #4294967295
   81568:	d105      	bne.n	81576 <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8156a:	6829      	ldr	r1, [r5, #0]
   8156c:	3104      	adds	r1, #4
   8156e:	4809      	ldr	r0, [pc, #36]	; (81594 <vTaskPlaceOnEventList+0x50>)
   81570:	4b09      	ldr	r3, [pc, #36]	; (81598 <vTaskPlaceOnEventList+0x54>)
   81572:	4798      	blx	r3
   81574:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   81576:	4b09      	ldr	r3, [pc, #36]	; (8159c <vTaskPlaceOnEventList+0x58>)
   81578:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   8157a:	4420      	add	r0, r4
   8157c:	4b08      	ldr	r3, [pc, #32]	; (815a0 <vTaskPlaceOnEventList+0x5c>)
   8157e:	4798      	blx	r3
   81580:	bd38      	pop	{r3, r4, r5, pc}
   81582:	bf00      	nop
   81584:	00080365 	.word	0x00080365
   81588:	2007aa64 	.word	0x2007aa64
   8158c:	000802a1 	.word	0x000802a1
   81590:	000802dd 	.word	0x000802dd
   81594:	2007aa68 	.word	0x2007aa68
   81598:	00080285 	.word	0x00080285
   8159c:	2007a9bc 	.word	0x2007a9bc
   815a0:	00080e39 	.word	0x00080e39

000815a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   815a4:	b570      	push	{r4, r5, r6, lr}
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   815a6:	b918      	cbnz	r0, 815b0 <vTaskPlaceOnEventListRestricted+0xc>
   815a8:	4b10      	ldr	r3, [pc, #64]	; (815ec <vTaskPlaceOnEventListRestricted+0x48>)
   815aa:	4798      	blx	r3
   815ac:	bf00      	nop
   815ae:	e7fd      	b.n	815ac <vTaskPlaceOnEventListRestricted+0x8>
   815b0:	460c      	mov	r4, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   815b2:	4d0f      	ldr	r5, [pc, #60]	; (815f0 <vTaskPlaceOnEventListRestricted+0x4c>)
   815b4:	6829      	ldr	r1, [r5, #0]
   815b6:	3118      	adds	r1, #24
   815b8:	4b0e      	ldr	r3, [pc, #56]	; (815f4 <vTaskPlaceOnEventListRestricted+0x50>)
   815ba:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   815bc:	6828      	ldr	r0, [r5, #0]
   815be:	3004      	adds	r0, #4
   815c0:	4b0d      	ldr	r3, [pc, #52]	; (815f8 <vTaskPlaceOnEventListRestricted+0x54>)
   815c2:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   815c4:	4b0d      	ldr	r3, [pc, #52]	; (815fc <vTaskPlaceOnEventListRestricted+0x58>)
   815c6:	681b      	ldr	r3, [r3, #0]
   815c8:	441c      	add	r4, r3
		
		traceTASK_DELAY_UNTIL();
   815ca:	4621      	mov	r1, r4
   815cc:	2088      	movs	r0, #136	; 0x88
   815ce:	4b0c      	ldr	r3, [pc, #48]	; (81600 <vTaskPlaceOnEventListRestricted+0x5c>)
   815d0:	4798      	blx	r3
   815d2:	6828      	ldr	r0, [r5, #0]
   815d4:	4e0b      	ldr	r6, [pc, #44]	; (81604 <vTaskPlaceOnEventListRestricted+0x60>)
   815d6:	47b0      	blx	r6
   815d8:	4d0b      	ldr	r5, [pc, #44]	; (81608 <vTaskPlaceOnEventListRestricted+0x64>)
   815da:	47a8      	blx	r5
   815dc:	4b0b      	ldr	r3, [pc, #44]	; (8160c <vTaskPlaceOnEventListRestricted+0x68>)
   815de:	4798      	blx	r3
   815e0:	47b0      	blx	r6
   815e2:	47a8      	blx	r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   815e4:	4620      	mov	r0, r4
   815e6:	4b0a      	ldr	r3, [pc, #40]	; (81610 <vTaskPlaceOnEventListRestricted+0x6c>)
   815e8:	4798      	blx	r3
   815ea:	bd70      	pop	{r4, r5, r6, pc}
   815ec:	00080365 	.word	0x00080365
   815f0:	2007aa64 	.word	0x2007aa64
   815f4:	00080285 	.word	0x00080285
   815f8:	000802dd 	.word	0x000802dd
   815fc:	2007a9bc 	.word	0x2007a9bc
   81600:	00082d29 	.word	0x00082d29
   81604:	0008308d 	.word	0x0008308d
   81608:	00083035 	.word	0x00083035
   8160c:	0008309d 	.word	0x0008309d
   81610:	00080e39 	.word	0x00080e39

00081614 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   81614:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81616:	68c3      	ldr	r3, [r0, #12]
   81618:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8161a:	b91c      	cbnz	r4, 81624 <xTaskRemoveFromEventList+0x10>
   8161c:	4b18      	ldr	r3, [pc, #96]	; (81680 <xTaskRemoveFromEventList+0x6c>)
   8161e:	4798      	blx	r3
   81620:	bf00      	nop
   81622:	e7fd      	b.n	81620 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81624:	f104 0518 	add.w	r5, r4, #24
   81628:	4628      	mov	r0, r5
   8162a:	4b16      	ldr	r3, [pc, #88]	; (81684 <xTaskRemoveFromEventList+0x70>)
   8162c:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8162e:	4b16      	ldr	r3, [pc, #88]	; (81688 <xTaskRemoveFromEventList+0x74>)
   81630:	681b      	ldr	r3, [r3, #0]
   81632:	b9c3      	cbnz	r3, 81666 <xTaskRemoveFromEventList+0x52>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81634:	1d25      	adds	r5, r4, #4
   81636:	4628      	mov	r0, r5
   81638:	4b12      	ldr	r3, [pc, #72]	; (81684 <xTaskRemoveFromEventList+0x70>)
   8163a:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   8163c:	4620      	mov	r0, r4
   8163e:	4b13      	ldr	r3, [pc, #76]	; (8168c <xTaskRemoveFromEventList+0x78>)
   81640:	4798      	blx	r3
   81642:	4b13      	ldr	r3, [pc, #76]	; (81690 <xTaskRemoveFromEventList+0x7c>)
   81644:	4798      	blx	r3
   81646:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81648:	4b12      	ldr	r3, [pc, #72]	; (81694 <xTaskRemoveFromEventList+0x80>)
   8164a:	681b      	ldr	r3, [r3, #0]
   8164c:	4298      	cmp	r0, r3
   8164e:	bf84      	itt	hi
   81650:	4b10      	ldrhi	r3, [pc, #64]	; (81694 <xTaskRemoveFromEventList+0x80>)
   81652:	6018      	strhi	r0, [r3, #0]
   81654:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81658:	4629      	mov	r1, r5
   8165a:	4b0f      	ldr	r3, [pc, #60]	; (81698 <xTaskRemoveFromEventList+0x84>)
   8165c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81660:	4b0e      	ldr	r3, [pc, #56]	; (8169c <xTaskRemoveFromEventList+0x88>)
   81662:	4798      	blx	r3
   81664:	e003      	b.n	8166e <xTaskRemoveFromEventList+0x5a>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81666:	4629      	mov	r1, r5
   81668:	480d      	ldr	r0, [pc, #52]	; (816a0 <xTaskRemoveFromEventList+0x8c>)
   8166a:	4b0c      	ldr	r3, [pc, #48]	; (8169c <xTaskRemoveFromEventList+0x88>)
   8166c:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8166e:	4b0d      	ldr	r3, [pc, #52]	; (816a4 <xTaskRemoveFromEventList+0x90>)
   81670:	681b      	ldr	r3, [r3, #0]
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
   81672:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   81676:	4298      	cmp	r0, r3
   81678:	bf34      	ite	cc
   8167a:	2000      	movcc	r0, #0
   8167c:	2001      	movcs	r0, #1
   8167e:	bd38      	pop	{r3, r4, r5, pc}
   81680:	00080365 	.word	0x00080365
   81684:	000802dd 	.word	0x000802dd
   81688:	2007aaa4 	.word	0x2007aaa4
   8168c:	0008308d 	.word	0x0008308d
   81690:	00082a75 	.word	0x00082a75
   81694:	2007a9b4 	.word	0x2007a9b4
   81698:	2007a9c0 	.word	0x2007a9c0
   8169c:	00080285 	.word	0x00080285
   816a0:	2007aa44 	.word	0x2007aa44
   816a4:	2007aa64 	.word	0x2007aa64

000816a8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   816a8:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   816aa:	b918      	cbnz	r0, 816b4 <vTaskSetTimeOutState+0xc>
   816ac:	4b05      	ldr	r3, [pc, #20]	; (816c4 <vTaskSetTimeOutState+0x1c>)
   816ae:	4798      	blx	r3
   816b0:	bf00      	nop
   816b2:	e7fd      	b.n	816b0 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   816b4:	4a04      	ldr	r2, [pc, #16]	; (816c8 <vTaskSetTimeOutState+0x20>)
   816b6:	6812      	ldr	r2, [r2, #0]
   816b8:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   816ba:	4a04      	ldr	r2, [pc, #16]	; (816cc <vTaskSetTimeOutState+0x24>)
   816bc:	6812      	ldr	r2, [r2, #0]
   816be:	6042      	str	r2, [r0, #4]
   816c0:	bd08      	pop	{r3, pc}
   816c2:	bf00      	nop
   816c4:	00080365 	.word	0x00080365
   816c8:	2007aaac 	.word	0x2007aaac
   816cc:	2007a9bc 	.word	0x2007a9bc

000816d0 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   816d0:	b538      	push	{r3, r4, r5, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   816d2:	b918      	cbnz	r0, 816dc <xTaskCheckForTimeOut+0xc>
   816d4:	4b19      	ldr	r3, [pc, #100]	; (8173c <xTaskCheckForTimeOut+0x6c>)
   816d6:	4798      	blx	r3
   816d8:	bf00      	nop
   816da:	e7fd      	b.n	816d8 <xTaskCheckForTimeOut+0x8>
   816dc:	460d      	mov	r5, r1
   816de:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   816e0:	b919      	cbnz	r1, 816ea <xTaskCheckForTimeOut+0x1a>
   816e2:	4b16      	ldr	r3, [pc, #88]	; (8173c <xTaskCheckForTimeOut+0x6c>)
   816e4:	4798      	blx	r3
   816e6:	bf00      	nop
   816e8:	e7fd      	b.n	816e6 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   816ea:	4b15      	ldr	r3, [pc, #84]	; (81740 <xTaskCheckForTimeOut+0x70>)
   816ec:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   816ee:	682b      	ldr	r3, [r5, #0]
   816f0:	f1b3 3fff 	cmp.w	r3, #4294967295
   816f4:	d018      	beq.n	81728 <xTaskCheckForTimeOut+0x58>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   816f6:	4a13      	ldr	r2, [pc, #76]	; (81744 <xTaskCheckForTimeOut+0x74>)
   816f8:	6812      	ldr	r2, [r2, #0]
   816fa:	6821      	ldr	r1, [r4, #0]
   816fc:	4291      	cmp	r1, r2
   816fe:	d004      	beq.n	8170a <xTaskCheckForTimeOut+0x3a>
   81700:	4a11      	ldr	r2, [pc, #68]	; (81748 <xTaskCheckForTimeOut+0x78>)
   81702:	6812      	ldr	r2, [r2, #0]
   81704:	6861      	ldr	r1, [r4, #4]
   81706:	4291      	cmp	r1, r2
   81708:	d910      	bls.n	8172c <xTaskCheckForTimeOut+0x5c>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   8170a:	4a0f      	ldr	r2, [pc, #60]	; (81748 <xTaskCheckForTimeOut+0x78>)
   8170c:	6811      	ldr	r1, [r2, #0]
   8170e:	6860      	ldr	r0, [r4, #4]
   81710:	1a09      	subs	r1, r1, r0
   81712:	428b      	cmp	r3, r1
   81714:	d90c      	bls.n	81730 <xTaskCheckForTimeOut+0x60>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81716:	6812      	ldr	r2, [r2, #0]
   81718:	1a12      	subs	r2, r2, r0
   8171a:	1a9b      	subs	r3, r3, r2
   8171c:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   8171e:	4620      	mov	r0, r4
   81720:	4b0a      	ldr	r3, [pc, #40]	; (8174c <xTaskCheckForTimeOut+0x7c>)
   81722:	4798      	blx	r3
			xReturn = pdFALSE;
   81724:	2400      	movs	r4, #0
   81726:	e004      	b.n	81732 <xTaskCheckForTimeOut+0x62>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   81728:	2400      	movs	r4, #0
   8172a:	e002      	b.n	81732 <xTaskCheckForTimeOut+0x62>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   8172c:	2401      	movs	r4, #1
   8172e:	e000      	b.n	81732 <xTaskCheckForTimeOut+0x62>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   81730:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   81732:	4b07      	ldr	r3, [pc, #28]	; (81750 <xTaskCheckForTimeOut+0x80>)
   81734:	4798      	blx	r3

	return xReturn;
}
   81736:	4620      	mov	r0, r4
   81738:	bd38      	pop	{r3, r4, r5, pc}
   8173a:	bf00      	nop
   8173c:	00080365 	.word	0x00080365
   81740:	00080375 	.word	0x00080375
   81744:	2007aaac 	.word	0x2007aaac
   81748:	2007a9bc 	.word	0x2007a9bc
   8174c:	000816a9 	.word	0x000816a9
   81750:	00080395 	.word	0x00080395

00081754 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   81754:	2201      	movs	r2, #1
   81756:	4b01      	ldr	r3, [pc, #4]	; (8175c <vTaskMissedYield+0x8>)
   81758:	601a      	str	r2, [r3, #0]
   8175a:	4770      	bx	lr
   8175c:	2007aa5c 	.word	0x2007aa5c

00081760 <uxTaskGetTaskNumber>:
	unsigned portBASE_TYPE uxTaskGetTaskNumber( xTaskHandle xTask )
	{
	unsigned portBASE_TYPE uxReturn;
	tskTCB *pxTCB;

		if( xTask != NULL )
   81760:	b108      	cbz	r0, 81766 <uxTaskGetTaskNumber+0x6>
		{
			pxTCB = ( tskTCB * ) xTask;
			uxReturn = pxTCB->uxTaskNumber;
   81762:	6c40      	ldr	r0, [r0, #68]	; 0x44
   81764:	4770      	bx	lr
		}
		else
		{
			uxReturn = 0U;
   81766:	2000      	movs	r0, #0
		}

		return uxReturn;
	}
   81768:	4770      	bx	lr
   8176a:	bf00      	nop

0008176c <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   8176c:	4b01      	ldr	r3, [pc, #4]	; (81774 <xTaskGetCurrentTaskHandle+0x8>)
   8176e:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81770:	4770      	bx	lr
   81772:	bf00      	nop
   81774:	2007aa64 	.word	0x2007aa64

00081778 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81778:	4b05      	ldr	r3, [pc, #20]	; (81790 <xTaskGetSchedulerState+0x18>)
   8177a:	681b      	ldr	r3, [r3, #0]
   8177c:	b133      	cbz	r3, 8178c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8177e:	4b05      	ldr	r3, [pc, #20]	; (81794 <xTaskGetSchedulerState+0x1c>)
   81780:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   81782:	2b00      	cmp	r3, #0
   81784:	bf0c      	ite	eq
   81786:	2001      	moveq	r0, #1
   81788:	2002      	movne	r0, #2
   8178a:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   8178c:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   8178e:	4770      	bx	lr
   81790:	2007aa58 	.word	0x2007aa58
   81794:	2007aaa4 	.word	0x2007aaa4

00081798 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81798:	2800      	cmp	r0, #0
   8179a:	d051      	beq.n	81840 <vTaskPriorityInherit+0xa8>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   8179c:	b570      	push	{r4, r5, r6, lr}
   8179e:	4604      	mov	r4, r0

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   817a0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   817a2:	4a28      	ldr	r2, [pc, #160]	; (81844 <vTaskPriorityInherit+0xac>)
   817a4:	6812      	ldr	r2, [r2, #0]
   817a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   817a8:	4293      	cmp	r3, r2
   817aa:	d248      	bcs.n	8183e <vTaskPriorityInherit+0xa6>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   817ac:	4a25      	ldr	r2, [pc, #148]	; (81844 <vTaskPriorityInherit+0xac>)
   817ae:	6812      	ldr	r2, [r2, #0]
   817b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   817b2:	f1c2 0205 	rsb	r2, r2, #5
   817b6:	6182      	str	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   817b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   817bc:	4a22      	ldr	r2, [pc, #136]	; (81848 <vTaskPriorityInherit+0xb0>)
   817be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   817c2:	6942      	ldr	r2, [r0, #20]
   817c4:	429a      	cmp	r2, r3
   817c6:	d11c      	bne.n	81802 <vTaskPriorityInherit+0x6a>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   817c8:	1d05      	adds	r5, r0, #4
   817ca:	4628      	mov	r0, r5
   817cc:	4b1f      	ldr	r3, [pc, #124]	; (8184c <vTaskPriorityInherit+0xb4>)
   817ce:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   817d0:	4b1c      	ldr	r3, [pc, #112]	; (81844 <vTaskPriorityInherit+0xac>)
   817d2:	681b      	ldr	r3, [r3, #0]
   817d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   817d6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   817d8:	4620      	mov	r0, r4
   817da:	4b1d      	ldr	r3, [pc, #116]	; (81850 <vTaskPriorityInherit+0xb8>)
   817dc:	4798      	blx	r3
   817de:	4b1d      	ldr	r3, [pc, #116]	; (81854 <vTaskPriorityInherit+0xbc>)
   817e0:	4798      	blx	r3
   817e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   817e4:	4b1c      	ldr	r3, [pc, #112]	; (81858 <vTaskPriorityInherit+0xc0>)
   817e6:	681b      	ldr	r3, [r3, #0]
   817e8:	4298      	cmp	r0, r3
   817ea:	bf84      	itt	hi
   817ec:	4b1a      	ldrhi	r3, [pc, #104]	; (81858 <vTaskPriorityInherit+0xc0>)
   817ee:	6018      	strhi	r0, [r3, #0]
   817f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   817f4:	4629      	mov	r1, r5
   817f6:	4b14      	ldr	r3, [pc, #80]	; (81848 <vTaskPriorityInherit+0xb0>)
   817f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   817fc:	4b17      	ldr	r3, [pc, #92]	; (8185c <vTaskPriorityInherit+0xc4>)
   817fe:	4798      	blx	r3
   81800:	e003      	b.n	8180a <vTaskPriorityInherit+0x72>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81802:	4b10      	ldr	r3, [pc, #64]	; (81844 <vTaskPriorityInherit+0xac>)
   81804:	681b      	ldr	r3, [r3, #0]
   81806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81808:	62c3      	str	r3, [r0, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
   8180a:	4620      	mov	r0, r4
   8180c:	4d10      	ldr	r5, [pc, #64]	; (81850 <vTaskPriorityInherit+0xb8>)
   8180e:	47a8      	blx	r5
   81810:	4606      	mov	r6, r0
   81812:	4620      	mov	r0, r4
   81814:	47a8      	blx	r5
   81816:	4601      	mov	r1, r0
   81818:	2003      	movs	r0, #3
   8181a:	4b11      	ldr	r3, [pc, #68]	; (81860 <vTaskPriorityInherit+0xc8>)
   8181c:	4798      	blx	r3
   8181e:	4603      	mov	r3, r0
   81820:	4632      	mov	r2, r6
   81822:	2103      	movs	r1, #3
   81824:	208e      	movs	r0, #142	; 0x8e
   81826:	4e0f      	ldr	r6, [pc, #60]	; (81864 <vTaskPriorityInherit+0xcc>)
   81828:	47b0      	blx	r6
   8182a:	4620      	mov	r0, r4
   8182c:	47a8      	blx	r5
   8182e:	4b05      	ldr	r3, [pc, #20]	; (81844 <vTaskPriorityInherit+0xac>)
   81830:	681b      	ldr	r3, [r3, #0]
   81832:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   81836:	4601      	mov	r1, r0
   81838:	2003      	movs	r0, #3
   8183a:	4b0b      	ldr	r3, [pc, #44]	; (81868 <vTaskPriorityInherit+0xd0>)
   8183c:	4798      	blx	r3
   8183e:	bd70      	pop	{r4, r5, r6, pc}
   81840:	4770      	bx	lr
   81842:	bf00      	nop
   81844:	2007aa64 	.word	0x2007aa64
   81848:	2007a9c0 	.word	0x2007a9c0
   8184c:	000802dd 	.word	0x000802dd
   81850:	0008308d 	.word	0x0008308d
   81854:	00082a75 	.word	0x00082a75
   81858:	2007a9b4 	.word	0x2007a9b4
   8185c:	00080285 	.word	0x00080285
   81860:	00082e49 	.word	0x00082e49
   81864:	00082c19 	.word	0x00082c19
   81868:	00082df1 	.word	0x00082df1

0008186c <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   8186c:	2800      	cmp	r0, #0
   8186e:	d03a      	beq.n	818e6 <vTaskPriorityDisinherit+0x7a>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   81870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81872:	4604      	mov	r4, r0
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81874:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   81876:	6c83      	ldr	r3, [r0, #72]	; 0x48
   81878:	429a      	cmp	r2, r3
   8187a:	d033      	beq.n	818e4 <vTaskPriorityDisinherit+0x78>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   8187c:	1d06      	adds	r6, r0, #4
   8187e:	4630      	mov	r0, r6
   81880:	4b19      	ldr	r3, [pc, #100]	; (818e8 <vTaskPriorityDisinherit+0x7c>)
   81882:	4798      	blx	r3
					taskRESET_READY_PRIORITY( pxTCB->uxPriority );
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   81884:	4620      	mov	r0, r4
   81886:	4d19      	ldr	r5, [pc, #100]	; (818ec <vTaskPriorityDisinherit+0x80>)
   81888:	47a8      	blx	r5
   8188a:	4607      	mov	r7, r0
   8188c:	4620      	mov	r0, r4
   8188e:	47a8      	blx	r5
   81890:	4601      	mov	r1, r0
   81892:	2003      	movs	r0, #3
   81894:	4b16      	ldr	r3, [pc, #88]	; (818f0 <vTaskPriorityDisinherit+0x84>)
   81896:	4798      	blx	r3
   81898:	4603      	mov	r3, r0
   8189a:	463a      	mov	r2, r7
   8189c:	2103      	movs	r1, #3
   8189e:	208f      	movs	r0, #143	; 0x8f
   818a0:	4f14      	ldr	r7, [pc, #80]	; (818f4 <vTaskPriorityDisinherit+0x88>)
   818a2:	47b8      	blx	r7
   818a4:	4620      	mov	r0, r4
   818a6:	47a8      	blx	r5
   818a8:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
   818ac:	4601      	mov	r1, r0
   818ae:	2003      	movs	r0, #3
   818b0:	4b11      	ldr	r3, [pc, #68]	; (818f8 <vTaskPriorityDisinherit+0x8c>)
   818b2:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   818b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   818b6:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   818b8:	f1c3 0305 	rsb	r3, r3, #5
   818bc:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   818be:	4620      	mov	r0, r4
   818c0:	47a8      	blx	r5
   818c2:	4b0e      	ldr	r3, [pc, #56]	; (818fc <vTaskPriorityDisinherit+0x90>)
   818c4:	4798      	blx	r3
   818c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   818c8:	4b0d      	ldr	r3, [pc, #52]	; (81900 <vTaskPriorityDisinherit+0x94>)
   818ca:	681b      	ldr	r3, [r3, #0]
   818cc:	4298      	cmp	r0, r3
   818ce:	bf84      	itt	hi
   818d0:	4b0b      	ldrhi	r3, [pc, #44]	; (81900 <vTaskPriorityDisinherit+0x94>)
   818d2:	6018      	strhi	r0, [r3, #0]
   818d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   818d8:	4631      	mov	r1, r6
   818da:	4b0a      	ldr	r3, [pc, #40]	; (81904 <vTaskPriorityDisinherit+0x98>)
   818dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   818e0:	4b09      	ldr	r3, [pc, #36]	; (81908 <vTaskPriorityDisinherit+0x9c>)
   818e2:	4798      	blx	r3
   818e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   818e6:	4770      	bx	lr
   818e8:	000802dd 	.word	0x000802dd
   818ec:	0008308d 	.word	0x0008308d
   818f0:	00082e49 	.word	0x00082e49
   818f4:	00082c19 	.word	0x00082c19
   818f8:	00082df1 	.word	0x00082df1
   818fc:	00082a75 	.word	0x00082a75
   81900:	2007a9b4 	.word	0x2007a9b4
   81904:	2007a9c0 	.word	0x2007a9c0
   81908:	00080285 	.word	0x00080285

0008190c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   8190c:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   8190e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81910:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   81912:	4291      	cmp	r1, r2
   81914:	d80a      	bhi.n	8192c <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   81916:	1ad2      	subs	r2, r2, r3
   81918:	6983      	ldr	r3, [r0, #24]
   8191a:	429a      	cmp	r2, r3
   8191c:	d211      	bcs.n	81942 <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   8191e:	1d01      	adds	r1, r0, #4
   81920:	4b0a      	ldr	r3, [pc, #40]	; (8194c <prvInsertTimerInActiveList+0x40>)
   81922:	6818      	ldr	r0, [r3, #0]
   81924:	4b0a      	ldr	r3, [pc, #40]	; (81950 <prvInsertTimerInActiveList+0x44>)
   81926:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81928:	2000      	movs	r0, #0
   8192a:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   8192c:	429a      	cmp	r2, r3
   8192e:	d201      	bcs.n	81934 <prvInsertTimerInActiveList+0x28>
   81930:	4299      	cmp	r1, r3
   81932:	d208      	bcs.n	81946 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81934:	1d01      	adds	r1, r0, #4
   81936:	4b07      	ldr	r3, [pc, #28]	; (81954 <prvInsertTimerInActiveList+0x48>)
   81938:	6818      	ldr	r0, [r3, #0]
   8193a:	4b05      	ldr	r3, [pc, #20]	; (81950 <prvInsertTimerInActiveList+0x44>)
   8193c:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   8193e:	2000      	movs	r0, #0
   81940:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81942:	2001      	movs	r0, #1
   81944:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   81946:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   81948:	bd08      	pop	{r3, pc}
   8194a:	bf00      	nop
   8194c:	2007aae8 	.word	0x2007aae8
   81950:	000802a1 	.word	0x000802a1
   81954:	2007aab4 	.word	0x2007aab4

00081958 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81958:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   8195a:	4b0d      	ldr	r3, [pc, #52]	; (81990 <prvCheckForValidListAndQueue+0x38>)
   8195c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   8195e:	4b0d      	ldr	r3, [pc, #52]	; (81994 <prvCheckForValidListAndQueue+0x3c>)
   81960:	681b      	ldr	r3, [r3, #0]
   81962:	b98b      	cbnz	r3, 81988 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   81964:	4d0c      	ldr	r5, [pc, #48]	; (81998 <prvCheckForValidListAndQueue+0x40>)
   81966:	4628      	mov	r0, r5
   81968:	4e0c      	ldr	r6, [pc, #48]	; (8199c <prvCheckForValidListAndQueue+0x44>)
   8196a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   8196c:	4c0c      	ldr	r4, [pc, #48]	; (819a0 <prvCheckForValidListAndQueue+0x48>)
   8196e:	4620      	mov	r0, r4
   81970:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81972:	4b0c      	ldr	r3, [pc, #48]	; (819a4 <prvCheckForValidListAndQueue+0x4c>)
   81974:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81976:	4b0c      	ldr	r3, [pc, #48]	; (819a8 <prvCheckForValidListAndQueue+0x50>)
   81978:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   8197a:	2200      	movs	r2, #0
   8197c:	210c      	movs	r1, #12
   8197e:	2005      	movs	r0, #5
   81980:	4b0a      	ldr	r3, [pc, #40]	; (819ac <prvCheckForValidListAndQueue+0x54>)
   81982:	4798      	blx	r3
   81984:	4b03      	ldr	r3, [pc, #12]	; (81994 <prvCheckForValidListAndQueue+0x3c>)
   81986:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   81988:	4b09      	ldr	r3, [pc, #36]	; (819b0 <prvCheckForValidListAndQueue+0x58>)
   8198a:	4798      	blx	r3
   8198c:	bd70      	pop	{r4, r5, r6, pc}
   8198e:	bf00      	nop
   81990:	00080375 	.word	0x00080375
   81994:	2007aae4 	.word	0x2007aae4
   81998:	2007aab8 	.word	0x2007aab8
   8199c:	00080265 	.word	0x00080265
   819a0:	2007aacc 	.word	0x2007aacc
   819a4:	2007aab4 	.word	0x2007aab4
   819a8:	2007aae8 	.word	0x2007aae8
   819ac:	00080761 	.word	0x00080761
   819b0:	00080395 	.word	0x00080395

000819b4 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   819b4:	b510      	push	{r4, lr}
   819b6:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   819b8:	4b0c      	ldr	r3, [pc, #48]	; (819ec <xTimerCreateTimerTask+0x38>)
   819ba:	4798      	blx	r3

	if( xTimerQueue != NULL )
   819bc:	4b0c      	ldr	r3, [pc, #48]	; (819f0 <xTimerCreateTimerTask+0x3c>)
   819be:	681b      	ldr	r3, [r3, #0]
   819c0:	b16b      	cbz	r3, 819de <xTimerCreateTimerTask+0x2a>
	{
		#if ( INCLUDE_xTimerGetTimerDaemonTaskHandle == 1 )
		{
			/* Create the timer task, storing its handle in xTimerTaskHandle so
			it can be returned by the xTimerGetTimerDaemonTaskHandle() function. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
   819c2:	2300      	movs	r3, #0
   819c4:	9303      	str	r3, [sp, #12]
   819c6:	9302      	str	r3, [sp, #8]
   819c8:	4a0a      	ldr	r2, [pc, #40]	; (819f4 <xTimerCreateTimerTask+0x40>)
   819ca:	9201      	str	r2, [sp, #4]
   819cc:	2204      	movs	r2, #4
   819ce:	9200      	str	r2, [sp, #0]
   819d0:	f44f 7282 	mov.w	r2, #260	; 0x104
   819d4:	4908      	ldr	r1, [pc, #32]	; (819f8 <xTimerCreateTimerTask+0x44>)
   819d6:	4809      	ldr	r0, [pc, #36]	; (819fc <xTimerCreateTimerTask+0x48>)
   819d8:	4c09      	ldr	r4, [pc, #36]	; (81a00 <xTimerCreateTimerTask+0x4c>)
   819da:	47a0      	blx	r4
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
		}
		#endif
	}

	configASSERT( xReturn );
   819dc:	b918      	cbnz	r0, 819e6 <xTimerCreateTimerTask+0x32>
   819de:	4b09      	ldr	r3, [pc, #36]	; (81a04 <xTimerCreateTimerTask+0x50>)
   819e0:	4798      	blx	r3
   819e2:	bf00      	nop
   819e4:	e7fd      	b.n	819e2 <xTimerCreateTimerTask+0x2e>
	return xReturn;
}
   819e6:	b004      	add	sp, #16
   819e8:	bd10      	pop	{r4, pc}
   819ea:	bf00      	nop
   819ec:	00081959 	.word	0x00081959
   819f0:	2007aae4 	.word	0x2007aae4
   819f4:	2007aaec 	.word	0x2007aaec
   819f8:	00085254 	.word	0x00085254
   819fc:	00081b11 	.word	0x00081b11
   81a00:	00080e91 	.word	0x00080e91
   81a04:	00080365 	.word	0x00080365

00081a08 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   81a08:	b530      	push	{r4, r5, lr}
   81a0a:	b085      	sub	sp, #20
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   81a0c:	4c0f      	ldr	r4, [pc, #60]	; (81a4c <xTimerGenericCommand+0x44>)
   81a0e:	6825      	ldr	r5, [r4, #0]
   81a10:	b1cd      	cbz	r5, 81a46 <xTimerGenericCommand+0x3e>
   81a12:	461c      	mov	r4, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   81a14:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81a16:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81a18:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   81a1a:	b96c      	cbnz	r4, 81a38 <xTimerGenericCommand+0x30>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81a1c:	4b0c      	ldr	r3, [pc, #48]	; (81a50 <xTimerGenericCommand+0x48>)
   81a1e:	4798      	blx	r3
   81a20:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81a22:	f04f 0300 	mov.w	r3, #0
   81a26:	bf0c      	ite	eq
   81a28:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81a2a:	461a      	movne	r2, r3
   81a2c:	a901      	add	r1, sp, #4
   81a2e:	4807      	ldr	r0, [pc, #28]	; (81a4c <xTimerGenericCommand+0x44>)
   81a30:	6800      	ldr	r0, [r0, #0]
   81a32:	4c08      	ldr	r4, [pc, #32]	; (81a54 <xTimerGenericCommand+0x4c>)
   81a34:	47a0      	blx	r4
   81a36:	e007      	b.n	81a48 <xTimerGenericCommand+0x40>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81a38:	2300      	movs	r3, #0
   81a3a:	4622      	mov	r2, r4
   81a3c:	a901      	add	r1, sp, #4
   81a3e:	4628      	mov	r0, r5
   81a40:	4c05      	ldr	r4, [pc, #20]	; (81a58 <xTimerGenericCommand+0x50>)
   81a42:	47a0      	blx	r4
   81a44:	e000      	b.n	81a48 <xTimerGenericCommand+0x40>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   81a46:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   81a48:	b005      	add	sp, #20
   81a4a:	bd30      	pop	{r4, r5, pc}
   81a4c:	2007aae4 	.word	0x2007aae4
   81a50:	00081779 	.word	0x00081779
   81a54:	00080831 	.word	0x00080831
   81a58:	00080a35 	.word	0x00080a35

00081a5c <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81a60:	b082      	sub	sp, #8
   81a62:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   81a64:	4b22      	ldr	r3, [pc, #136]	; (81af0 <prvSampleTimeNow+0x94>)
   81a66:	4798      	blx	r3
   81a68:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   81a6a:	4b22      	ldr	r3, [pc, #136]	; (81af4 <prvSampleTimeNow+0x98>)
   81a6c:	681b      	ldr	r3, [r3, #0]
   81a6e:	4298      	cmp	r0, r3
   81a70:	d234      	bcs.n	81adc <prvSampleTimeNow+0x80>
   81a72:	e024      	b.n	81abe <prvSampleTimeNow+0x62>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81a74:	68da      	ldr	r2, [r3, #12]
   81a76:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81a7a:	68db      	ldr	r3, [r3, #12]
   81a7c:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81a7e:	1d25      	adds	r5, r4, #4
   81a80:	4628      	mov	r0, r5
   81a82:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81a84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81a86:	4620      	mov	r0, r4
   81a88:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81a8a:	69e3      	ldr	r3, [r4, #28]
   81a8c:	2b01      	cmp	r3, #1
   81a8e:	d118      	bne.n	81ac2 <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81a90:	69a3      	ldr	r3, [r4, #24]
   81a92:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   81a94:	459a      	cmp	sl, r3
   81a96:	d206      	bcs.n	81aa6 <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81a98:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81a9a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81a9c:	4629      	mov	r1, r5
   81a9e:	6830      	ldr	r0, [r6, #0]
   81aa0:	4b15      	ldr	r3, [pc, #84]	; (81af8 <prvSampleTimeNow+0x9c>)
   81aa2:	4798      	blx	r3
   81aa4:	e00d      	b.n	81ac2 <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81aa6:	2100      	movs	r1, #0
   81aa8:	9100      	str	r1, [sp, #0]
   81aaa:	460b      	mov	r3, r1
   81aac:	4652      	mov	r2, sl
   81aae:	4620      	mov	r0, r4
   81ab0:	4c12      	ldr	r4, [pc, #72]	; (81afc <prvSampleTimeNow+0xa0>)
   81ab2:	47a0      	blx	r4
				configASSERT( xResult );
   81ab4:	b928      	cbnz	r0, 81ac2 <prvSampleTimeNow+0x66>
   81ab6:	4b12      	ldr	r3, [pc, #72]	; (81b00 <prvSampleTimeNow+0xa4>)
   81ab8:	4798      	blx	r3
   81aba:	bf00      	nop
   81abc:	e7fd      	b.n	81aba <prvSampleTimeNow+0x5e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81abe:	4e11      	ldr	r6, [pc, #68]	; (81b04 <prvSampleTimeNow+0xa8>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81ac0:	4f11      	ldr	r7, [pc, #68]	; (81b08 <prvSampleTimeNow+0xac>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81ac2:	6833      	ldr	r3, [r6, #0]
   81ac4:	681a      	ldr	r2, [r3, #0]
   81ac6:	2a00      	cmp	r2, #0
   81ac8:	d1d4      	bne.n	81a74 <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   81aca:	4a10      	ldr	r2, [pc, #64]	; (81b0c <prvSampleTimeNow+0xb0>)
   81acc:	6810      	ldr	r0, [r2, #0]
   81ace:	490d      	ldr	r1, [pc, #52]	; (81b04 <prvSampleTimeNow+0xa8>)
   81ad0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   81ad2:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   81ad4:	2301      	movs	r3, #1
   81ad6:	f8c9 3000 	str.w	r3, [r9]
   81ada:	e002      	b.n	81ae2 <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   81adc:	2300      	movs	r3, #0
   81ade:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   81ae2:	4b04      	ldr	r3, [pc, #16]	; (81af4 <prvSampleTimeNow+0x98>)
   81ae4:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
   81ae8:	4640      	mov	r0, r8
   81aea:	b002      	add	sp, #8
   81aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81af0:	00081175 	.word	0x00081175
   81af4:	2007aae0 	.word	0x2007aae0
   81af8:	000802a1 	.word	0x000802a1
   81afc:	00081a09 	.word	0x00081a09
   81b00:	00080365 	.word	0x00080365
   81b04:	2007aab4 	.word	0x2007aab4
   81b08:	000802dd 	.word	0x000802dd
   81b0c:	2007aae8 	.word	0x2007aae8

00081b10 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   81b10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81b14:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81b16:	4d4d      	ldr	r5, [pc, #308]	; (81c4c <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81b18:	f8df 8160 	ldr.w	r8, [pc, #352]	; 81c7c <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81b1c:	4b4c      	ldr	r3, [pc, #304]	; (81c50 <prvTimerTask+0x140>)
   81b1e:	681b      	ldr	r3, [r3, #0]
   81b20:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81b22:	2a00      	cmp	r2, #0
   81b24:	f000 8088 	beq.w	81c38 <prvTimerTask+0x128>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81b28:	68db      	ldr	r3, [r3, #12]
   81b2a:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81b2c:	4b49      	ldr	r3, [pc, #292]	; (81c54 <prvTimerTask+0x144>)
   81b2e:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81b30:	a803      	add	r0, sp, #12
   81b32:	4b49      	ldr	r3, [pc, #292]	; (81c58 <prvTimerTask+0x148>)
   81b34:	4798      	blx	r3
   81b36:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81b38:	9b03      	ldr	r3, [sp, #12]
   81b3a:	2b00      	cmp	r3, #0
   81b3c:	d130      	bne.n	81ba0 <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81b3e:	4286      	cmp	r6, r0
   81b40:	d824      	bhi.n	81b8c <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
   81b42:	4b46      	ldr	r3, [pc, #280]	; (81c5c <prvTimerTask+0x14c>)
   81b44:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81b46:	4b42      	ldr	r3, [pc, #264]	; (81c50 <prvTimerTask+0x140>)
   81b48:	681b      	ldr	r3, [r3, #0]
   81b4a:	68db      	ldr	r3, [r3, #12]
   81b4c:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81b4e:	1d20      	adds	r0, r4, #4
   81b50:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81b52:	69e3      	ldr	r3, [r4, #28]
   81b54:	2b01      	cmp	r3, #1
   81b56:	d114      	bne.n	81b82 <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   81b58:	69a1      	ldr	r1, [r4, #24]
   81b5a:	4633      	mov	r3, r6
   81b5c:	463a      	mov	r2, r7
   81b5e:	4431      	add	r1, r6
   81b60:	4620      	mov	r0, r4
   81b62:	4f3f      	ldr	r7, [pc, #252]	; (81c60 <prvTimerTask+0x150>)
   81b64:	47b8      	blx	r7
   81b66:	2801      	cmp	r0, #1
   81b68:	d10b      	bne.n	81b82 <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81b6a:	2100      	movs	r1, #0
   81b6c:	9100      	str	r1, [sp, #0]
   81b6e:	460b      	mov	r3, r1
   81b70:	4632      	mov	r2, r6
   81b72:	4620      	mov	r0, r4
   81b74:	4e3b      	ldr	r6, [pc, #236]	; (81c64 <prvTimerTask+0x154>)
   81b76:	47b0      	blx	r6
			configASSERT( xResult );
   81b78:	b918      	cbnz	r0, 81b82 <prvTimerTask+0x72>
   81b7a:	4b3b      	ldr	r3, [pc, #236]	; (81c68 <prvTimerTask+0x158>)
   81b7c:	4798      	blx	r3
   81b7e:	bf00      	nop
   81b80:	e7fd      	b.n	81b7e <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81b84:	4620      	mov	r0, r4
   81b86:	4798      	blx	r3
   81b88:	e00c      	b.n	81ba4 <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   81b8a:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81b8c:	1bf1      	subs	r1, r6, r7
   81b8e:	6828      	ldr	r0, [r5, #0]
   81b90:	4b36      	ldr	r3, [pc, #216]	; (81c6c <prvTimerTask+0x15c>)
   81b92:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   81b94:	4b31      	ldr	r3, [pc, #196]	; (81c5c <prvTimerTask+0x14c>)
   81b96:	4798      	blx	r3
   81b98:	b920      	cbnz	r0, 81ba4 <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   81b9a:	4b35      	ldr	r3, [pc, #212]	; (81c70 <prvTimerTask+0x160>)
   81b9c:	4798      	blx	r3
   81b9e:	e001      	b.n	81ba4 <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   81ba0:	4b2e      	ldr	r3, [pc, #184]	; (81c5c <prvTimerTask+0x14c>)
   81ba2:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81ba4:	a802      	add	r0, sp, #8
   81ba6:	4b2c      	ldr	r3, [pc, #176]	; (81c58 <prvTimerTask+0x148>)
   81ba8:	4798      	blx	r3
   81baa:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81bac:	4e31      	ldr	r6, [pc, #196]	; (81c74 <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81bae:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 81c60 <prvTimerTask+0x150>
   81bb2:	e039      	b.n	81c28 <prvTimerTask+0x118>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   81bb4:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   81bb6:	b11c      	cbz	r4, 81bc0 <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   81bb8:	6963      	ldr	r3, [r4, #20]
   81bba:	b10b      	cbz	r3, 81bc0 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   81bbc:	1d20      	adds	r0, r4, #4
   81bbe:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   81bc0:	9b03      	ldr	r3, [sp, #12]
   81bc2:	2b02      	cmp	r3, #2
   81bc4:	d020      	beq.n	81c08 <prvTimerTask+0xf8>
   81bc6:	2b03      	cmp	r3, #3
   81bc8:	d02b      	beq.n	81c22 <prvTimerTask+0x112>
   81bca:	2b00      	cmp	r3, #0
   81bcc:	d12c      	bne.n	81c28 <prvTimerTask+0x118>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   81bce:	9904      	ldr	r1, [sp, #16]
   81bd0:	69a0      	ldr	r0, [r4, #24]
   81bd2:	460b      	mov	r3, r1
   81bd4:	463a      	mov	r2, r7
   81bd6:	4401      	add	r1, r0
   81bd8:	4620      	mov	r0, r4
   81bda:	47c8      	blx	r9
   81bdc:	2801      	cmp	r0, #1
   81bde:	d123      	bne.n	81c28 <prvTimerTask+0x118>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81be2:	4620      	mov	r0, r4
   81be4:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81be6:	69e3      	ldr	r3, [r4, #28]
   81be8:	2b01      	cmp	r3, #1
   81bea:	d11d      	bne.n	81c28 <prvTimerTask+0x118>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81bec:	69a2      	ldr	r2, [r4, #24]
   81bee:	2100      	movs	r1, #0
   81bf0:	9100      	str	r1, [sp, #0]
   81bf2:	460b      	mov	r3, r1
   81bf4:	9804      	ldr	r0, [sp, #16]
   81bf6:	4402      	add	r2, r0
   81bf8:	4620      	mov	r0, r4
   81bfa:	4c1a      	ldr	r4, [pc, #104]	; (81c64 <prvTimerTask+0x154>)
   81bfc:	47a0      	blx	r4
						configASSERT( xResult );
   81bfe:	b998      	cbnz	r0, 81c28 <prvTimerTask+0x118>
   81c00:	4b19      	ldr	r3, [pc, #100]	; (81c68 <prvTimerTask+0x158>)
   81c02:	4798      	blx	r3
   81c04:	bf00      	nop
   81c06:	e7fd      	b.n	81c04 <prvTimerTask+0xf4>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81c08:	9904      	ldr	r1, [sp, #16]
   81c0a:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81c0c:	b919      	cbnz	r1, 81c16 <prvTimerTask+0x106>
   81c0e:	4b16      	ldr	r3, [pc, #88]	; (81c68 <prvTimerTask+0x158>)
   81c10:	4798      	blx	r3
   81c12:	bf00      	nop
   81c14:	e7fd      	b.n	81c12 <prvTimerTask+0x102>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81c16:	463b      	mov	r3, r7
   81c18:	463a      	mov	r2, r7
   81c1a:	4439      	add	r1, r7
   81c1c:	4620      	mov	r0, r4
   81c1e:	47c8      	blx	r9
   81c20:	e002      	b.n	81c28 <prvTimerTask+0x118>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   81c22:	4620      	mov	r0, r4
   81c24:	4b14      	ldr	r3, [pc, #80]	; (81c78 <prvTimerTask+0x168>)
   81c26:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81c28:	2300      	movs	r3, #0
   81c2a:	461a      	mov	r2, r3
   81c2c:	a903      	add	r1, sp, #12
   81c2e:	6828      	ldr	r0, [r5, #0]
   81c30:	47b0      	blx	r6
   81c32:	2800      	cmp	r0, #0
   81c34:	d1be      	bne.n	81bb4 <prvTimerTask+0xa4>
   81c36:	e771      	b.n	81b1c <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81c38:	4b06      	ldr	r3, [pc, #24]	; (81c54 <prvTimerTask+0x144>)
   81c3a:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81c3c:	a803      	add	r0, sp, #12
   81c3e:	4b06      	ldr	r3, [pc, #24]	; (81c58 <prvTimerTask+0x148>)
   81c40:	4798      	blx	r3
   81c42:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81c44:	9b03      	ldr	r3, [sp, #12]
   81c46:	2b00      	cmp	r3, #0
   81c48:	d09f      	beq.n	81b8a <prvTimerTask+0x7a>
   81c4a:	e7a9      	b.n	81ba0 <prvTimerTask+0x90>
   81c4c:	2007aae4 	.word	0x2007aae4
   81c50:	2007aab4 	.word	0x2007aab4
   81c54:	00081165 	.word	0x00081165
   81c58:	00081a5d 	.word	0x00081a5d
   81c5c:	000812f1 	.word	0x000812f1
   81c60:	0008190d 	.word	0x0008190d
   81c64:	00081a09 	.word	0x00081a09
   81c68:	00080365 	.word	0x00080365
   81c6c:	00080ded 	.word	0x00080ded
   81c70:	00080355 	.word	0x00080355
   81c74:	00080b45 	.word	0x00080b45
   81c78:	00080591 	.word	0x00080591
   81c7c:	000802dd 	.word	0x000802dd

00081c80 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81c80:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81c82:	480e      	ldr	r0, [pc, #56]	; (81cbc <sysclk_init+0x3c>)
   81c84:	4b0e      	ldr	r3, [pc, #56]	; (81cc0 <sysclk_init+0x40>)
   81c86:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81c88:	213e      	movs	r1, #62	; 0x3e
   81c8a:	2000      	movs	r0, #0
   81c8c:	4b0d      	ldr	r3, [pc, #52]	; (81cc4 <sysclk_init+0x44>)
   81c8e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81c90:	4c0d      	ldr	r4, [pc, #52]	; (81cc8 <sysclk_init+0x48>)
   81c92:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81c94:	2800      	cmp	r0, #0
   81c96:	d0fc      	beq.n	81c92 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81c98:	4b0c      	ldr	r3, [pc, #48]	; (81ccc <sysclk_init+0x4c>)
   81c9a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81c9c:	4a0c      	ldr	r2, [pc, #48]	; (81cd0 <sysclk_init+0x50>)
   81c9e:	4b0d      	ldr	r3, [pc, #52]	; (81cd4 <sysclk_init+0x54>)
   81ca0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81ca2:	4c0d      	ldr	r4, [pc, #52]	; (81cd8 <sysclk_init+0x58>)
   81ca4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81ca6:	2800      	cmp	r0, #0
   81ca8:	d0fc      	beq.n	81ca4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81caa:	2010      	movs	r0, #16
   81cac:	4b0b      	ldr	r3, [pc, #44]	; (81cdc <sysclk_init+0x5c>)
   81cae:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81cb0:	4b0b      	ldr	r3, [pc, #44]	; (81ce0 <sysclk_init+0x60>)
   81cb2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81cb4:	4801      	ldr	r0, [pc, #4]	; (81cbc <sysclk_init+0x3c>)
   81cb6:	4b02      	ldr	r3, [pc, #8]	; (81cc0 <sysclk_init+0x40>)
   81cb8:	4798      	blx	r3
   81cba:	bd10      	pop	{r4, pc}
   81cbc:	0501bd00 	.word	0x0501bd00
   81cc0:	200700a5 	.word	0x200700a5
   81cc4:	00082085 	.word	0x00082085
   81cc8:	000820d9 	.word	0x000820d9
   81ccc:	000820e9 	.word	0x000820e9
   81cd0:	200d3f01 	.word	0x200d3f01
   81cd4:	400e0600 	.word	0x400e0600
   81cd8:	000820f9 	.word	0x000820f9
   81cdc:	0008201d 	.word	0x0008201d
   81ce0:	0008220d 	.word	0x0008220d

00081ce4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81ce4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81ce6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81cea:	4b16      	ldr	r3, [pc, #88]	; (81d44 <board_init+0x60>)
   81cec:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81cee:	200b      	movs	r0, #11
   81cf0:	4c15      	ldr	r4, [pc, #84]	; (81d48 <board_init+0x64>)
   81cf2:	47a0      	blx	r4
   81cf4:	200c      	movs	r0, #12
   81cf6:	47a0      	blx	r4
   81cf8:	200d      	movs	r0, #13
   81cfa:	47a0      	blx	r4
   81cfc:	200e      	movs	r0, #14
   81cfe:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81d00:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81d04:	203b      	movs	r0, #59	; 0x3b
   81d06:	4c11      	ldr	r4, [pc, #68]	; (81d4c <board_init+0x68>)
   81d08:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81d0a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81d0e:	2055      	movs	r0, #85	; 0x55
   81d10:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81d12:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81d16:	2056      	movs	r0, #86	; 0x56
   81d18:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81d1a:	490d      	ldr	r1, [pc, #52]	; (81d50 <board_init+0x6c>)
   81d1c:	2068      	movs	r0, #104	; 0x68
   81d1e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81d20:	490c      	ldr	r1, [pc, #48]	; (81d54 <board_init+0x70>)
   81d22:	205c      	movs	r0, #92	; 0x5c
   81d24:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81d26:	4a0c      	ldr	r2, [pc, #48]	; (81d58 <board_init+0x74>)
   81d28:	f44f 7140 	mov.w	r1, #768	; 0x300
   81d2c:	480b      	ldr	r0, [pc, #44]	; (81d5c <board_init+0x78>)
   81d2e:	4b0c      	ldr	r3, [pc, #48]	; (81d60 <board_init+0x7c>)
   81d30:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81d32:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81d36:	202b      	movs	r0, #43	; 0x2b
   81d38:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81d3a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81d3e:	202a      	movs	r0, #42	; 0x2a
   81d40:	47a0      	blx	r4
   81d42:	bd10      	pop	{r4, pc}
   81d44:	400e1a50 	.word	0x400e1a50
   81d48:	00082109 	.word	0x00082109
   81d4c:	00081e09 	.word	0x00081e09
   81d50:	28000079 	.word	0x28000079
   81d54:	28000001 	.word	0x28000001
   81d58:	08000001 	.word	0x08000001
   81d5c:	400e0e00 	.word	0x400e0e00
   81d60:	00081edd 	.word	0x00081edd

00081d64 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81d64:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81d66:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81d6a:	d016      	beq.n	81d9a <pio_set_peripheral+0x36>
   81d6c:	d804      	bhi.n	81d78 <pio_set_peripheral+0x14>
   81d6e:	b1c1      	cbz	r1, 81da2 <pio_set_peripheral+0x3e>
   81d70:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81d74:	d00a      	beq.n	81d8c <pio_set_peripheral+0x28>
   81d76:	e013      	b.n	81da0 <pio_set_peripheral+0x3c>
   81d78:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81d7c:	d011      	beq.n	81da2 <pio_set_peripheral+0x3e>
   81d7e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81d82:	d00e      	beq.n	81da2 <pio_set_peripheral+0x3e>
   81d84:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81d88:	d10a      	bne.n	81da0 <pio_set_peripheral+0x3c>
   81d8a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81d8c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81d8e:	6f03      	ldr	r3, [r0, #112]	; 0x70
   81d90:	400b      	ands	r3, r1
   81d92:	ea23 0302 	bic.w	r3, r3, r2
   81d96:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81d98:	e002      	b.n	81da0 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81d9a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81d9c:	4313      	orrs	r3, r2
   81d9e:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81da0:	6042      	str	r2, [r0, #4]
   81da2:	4770      	bx	lr

00081da4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81da4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81da6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81daa:	bf14      	ite	ne
   81dac:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81dae:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81db0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81db4:	bf14      	ite	ne
   81db6:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81db8:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   81dba:	f012 0f02 	tst.w	r2, #2
   81dbe:	d002      	beq.n	81dc6 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   81dc0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81dc4:	e004      	b.n	81dd0 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   81dc6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81dca:	bf18      	it	ne
   81dcc:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81dd0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81dd2:	6001      	str	r1, [r0, #0]
   81dd4:	4770      	bx	lr
   81dd6:	bf00      	nop

00081dd8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81dd8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81dda:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81ddc:	9c01      	ldr	r4, [sp, #4]
   81dde:	b10c      	cbz	r4, 81de4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   81de0:	6641      	str	r1, [r0, #100]	; 0x64
   81de2:	e000      	b.n	81de6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81de4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   81de6:	b10b      	cbz	r3, 81dec <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   81de8:	6501      	str	r1, [r0, #80]	; 0x50
   81dea:	e000      	b.n	81dee <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81dec:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81dee:	b10a      	cbz	r2, 81df4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   81df0:	6301      	str	r1, [r0, #48]	; 0x30
   81df2:	e000      	b.n	81df6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81df4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81df6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81df8:	6001      	str	r1, [r0, #0]
}
   81dfa:	bc10      	pop	{r4}
   81dfc:	4770      	bx	lr
   81dfe:	bf00      	nop

00081e00 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81e00:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81e02:	4770      	bx	lr

00081e04 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81e04:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81e06:	4770      	bx	lr

00081e08 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81e08:	b570      	push	{r4, r5, r6, lr}
   81e0a:	b082      	sub	sp, #8
   81e0c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81e0e:	0943      	lsrs	r3, r0, #5
   81e10:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81e14:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81e18:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81e1a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   81e1e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81e22:	d030      	beq.n	81e86 <pio_configure_pin+0x7e>
   81e24:	d806      	bhi.n	81e34 <pio_configure_pin+0x2c>
   81e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81e2a:	d00a      	beq.n	81e42 <pio_configure_pin+0x3a>
   81e2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81e30:	d018      	beq.n	81e64 <pio_configure_pin+0x5c>
   81e32:	e049      	b.n	81ec8 <pio_configure_pin+0xc0>
   81e34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81e38:	d030      	beq.n	81e9c <pio_configure_pin+0x94>
   81e3a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81e3e:	d02d      	beq.n	81e9c <pio_configure_pin+0x94>
   81e40:	e042      	b.n	81ec8 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81e42:	f000 001f 	and.w	r0, r0, #31
   81e46:	2601      	movs	r6, #1
   81e48:	4086      	lsls	r6, r0
   81e4a:	4632      	mov	r2, r6
   81e4c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81e50:	4620      	mov	r0, r4
   81e52:	4b1f      	ldr	r3, [pc, #124]	; (81ed0 <pio_configure_pin+0xc8>)
   81e54:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81e56:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81e5a:	bf14      	ite	ne
   81e5c:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81e5e:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81e60:	2001      	movs	r0, #1
   81e62:	e032      	b.n	81eca <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81e64:	f000 001f 	and.w	r0, r0, #31
   81e68:	2601      	movs	r6, #1
   81e6a:	4086      	lsls	r6, r0
   81e6c:	4632      	mov	r2, r6
   81e6e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81e72:	4620      	mov	r0, r4
   81e74:	4b16      	ldr	r3, [pc, #88]	; (81ed0 <pio_configure_pin+0xc8>)
   81e76:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81e78:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81e7c:	bf14      	ite	ne
   81e7e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81e80:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81e82:	2001      	movs	r0, #1
   81e84:	e021      	b.n	81eca <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81e86:	f000 011f 	and.w	r1, r0, #31
   81e8a:	2601      	movs	r6, #1
   81e8c:	462a      	mov	r2, r5
   81e8e:	fa06 f101 	lsl.w	r1, r6, r1
   81e92:	4620      	mov	r0, r4
   81e94:	4b0f      	ldr	r3, [pc, #60]	; (81ed4 <pio_configure_pin+0xcc>)
   81e96:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81e98:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   81e9a:	e016      	b.n	81eca <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81e9c:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
   81ea0:	f000 011f 	and.w	r1, r0, #31
   81ea4:	2601      	movs	r6, #1
   81ea6:	ea05 0306 	and.w	r3, r5, r6
   81eaa:	9300      	str	r3, [sp, #0]
   81eac:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81eb0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81eb4:	bf14      	ite	ne
   81eb6:	2200      	movne	r2, #0
   81eb8:	2201      	moveq	r2, #1
   81eba:	fa06 f101 	lsl.w	r1, r6, r1
   81ebe:	4620      	mov	r0, r4
   81ec0:	4c05      	ldr	r4, [pc, #20]	; (81ed8 <pio_configure_pin+0xd0>)
   81ec2:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   81ec4:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81ec6:	e000      	b.n	81eca <pio_configure_pin+0xc2>

	default:
		return 0;
   81ec8:	2000      	movs	r0, #0
	}

	return 1;
}
   81eca:	b002      	add	sp, #8
   81ecc:	bd70      	pop	{r4, r5, r6, pc}
   81ece:	bf00      	nop
   81ed0:	00081d65 	.word	0x00081d65
   81ed4:	00081da5 	.word	0x00081da5
   81ed8:	00081dd9 	.word	0x00081dd9

00081edc <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81edc:	b570      	push	{r4, r5, r6, lr}
   81ede:	b082      	sub	sp, #8
   81ee0:	4605      	mov	r5, r0
   81ee2:	460e      	mov	r6, r1
   81ee4:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81ee6:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   81eea:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81eee:	d026      	beq.n	81f3e <pio_configure_pin_group+0x62>
   81ef0:	d806      	bhi.n	81f00 <pio_configure_pin_group+0x24>
   81ef2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81ef6:	d00a      	beq.n	81f0e <pio_configure_pin_group+0x32>
   81ef8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81efc:	d013      	beq.n	81f26 <pio_configure_pin_group+0x4a>
   81efe:	e034      	b.n	81f6a <pio_configure_pin_group+0x8e>
   81f00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81f04:	d01f      	beq.n	81f46 <pio_configure_pin_group+0x6a>
   81f06:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81f0a:	d01c      	beq.n	81f46 <pio_configure_pin_group+0x6a>
   81f0c:	e02d      	b.n	81f6a <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81f0e:	460a      	mov	r2, r1
   81f10:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f14:	4b16      	ldr	r3, [pc, #88]	; (81f70 <pio_configure_pin_group+0x94>)
   81f16:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81f18:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81f1c:	bf14      	ite	ne
   81f1e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81f20:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81f22:	2001      	movs	r0, #1
   81f24:	e022      	b.n	81f6c <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81f26:	460a      	mov	r2, r1
   81f28:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81f2c:	4b10      	ldr	r3, [pc, #64]	; (81f70 <pio_configure_pin_group+0x94>)
   81f2e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81f30:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81f34:	bf14      	ite	ne
   81f36:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81f38:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81f3a:	2001      	movs	r0, #1
   81f3c:	e016      	b.n	81f6c <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81f3e:	4b0d      	ldr	r3, [pc, #52]	; (81f74 <pio_configure_pin_group+0x98>)
   81f40:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81f42:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   81f44:	e012      	b.n	81f6c <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   81f46:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
   81f4a:	f004 0301 	and.w	r3, r4, #1
   81f4e:	9300      	str	r3, [sp, #0]
   81f50:	f3c4 0380 	ubfx	r3, r4, #2, #1
   81f54:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81f58:	bf14      	ite	ne
   81f5a:	2200      	movne	r2, #0
   81f5c:	2201      	moveq	r2, #1
   81f5e:	4631      	mov	r1, r6
   81f60:	4628      	mov	r0, r5
   81f62:	4c05      	ldr	r4, [pc, #20]	; (81f78 <pio_configure_pin_group+0x9c>)
   81f64:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   81f66:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81f68:	e000      	b.n	81f6c <pio_configure_pin_group+0x90>

	default:
		return 0;
   81f6a:	2000      	movs	r0, #0
	}

	return 1;
}
   81f6c:	b002      	add	sp, #8
   81f6e:	bd70      	pop	{r4, r5, r6, pc}
   81f70:	00081d65 	.word	0x00081d65
   81f74:	00081da5 	.word	0x00081da5
   81f78:	00081dd9 	.word	0x00081dd9

00081f7c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81f80:	4604      	mov	r4, r0
   81f82:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81f84:	4b0e      	ldr	r3, [pc, #56]	; (81fc0 <pio_handler_process+0x44>)
   81f86:	4798      	blx	r3
   81f88:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81f8a:	4620      	mov	r0, r4
   81f8c:	4b0d      	ldr	r3, [pc, #52]	; (81fc4 <pio_handler_process+0x48>)
   81f8e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81f90:	4005      	ands	r5, r0
   81f92:	d013      	beq.n	81fbc <pio_handler_process+0x40>
   81f94:	4c0c      	ldr	r4, [pc, #48]	; (81fc8 <pio_handler_process+0x4c>)
   81f96:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81f9a:	6823      	ldr	r3, [r4, #0]
   81f9c:	4543      	cmp	r3, r8
   81f9e:	d108      	bne.n	81fb2 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81fa0:	6861      	ldr	r1, [r4, #4]
   81fa2:	4229      	tst	r1, r5
   81fa4:	d005      	beq.n	81fb2 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81fa6:	68e3      	ldr	r3, [r4, #12]
   81fa8:	4640      	mov	r0, r8
   81faa:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81fac:	6863      	ldr	r3, [r4, #4]
   81fae:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81fb2:	42b4      	cmp	r4, r6
   81fb4:	d002      	beq.n	81fbc <pio_handler_process+0x40>
   81fb6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81fb8:	2d00      	cmp	r5, #0
   81fba:	d1ee      	bne.n	81f9a <pio_handler_process+0x1e>
   81fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81fc0:	00081e01 	.word	0x00081e01
   81fc4:	00081e05 	.word	0x00081e05
   81fc8:	2007aaf0 	.word	0x2007aaf0

00081fcc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81fcc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81fce:	210b      	movs	r1, #11
   81fd0:	4801      	ldr	r0, [pc, #4]	; (81fd8 <PIOA_Handler+0xc>)
   81fd2:	4b02      	ldr	r3, [pc, #8]	; (81fdc <PIOA_Handler+0x10>)
   81fd4:	4798      	blx	r3
   81fd6:	bd08      	pop	{r3, pc}
   81fd8:	400e0e00 	.word	0x400e0e00
   81fdc:	00081f7d 	.word	0x00081f7d

00081fe0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81fe0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81fe2:	210c      	movs	r1, #12
   81fe4:	4801      	ldr	r0, [pc, #4]	; (81fec <PIOB_Handler+0xc>)
   81fe6:	4b02      	ldr	r3, [pc, #8]	; (81ff0 <PIOB_Handler+0x10>)
   81fe8:	4798      	blx	r3
   81fea:	bd08      	pop	{r3, pc}
   81fec:	400e1000 	.word	0x400e1000
   81ff0:	00081f7d 	.word	0x00081f7d

00081ff4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81ff4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81ff6:	210d      	movs	r1, #13
   81ff8:	4801      	ldr	r0, [pc, #4]	; (82000 <PIOC_Handler+0xc>)
   81ffa:	4b02      	ldr	r3, [pc, #8]	; (82004 <PIOC_Handler+0x10>)
   81ffc:	4798      	blx	r3
   81ffe:	bd08      	pop	{r3, pc}
   82000:	400e1200 	.word	0x400e1200
   82004:	00081f7d 	.word	0x00081f7d

00082008 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82008:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8200a:	210e      	movs	r1, #14
   8200c:	4801      	ldr	r0, [pc, #4]	; (82014 <PIOD_Handler+0xc>)
   8200e:	4b02      	ldr	r3, [pc, #8]	; (82018 <PIOD_Handler+0x10>)
   82010:	4798      	blx	r3
   82012:	bd08      	pop	{r3, pc}
   82014:	400e1400 	.word	0x400e1400
   82018:	00081f7d 	.word	0x00081f7d

0008201c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8201c:	4a18      	ldr	r2, [pc, #96]	; (82080 <pmc_switch_mck_to_pllack+0x64>)
   8201e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82024:	4318      	orrs	r0, r3
   82026:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82028:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8202a:	f013 0f08 	tst.w	r3, #8
   8202e:	d003      	beq.n	82038 <pmc_switch_mck_to_pllack+0x1c>
   82030:	e009      	b.n	82046 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82032:	3b01      	subs	r3, #1
   82034:	d103      	bne.n	8203e <pmc_switch_mck_to_pllack+0x22>
   82036:	e01e      	b.n	82076 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82038:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8203c:	4910      	ldr	r1, [pc, #64]	; (82080 <pmc_switch_mck_to_pllack+0x64>)
   8203e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82040:	f012 0f08 	tst.w	r2, #8
   82044:	d0f5      	beq.n	82032 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82046:	4a0e      	ldr	r2, [pc, #56]	; (82080 <pmc_switch_mck_to_pllack+0x64>)
   82048:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8204a:	f023 0303 	bic.w	r3, r3, #3
   8204e:	f043 0302 	orr.w	r3, r3, #2
   82052:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82054:	6e90      	ldr	r0, [r2, #104]	; 0x68
   82056:	f010 0008 	ands.w	r0, r0, #8
   8205a:	d004      	beq.n	82066 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8205c:	2000      	movs	r0, #0
   8205e:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   82060:	3b01      	subs	r3, #1
   82062:	d103      	bne.n	8206c <pmc_switch_mck_to_pllack+0x50>
   82064:	e009      	b.n	8207a <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82066:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8206a:	4905      	ldr	r1, [pc, #20]	; (82080 <pmc_switch_mck_to_pllack+0x64>)
   8206c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8206e:	f012 0f08 	tst.w	r2, #8
   82072:	d0f5      	beq.n	82060 <pmc_switch_mck_to_pllack+0x44>
   82074:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82076:	2001      	movs	r0, #1
   82078:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8207a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8207c:	4770      	bx	lr
   8207e:	bf00      	nop
   82080:	400e0600 	.word	0x400e0600

00082084 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82084:	b138      	cbz	r0, 82096 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82086:	4911      	ldr	r1, [pc, #68]	; (820cc <pmc_switch_mainck_to_xtal+0x48>)
   82088:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8208a:	4a11      	ldr	r2, [pc, #68]	; (820d0 <pmc_switch_mainck_to_xtal+0x4c>)
   8208c:	401a      	ands	r2, r3
   8208e:	4b11      	ldr	r3, [pc, #68]	; (820d4 <pmc_switch_mainck_to_xtal+0x50>)
   82090:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82092:	620b      	str	r3, [r1, #32]
   82094:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82096:	480d      	ldr	r0, [pc, #52]	; (820cc <pmc_switch_mainck_to_xtal+0x48>)
   82098:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8209a:	0209      	lsls	r1, r1, #8
   8209c:	b289      	uxth	r1, r1
   8209e:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
   820a2:	f023 0303 	bic.w	r3, r3, #3
   820a6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   820aa:	f043 0301 	orr.w	r3, r3, #1
   820ae:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   820b0:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   820b2:	4602      	mov	r2, r0
   820b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   820b6:	f013 0f01 	tst.w	r3, #1
   820ba:	d0fb      	beq.n	820b4 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   820bc:	4a03      	ldr	r2, [pc, #12]	; (820cc <pmc_switch_mainck_to_xtal+0x48>)
   820be:	6a13      	ldr	r3, [r2, #32]
   820c0:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   820c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   820c8:	6213      	str	r3, [r2, #32]
   820ca:	4770      	bx	lr
   820cc:	400e0600 	.word	0x400e0600
   820d0:	fec8fffc 	.word	0xfec8fffc
   820d4:	01370002 	.word	0x01370002

000820d8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   820d8:	4b02      	ldr	r3, [pc, #8]	; (820e4 <pmc_osc_is_ready_mainck+0xc>)
   820da:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   820dc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   820e0:	4770      	bx	lr
   820e2:	bf00      	nop
   820e4:	400e0600 	.word	0x400e0600

000820e8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   820e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   820ec:	4b01      	ldr	r3, [pc, #4]	; (820f4 <pmc_disable_pllack+0xc>)
   820ee:	629a      	str	r2, [r3, #40]	; 0x28
   820f0:	4770      	bx	lr
   820f2:	bf00      	nop
   820f4:	400e0600 	.word	0x400e0600

000820f8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   820f8:	4b02      	ldr	r3, [pc, #8]	; (82104 <pmc_is_locked_pllack+0xc>)
   820fa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   820fc:	f000 0002 	and.w	r0, r0, #2
   82100:	4770      	bx	lr
   82102:	bf00      	nop
   82104:	400e0600 	.word	0x400e0600

00082108 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82108:	282c      	cmp	r0, #44	; 0x2c
   8210a:	d81e      	bhi.n	8214a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   8210c:	281f      	cmp	r0, #31
   8210e:	d80c      	bhi.n	8212a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82110:	4b11      	ldr	r3, [pc, #68]	; (82158 <pmc_enable_periph_clk+0x50>)
   82112:	699a      	ldr	r2, [r3, #24]
   82114:	2301      	movs	r3, #1
   82116:	4083      	lsls	r3, r0
   82118:	4393      	bics	r3, r2
   8211a:	d018      	beq.n	8214e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   8211c:	2301      	movs	r3, #1
   8211e:	fa03 f000 	lsl.w	r0, r3, r0
   82122:	4b0d      	ldr	r3, [pc, #52]	; (82158 <pmc_enable_periph_clk+0x50>)
   82124:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82126:	2000      	movs	r0, #0
   82128:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   8212a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8212c:	4b0a      	ldr	r3, [pc, #40]	; (82158 <pmc_enable_periph_clk+0x50>)
   8212e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   82132:	2301      	movs	r3, #1
   82134:	4083      	lsls	r3, r0
   82136:	4393      	bics	r3, r2
   82138:	d00b      	beq.n	82152 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   8213a:	2301      	movs	r3, #1
   8213c:	fa03 f000 	lsl.w	r0, r3, r0
   82140:	4b05      	ldr	r3, [pc, #20]	; (82158 <pmc_enable_periph_clk+0x50>)
   82142:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   82146:	2000      	movs	r0, #0
   82148:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8214a:	2001      	movs	r0, #1
   8214c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8214e:	2000      	movs	r0, #0
   82150:	4770      	bx	lr
   82152:	2000      	movs	r0, #0
}
   82154:	4770      	bx	lr
   82156:	bf00      	nop
   82158:	400e0600 	.word	0x400e0600

0008215c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8215c:	e7fe      	b.n	8215c <Dummy_Handler>
   8215e:	bf00      	nop

00082160 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82160:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82162:	4b1e      	ldr	r3, [pc, #120]	; (821dc <Reset_Handler+0x7c>)
   82164:	4a1e      	ldr	r2, [pc, #120]	; (821e0 <Reset_Handler+0x80>)
   82166:	429a      	cmp	r2, r3
   82168:	d003      	beq.n	82172 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8216a:	4b1e      	ldr	r3, [pc, #120]	; (821e4 <Reset_Handler+0x84>)
   8216c:	4a1b      	ldr	r2, [pc, #108]	; (821dc <Reset_Handler+0x7c>)
   8216e:	429a      	cmp	r2, r3
   82170:	d304      	bcc.n	8217c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82172:	4b1d      	ldr	r3, [pc, #116]	; (821e8 <Reset_Handler+0x88>)
   82174:	4a1d      	ldr	r2, [pc, #116]	; (821ec <Reset_Handler+0x8c>)
   82176:	429a      	cmp	r2, r3
   82178:	d30f      	bcc.n	8219a <Reset_Handler+0x3a>
   8217a:	e01a      	b.n	821b2 <Reset_Handler+0x52>
   8217c:	4917      	ldr	r1, [pc, #92]	; (821dc <Reset_Handler+0x7c>)
   8217e:	4b1c      	ldr	r3, [pc, #112]	; (821f0 <Reset_Handler+0x90>)
   82180:	1a5b      	subs	r3, r3, r1
   82182:	f023 0303 	bic.w	r3, r3, #3
   82186:	3304      	adds	r3, #4
   82188:	4a15      	ldr	r2, [pc, #84]	; (821e0 <Reset_Handler+0x80>)
   8218a:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   8218c:	f852 0b04 	ldr.w	r0, [r2], #4
   82190:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82194:	429a      	cmp	r2, r3
   82196:	d1f9      	bne.n	8218c <Reset_Handler+0x2c>
   82198:	e7eb      	b.n	82172 <Reset_Handler+0x12>
   8219a:	4b16      	ldr	r3, [pc, #88]	; (821f4 <Reset_Handler+0x94>)
   8219c:	4a16      	ldr	r2, [pc, #88]	; (821f8 <Reset_Handler+0x98>)
   8219e:	1ad2      	subs	r2, r2, r3
   821a0:	f022 0203 	bic.w	r2, r2, #3
   821a4:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   821a6:	3b04      	subs	r3, #4
		*pDest++ = 0;
   821a8:	2100      	movs	r1, #0
   821aa:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   821ae:	4293      	cmp	r3, r2
   821b0:	d1fb      	bne.n	821aa <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   821b2:	4b12      	ldr	r3, [pc, #72]	; (821fc <Reset_Handler+0x9c>)
   821b4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   821b8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   821bc:	4910      	ldr	r1, [pc, #64]	; (82200 <Reset_Handler+0xa0>)
   821be:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   821c0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   821c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   821c8:	d203      	bcs.n	821d2 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   821ca:	688b      	ldr	r3, [r1, #8]
   821cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   821d0:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   821d2:	4b0c      	ldr	r3, [pc, #48]	; (82204 <Reset_Handler+0xa4>)
   821d4:	4798      	blx	r3

	/* Branch to main function */
	main();
   821d6:	4b0c      	ldr	r3, [pc, #48]	; (82208 <Reset_Handler+0xa8>)
   821d8:	4798      	blx	r3
   821da:	e7fe      	b.n	821da <Reset_Handler+0x7a>
   821dc:	20070000 	.word	0x20070000
   821e0:	000865f8 	.word	0x000865f8
   821e4:	20070984 	.word	0x20070984
   821e8:	2007c458 	.word	0x2007c458
   821ec:	20070988 	.word	0x20070988
   821f0:	20070983 	.word	0x20070983
   821f4:	2007098c 	.word	0x2007098c
   821f8:	2007c45b 	.word	0x2007c45b
   821fc:	00080000 	.word	0x00080000
   82200:	e000ed00 	.word	0xe000ed00
   82204:	00083621 	.word	0x00083621
   82208:	0008352d 	.word	0x0008352d

0008220c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8220c:	4b3e      	ldr	r3, [pc, #248]	; (82308 <SystemCoreClockUpdate+0xfc>)
   8220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82210:	f003 0303 	and.w	r3, r3, #3
   82214:	2b03      	cmp	r3, #3
   82216:	d85f      	bhi.n	822d8 <SystemCoreClockUpdate+0xcc>
   82218:	e8df f003 	tbb	[pc, r3]
   8221c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82220:	4b3a      	ldr	r3, [pc, #232]	; (8230c <SystemCoreClockUpdate+0x100>)
   82222:	695b      	ldr	r3, [r3, #20]
   82224:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82228:	bf14      	ite	ne
   8222a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8222e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82232:	4b37      	ldr	r3, [pc, #220]	; (82310 <SystemCoreClockUpdate+0x104>)
   82234:	601a      	str	r2, [r3, #0]
   82236:	e04f      	b.n	822d8 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82238:	4b33      	ldr	r3, [pc, #204]	; (82308 <SystemCoreClockUpdate+0xfc>)
   8223a:	6a1b      	ldr	r3, [r3, #32]
   8223c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82240:	d003      	beq.n	8224a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82242:	4a34      	ldr	r2, [pc, #208]	; (82314 <SystemCoreClockUpdate+0x108>)
   82244:	4b32      	ldr	r3, [pc, #200]	; (82310 <SystemCoreClockUpdate+0x104>)
   82246:	601a      	str	r2, [r3, #0]
   82248:	e046      	b.n	822d8 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8224a:	4a33      	ldr	r2, [pc, #204]	; (82318 <SystemCoreClockUpdate+0x10c>)
   8224c:	4b30      	ldr	r3, [pc, #192]	; (82310 <SystemCoreClockUpdate+0x104>)
   8224e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82250:	4b2d      	ldr	r3, [pc, #180]	; (82308 <SystemCoreClockUpdate+0xfc>)
   82252:	6a1b      	ldr	r3, [r3, #32]
   82254:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82258:	2b10      	cmp	r3, #16
   8225a:	d002      	beq.n	82262 <SystemCoreClockUpdate+0x56>
   8225c:	2b20      	cmp	r3, #32
   8225e:	d004      	beq.n	8226a <SystemCoreClockUpdate+0x5e>
   82260:	e03a      	b.n	822d8 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82262:	4a2e      	ldr	r2, [pc, #184]	; (8231c <SystemCoreClockUpdate+0x110>)
   82264:	4b2a      	ldr	r3, [pc, #168]	; (82310 <SystemCoreClockUpdate+0x104>)
   82266:	601a      	str	r2, [r3, #0]
				break;
   82268:	e036      	b.n	822d8 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8226a:	4a2a      	ldr	r2, [pc, #168]	; (82314 <SystemCoreClockUpdate+0x108>)
   8226c:	4b28      	ldr	r3, [pc, #160]	; (82310 <SystemCoreClockUpdate+0x104>)
   8226e:	601a      	str	r2, [r3, #0]
				break;
   82270:	e032      	b.n	822d8 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82272:	4b25      	ldr	r3, [pc, #148]	; (82308 <SystemCoreClockUpdate+0xfc>)
   82274:	6a1b      	ldr	r3, [r3, #32]
   82276:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8227a:	d003      	beq.n	82284 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8227c:	4a25      	ldr	r2, [pc, #148]	; (82314 <SystemCoreClockUpdate+0x108>)
   8227e:	4b24      	ldr	r3, [pc, #144]	; (82310 <SystemCoreClockUpdate+0x104>)
   82280:	601a      	str	r2, [r3, #0]
   82282:	e012      	b.n	822aa <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82284:	4a24      	ldr	r2, [pc, #144]	; (82318 <SystemCoreClockUpdate+0x10c>)
   82286:	4b22      	ldr	r3, [pc, #136]	; (82310 <SystemCoreClockUpdate+0x104>)
   82288:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8228a:	4b1f      	ldr	r3, [pc, #124]	; (82308 <SystemCoreClockUpdate+0xfc>)
   8228c:	6a1b      	ldr	r3, [r3, #32]
   8228e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82292:	2b10      	cmp	r3, #16
   82294:	d002      	beq.n	8229c <SystemCoreClockUpdate+0x90>
   82296:	2b20      	cmp	r3, #32
   82298:	d004      	beq.n	822a4 <SystemCoreClockUpdate+0x98>
   8229a:	e006      	b.n	822aa <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8229c:	4a1f      	ldr	r2, [pc, #124]	; (8231c <SystemCoreClockUpdate+0x110>)
   8229e:	4b1c      	ldr	r3, [pc, #112]	; (82310 <SystemCoreClockUpdate+0x104>)
   822a0:	601a      	str	r2, [r3, #0]
				break;
   822a2:	e002      	b.n	822aa <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   822a4:	4a1b      	ldr	r2, [pc, #108]	; (82314 <SystemCoreClockUpdate+0x108>)
   822a6:	4b1a      	ldr	r3, [pc, #104]	; (82310 <SystemCoreClockUpdate+0x104>)
   822a8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   822aa:	4b17      	ldr	r3, [pc, #92]	; (82308 <SystemCoreClockUpdate+0xfc>)
   822ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   822ae:	f003 0303 	and.w	r3, r3, #3
   822b2:	2b02      	cmp	r3, #2
   822b4:	d10d      	bne.n	822d2 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   822b6:	4a14      	ldr	r2, [pc, #80]	; (82308 <SystemCoreClockUpdate+0xfc>)
   822b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   822ba:	6a92      	ldr	r2, [r2, #40]	; 0x28
   822bc:	4814      	ldr	r0, [pc, #80]	; (82310 <SystemCoreClockUpdate+0x104>)
   822be:	f3c3 410a 	ubfx	r1, r3, #16, #11
   822c2:	6803      	ldr	r3, [r0, #0]
   822c4:	fb01 3303 	mla	r3, r1, r3, r3
   822c8:	b2d2      	uxtb	r2, r2
   822ca:	fbb3 f3f2 	udiv	r3, r3, r2
   822ce:	6003      	str	r3, [r0, #0]
   822d0:	e002      	b.n	822d8 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   822d2:	4a13      	ldr	r2, [pc, #76]	; (82320 <SystemCoreClockUpdate+0x114>)
   822d4:	4b0e      	ldr	r3, [pc, #56]	; (82310 <SystemCoreClockUpdate+0x104>)
   822d6:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   822d8:	4b0b      	ldr	r3, [pc, #44]	; (82308 <SystemCoreClockUpdate+0xfc>)
   822da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   822dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   822e0:	2b70      	cmp	r3, #112	; 0x70
   822e2:	d107      	bne.n	822f4 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   822e4:	4a0a      	ldr	r2, [pc, #40]	; (82310 <SystemCoreClockUpdate+0x104>)
   822e6:	6813      	ldr	r3, [r2, #0]
   822e8:	490e      	ldr	r1, [pc, #56]	; (82324 <SystemCoreClockUpdate+0x118>)
   822ea:	fba1 1303 	umull	r1, r3, r1, r3
   822ee:	085b      	lsrs	r3, r3, #1
   822f0:	6013      	str	r3, [r2, #0]
   822f2:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   822f4:	4b04      	ldr	r3, [pc, #16]	; (82308 <SystemCoreClockUpdate+0xfc>)
   822f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   822f8:	4905      	ldr	r1, [pc, #20]	; (82310 <SystemCoreClockUpdate+0x104>)
   822fa:	f3c3 1202 	ubfx	r2, r3, #4, #3
   822fe:	680b      	ldr	r3, [r1, #0]
   82300:	40d3      	lsrs	r3, r2
   82302:	600b      	str	r3, [r1, #0]
   82304:	4770      	bx	lr
   82306:	bf00      	nop
   82308:	400e0600 	.word	0x400e0600
   8230c:	400e1a10 	.word	0x400e1a10
   82310:	20070138 	.word	0x20070138
   82314:	00b71b00 	.word	0x00b71b00
   82318:	003d0900 	.word	0x003d0900
   8231c:	007a1200 	.word	0x007a1200
   82320:	0e4e1c00 	.word	0x0e4e1c00
   82324:	aaaaaaab 	.word	0xaaaaaaab

00082328 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82328:	4b09      	ldr	r3, [pc, #36]	; (82350 <_sbrk+0x28>)
   8232a:	681b      	ldr	r3, [r3, #0]
   8232c:	b913      	cbnz	r3, 82334 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   8232e:	4a09      	ldr	r2, [pc, #36]	; (82354 <_sbrk+0x2c>)
   82330:	4b07      	ldr	r3, [pc, #28]	; (82350 <_sbrk+0x28>)
   82332:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   82334:	4b06      	ldr	r3, [pc, #24]	; (82350 <_sbrk+0x28>)
   82336:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82338:	181a      	adds	r2, r3, r0
   8233a:	4907      	ldr	r1, [pc, #28]	; (82358 <_sbrk+0x30>)
   8233c:	4291      	cmp	r1, r2
   8233e:	db04      	blt.n	8234a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   82340:	4610      	mov	r0, r2
   82342:	4a03      	ldr	r2, [pc, #12]	; (82350 <_sbrk+0x28>)
   82344:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82346:	4618      	mov	r0, r3
   82348:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   8234a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   8234e:	4770      	bx	lr
   82350:	2007ab60 	.word	0x2007ab60
   82354:	2007e458 	.word	0x2007e458
   82358:	20087ffc 	.word	0x20087ffc

0008235c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   8235c:	f04f 30ff 	mov.w	r0, #4294967295
   82360:	4770      	bx	lr
   82362:	bf00      	nop

00082364 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82368:	604b      	str	r3, [r1, #4]

	return 0;
}
   8236a:	2000      	movs	r0, #0
   8236c:	4770      	bx	lr
   8236e:	bf00      	nop

00082370 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82370:	2001      	movs	r0, #1
   82372:	4770      	bx	lr

00082374 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82374:	2000      	movs	r0, #0
   82376:	4770      	bx	lr

00082378 <vTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., NTask) in trcConfig.h is too small.
 ******************************************************************************/
void vTraceError(const char* msg)
{
   82378:	b510      	push	{r4, lr}
	TRACE_ASSERT(msg != NULL, "vTraceError: msg == NULL", );
   8237a:	b918      	cbnz	r0, 82384 <vTraceError+0xc>
   8237c:	480d      	ldr	r0, [pc, #52]	; (823b4 <vTraceError+0x3c>)
   8237e:	f7ff fffb 	bl	82378 <vTraceError>
   82382:	bd10      	pop	{r4, pc}
   82384:	4601      	mov	r1, r0
	TRACE_ASSERT(RecorderDataPtr != NULL, "vTraceError: RecorderDataPtr == NULL", );
   82386:	4b0c      	ldr	r3, [pc, #48]	; (823b8 <vTraceError+0x40>)
   82388:	681c      	ldr	r4, [r3, #0]
   8238a:	b91c      	cbnz	r4, 82394 <vTraceError+0x1c>
   8238c:	480b      	ldr	r0, [pc, #44]	; (823bc <vTraceError+0x44>)
   8238e:	f7ff fff3 	bl	82378 <vTraceError>
   82392:	bd10      	pop	{r4, pc}

	/* Stop the recorder. Note: We do not call vTraceStop, since that adds a weird
	and unnecessary dependency to trcUser.c */

	RecorderDataPtr->recorderActive = 0;
   82394:	2300      	movs	r3, #0
   82396:	6323      	str	r3, [r4, #48]	; 0x30

	if (traceErrorMessage == NULL)
   82398:	4b09      	ldr	r3, [pc, #36]	; (823c0 <vTraceError+0x48>)
   8239a:	681b      	ldr	r3, [r3, #0]
   8239c:	b94b      	cbnz	r3, 823b2 <vTraceError+0x3a>
	{
		traceErrorMessage = (char*)msg;
   8239e:	4b08      	ldr	r3, [pc, #32]	; (823c0 <vTraceError+0x48>)
   823a0:	6018      	str	r0, [r3, #0]
		(void)strncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   823a2:	2250      	movs	r2, #80	; 0x50
   823a4:	f204 70dc 	addw	r0, r4, #2012	; 0x7dc
   823a8:	4b06      	ldr	r3, [pc, #24]	; (823c4 <vTraceError+0x4c>)
   823aa:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;	 	 
   823ac:	2301      	movs	r3, #1
   823ae:	f8c4 37d4 	str.w	r3, [r4, #2004]	; 0x7d4
   823b2:	bd10      	pop	{r4, pc}
   823b4:	0008525c 	.word	0x0008525c
   823b8:	2007ab94 	.word	0x2007ab94
   823bc:	00085284 	.word	0x00085284
   823c0:	2007ab88 	.word	0x2007ab88
   823c4:	00083a2d 	.word	0x00083a2d

000823c8 <prvTraceInitTraceData>:

RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{		
   823c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	init_hwtc_count = HWTC_COUNT;
   823cc:	4b4d      	ldr	r3, [pc, #308]	; (82504 <prvTraceInitTraceData+0x13c>)
   823ce:	681b      	ldr	r3, [r3, #0]
   823d0:	4a4d      	ldr	r2, [pc, #308]	; (82508 <prvTraceInitTraceData+0x140>)
   823d2:	6812      	ldr	r2, [r2, #0]
   823d4:	4413      	add	r3, r2
   823d6:	4a4d      	ldr	r2, [pc, #308]	; (8250c <prvTraceInitTraceData+0x144>)
   823d8:	6013      	str	r3, [r2, #0]
	
#if TRACE_DATA_ALLOCATION == TRACE_DATA_ALLOCATION_STATIC
	RecorderDataPtr = &RecorderData;
   823da:	4d4d      	ldr	r5, [pc, #308]	; (82510 <prvTraceInitTraceData+0x148>)
   823dc:	4c4d      	ldr	r4, [pc, #308]	; (82514 <prvTraceInitTraceData+0x14c>)
   823de:	602c      	str	r4, [r5, #0]
	{
		vTraceError("No recorder data structure allocated!");
		return;
	}
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   823e0:	f44f 52bf 	mov.w	r2, #6112	; 0x17e0
   823e4:	2100      	movs	r1, #0
   823e6:	4620      	mov	r0, r4
   823e8:	4b4b      	ldr	r3, [pc, #300]	; (82518 <prvTraceInitTraceData+0x150>)
   823ea:	4798      	blx	r3

	RecorderDataPtr->startmarker0 = 0x00;
	RecorderDataPtr->startmarker1 = 0x01;
   823ec:	f04f 0301 	mov.w	r3, #1
   823f0:	7063      	strb	r3, [r4, #1]
	RecorderDataPtr->startmarker2 = 0x02;
   823f2:	2302      	movs	r3, #2
   823f4:	70a3      	strb	r3, [r4, #2]
	RecorderDataPtr->startmarker3 = 0x03;
   823f6:	2303      	movs	r3, #3
   823f8:	70e3      	strb	r3, [r4, #3]
	RecorderDataPtr->startmarker4 = 0x70;
   823fa:	2370      	movs	r3, #112	; 0x70
   823fc:	7123      	strb	r3, [r4, #4]
	RecorderDataPtr->startmarker5 = 0x71;
   823fe:	f04f 0a71 	mov.w	sl, #113	; 0x71
   82402:	f884 a005 	strb.w	sl, [r4, #5]
	RecorderDataPtr->startmarker6 = 0x72;
   82406:	f04f 0972 	mov.w	r9, #114	; 0x72
   8240a:	f884 9006 	strb.w	r9, [r4, #6]
	RecorderDataPtr->startmarker7 = 0x73;
   8240e:	f04f 0873 	mov.w	r8, #115	; 0x73
   82412:	f884 8007 	strb.w	r8, [r4, #7]
	RecorderDataPtr->startmarker8 = 0xF0;
   82416:	23f0      	movs	r3, #240	; 0xf0
   82418:	7223      	strb	r3, [r4, #8]
	RecorderDataPtr->startmarker9 = 0xF1;
   8241a:	27f1      	movs	r7, #241	; 0xf1
   8241c:	7267      	strb	r7, [r4, #9]
	RecorderDataPtr->startmarker10 = 0xF2;
   8241e:	26f2      	movs	r6, #242	; 0xf2
   82420:	72a6      	strb	r6, [r4, #10]
	RecorderDataPtr->startmarker11 = 0xF3;
   82422:	f04f 0bf3 	mov.w	fp, #243	; 0xf3
   82426:	f884 b00b 	strb.w	fp, [r4, #11]

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   8242a:	f641 23a1 	movw	r3, #6817	; 0x1aa1
   8242e:	81a3      	strh	r3, [r4, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   82430:	2304      	movs	r3, #4
   82432:	73a3      	strb	r3, [r4, #14]
	RecorderDataPtr->irq_priority_order = IRQ_PRIORITY_ORDER;
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   82434:	f44f 53bf 	mov.w	r3, #6112	; 0x17e0
   82438:	6123      	str	r3, [r4, #16]

	RecorderDataPtr->maxEvents = EVENT_BUFFER_SIZE;
   8243a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   8243e:	61a3      	str	r3, [r4, #24]

	RecorderDataPtr->debugMarker0 = 0xF0F0F0F0;
   82440:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
   82444:	6563      	str	r3, [r4, #84]	; 0x54

	RecorderDataPtr->isUsing16bitHandles = USE_16BIT_OBJECT_HANDLES;

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   82446:	4b35      	ldr	r3, [pc, #212]	; (8251c <prvTraceInitTraceData+0x154>)
   82448:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = 0xF1F1F1F1;
   8244a:	682c      	ldr	r4, [r5, #0]
   8244c:	f04f 33f1 	mov.w	r3, #4059165169	; 0xf1f1f1f1
   82450:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
	RecorderDataPtr->SymbolTable.symTableSize = SYMBOL_TABLE_SIZE;
   82454:	f44f 7348 	mov.w	r3, #800	; 0x320
   82458:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   8245c:	2301      	movs	r3, #1
   8245e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
#if (INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = 0xF2F2F2F2;
   82462:	f04f 33f2 	mov.w	r3, #4076008178	; 0xf2f2f2f2
   82466:	f8c4 37d8 	str.w	r3, [r4, #2008]	; 0x7d8
	(void)strncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   8246a:	2250      	movs	r2, #80	; 0x50
   8246c:	492c      	ldr	r1, [pc, #176]	; (82520 <prvTraceInitTraceData+0x158>)
   8246e:	f204 70dc 	addw	r0, r4, #2012	; 0x7dc
   82472:	4b2c      	ldr	r3, [pc, #176]	; (82524 <prvTraceInitTraceData+0x15c>)
   82474:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = 0xF3F3F3F3;
   82476:	f04f 33f3 	mov.w	r3, #4092851187	; 0xf3f3f3f3
   8247a:	f8c4 382c 	str.w	r3, [r4, #2092]	; 0x82c
	RecorderDataPtr->endmarker0 = 0x0A;
   8247e:	220a      	movs	r2, #10
   82480:	f241 73d4 	movw	r3, #6100	; 0x17d4
   82484:	54e2      	strb	r2, [r4, r3]
	RecorderDataPtr->endmarker1 = 0x0B;
   82486:	220b      	movs	r2, #11
   82488:	f241 73d5 	movw	r3, #6101	; 0x17d5
   8248c:	54e2      	strb	r2, [r4, r3]
	RecorderDataPtr->endmarker2 = 0x0C;
   8248e:	220c      	movs	r2, #12
   82490:	f241 73d6 	movw	r3, #6102	; 0x17d6
   82494:	54e2      	strb	r2, [r4, r3]
	RecorderDataPtr->endmarker3 = 0x0D;
   82496:	220d      	movs	r2, #13
   82498:	f241 73d7 	movw	r3, #6103	; 0x17d7
   8249c:	54e2      	strb	r2, [r4, r3]
	RecorderDataPtr->endmarker4 = 0x71;
   8249e:	f241 73d8 	movw	r3, #6104	; 0x17d8
   824a2:	f804 a003 	strb.w	sl, [r4, r3]
	RecorderDataPtr->endmarker5 = 0x72;
   824a6:	f241 73d9 	movw	r3, #6105	; 0x17d9
   824aa:	f804 9003 	strb.w	r9, [r4, r3]
	RecorderDataPtr->endmarker6 = 0x73;
   824ae:	f241 73da 	movw	r3, #6106	; 0x17da
   824b2:	f804 8003 	strb.w	r8, [r4, r3]
	RecorderDataPtr->endmarker7 = 0x74;
   824b6:	2274      	movs	r2, #116	; 0x74
   824b8:	f241 73db 	movw	r3, #6107	; 0x17db
   824bc:	54e2      	strb	r2, [r4, r3]
	RecorderDataPtr->endmarker8 = 0xF1;
   824be:	f241 73dc 	movw	r3, #6108	; 0x17dc
   824c2:	54e7      	strb	r7, [r4, r3]
	RecorderDataPtr->endmarker9 = 0xF2;
   824c4:	f241 73dd 	movw	r3, #6109	; 0x17dd
   824c8:	54e6      	strb	r6, [r4, r3]
	RecorderDataPtr->endmarker10 = 0xF3;
   824ca:	f241 73de 	movw	r3, #6110	; 0x17de
   824ce:	f804 b003 	strb.w	fp, [r4, r3]
	RecorderDataPtr->endmarker11 = 0xF4;
   824d2:	22f4      	movs	r2, #244	; 0xf4
   824d4:	f241 73df 	movw	r3, #6111	; 0x17df
   824d8:	54e2      	strb	r2, [r4, r3]
	RecorderDataPtr->userEventBuffer.numberOfSlots = USER_EVENT_BUFFER_SIZE;
	RecorderDataPtr->userEventBuffer.numberOfChannels = CHANNEL_FORMAT_PAIRS + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   824da:	4b13      	ldr	r3, [pc, #76]	; (82528 <prvTraceInitTraceData+0x160>)
   824dc:	4798      	blx	r3
}

static void vInitStartMarkers()
{
	uint32_t i;
	uint8_t *ptr = (uint8_t*)&(RecorderDataPtr->startmarker0);
   824de:	6829      	ldr	r1, [r5, #0]
	if ((*ptr) == 0)
   824e0:	780b      	ldrb	r3, [r1, #0]
   824e2:	b943      	cbnz	r3, 824f6 <prvTraceInitTraceData+0x12e>
   824e4:	1e4b      	subs	r3, r1, #1
   824e6:	310b      	adds	r1, #11
	{
		for (i = 0; i < 12; i++)
		{
			ptr[i] += 1;
   824e8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   824ec:	3201      	adds	r2, #1
   824ee:	701a      	strb	r2, [r3, #0]
{
	uint32_t i;
	uint8_t *ptr = (uint8_t*)&(RecorderDataPtr->startmarker0);
	if ((*ptr) == 0)
	{
		for (i = 0; i < 12; i++)
   824f0:	428b      	cmp	r3, r1
   824f2:	d1f9      	bne.n	824e8 <prvTraceInitTraceData+0x120>
   824f4:	e002      	b.n	824fc <prvTraceInitTraceData+0x134>
			ptr[i] += 1;
		}
	}
	else
	{
		vTraceError("Trace start markers already initialized!");
   824f6:	480d      	ldr	r0, [pc, #52]	; (8252c <prvTraceInitTraceData+0x164>)
   824f8:	4b0d      	ldr	r3, [pc, #52]	; (82530 <prvTraceInitTraceData+0x168>)
   824fa:	4798      	blx	r3

	/* Fix the start markers of the trace data structure */
	vInitStartMarkers();
	
	#ifdef PORT_SPECIFIC_INIT
	PORT_SPECIFIC_INIT();
   824fc:	4b0d      	ldr	r3, [pc, #52]	; (82534 <prvTraceInitTraceData+0x16c>)
   824fe:	4798      	blx	r3
   82500:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82504:	e0001004 	.word	0xe0001004
   82508:	2007ac20 	.word	0x2007ac20
   8250c:	2007c450 	.word	0x2007c450
   82510:	2007ab94 	.word	0x2007ab94
   82514:	2007ac70 	.word	0x2007ac70
   82518:	0008375d 	.word	0x0008375d
   8251c:	000830a9 	.word	0x000830a9
   82520:	000852b8 	.word	0x000852b8
   82524:	00083a2d 	.word	0x00083a2d
   82528:	00083155 	.word	0x00083155
   8252c:	000852cc 	.word	0x000852cc
   82530:	00082379 	.word	0x00082379
   82534:	0008296d 	.word	0x0008296d

00082538 <xTraceNextFreeEventBufferSlot>:

/* Gives the last error message of the recorder. NULL if no error message. */
char* traceErrorMessage = NULL;

void* xTraceNextFreeEventBufferSlot(void)
{
   82538:	b508      	push	{r3, lr}
	if (! RecorderDataPtr->recorderActive)
   8253a:	4b0a      	ldr	r3, [pc, #40]	; (82564 <xTraceNextFreeEventBufferSlot+0x2c>)
   8253c:	681b      	ldr	r3, [r3, #0]
   8253e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82540:	b16a      	cbz	r2, 8255e <xTraceNextFreeEventBufferSlot+0x26>
	{
		// If the associated XTS or XPS event prio to the main event has filled the buffer and store mode "stop when full".
		return NULL;
	}

	if (RecorderDataPtr->nextFreeIndex >= EVENT_BUFFER_SIZE)
   82542:	69d8      	ldr	r0, [r3, #28]
   82544:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   82548:	d304      	bcc.n	82554 <xTraceNextFreeEventBufferSlot+0x1c>
	{
		vTraceError("Attempt to index outside event buffer!");
   8254a:	4807      	ldr	r0, [pc, #28]	; (82568 <xTraceNextFreeEventBufferSlot+0x30>)
   8254c:	4b07      	ldr	r3, [pc, #28]	; (8256c <xTraceNextFreeEventBufferSlot+0x34>)
   8254e:	4798      	blx	r3
		return NULL;
   82550:	2000      	movs	r0, #0
   82552:	bd08      	pop	{r3, pc}
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   82554:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   82558:	f500 6003 	add.w	r0, r0, #2096	; 0x830
   8255c:	bd08      	pop	{r3, pc}
void* xTraceNextFreeEventBufferSlot(void)
{
	if (! RecorderDataPtr->recorderActive)
	{
		// If the associated XTS or XPS event prio to the main event has filled the buffer and store mode "stop when full".
		return NULL;
   8255e:	2000      	movs	r0, #0
	{
		vTraceError("Attempt to index outside event buffer!");
		return NULL;
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
}
   82560:	bd08      	pop	{r3, pc}
   82562:	bf00      	nop
   82564:	2007ab94 	.word	0x2007ab94
   82568:	000852f8 	.word	0x000852f8
   8256c:	00082379 	.word	0x00082379

00082570 <uiIndexOfObject>:

uint16_t uiIndexOfObject(objectHandleType objecthandle, uint8_t objectclass)
{
   82570:	b510      	push	{r4, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   82572:	2906      	cmp	r1, #6
   82574:	d904      	bls.n	82580 <uiIndexOfObject+0x10>
   82576:	480f      	ldr	r0, [pc, #60]	; (825b4 <uiIndexOfObject+0x44>)
   82578:	4b0f      	ldr	r3, [pc, #60]	; (825b8 <uiIndexOfObject+0x48>)
   8257a:	4798      	blx	r3
   8257c:	2000      	movs	r0, #0
   8257e:	bd10      	pop	{r4, pc}
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   82580:	b130      	cbz	r0, 82590 <uiIndexOfObject+0x20>
   82582:	4b0e      	ldr	r3, [pc, #56]	; (825bc <uiIndexOfObject+0x4c>)
   82584:	681a      	ldr	r2, [r3, #0]
   82586:	1853      	adds	r3, r2, r1
   82588:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   8258c:	4283      	cmp	r3, r0
   8258e:	d204      	bcs.n	8259a <uiIndexOfObject+0x2a>
   82590:	480b      	ldr	r0, [pc, #44]	; (825c0 <uiIndexOfObject+0x50>)
   82592:	4b09      	ldr	r3, [pc, #36]	; (825b8 <uiIndexOfObject+0x48>)
   82594:	4798      	blx	r3
   82596:	2000      	movs	r0, #0
   82598:	bd10      	pop	{r4, pc}

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   8259a:	1853      	adds	r3, r2, r1
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   8259c:	f893 4074 	ldrb.w	r4, [r3, #116]	; 0x74
   825a0:	1e43      	subs	r3, r0, #1
   825a2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   825a6:	f8b1 207c 	ldrh.w	r2, [r1, #124]	; 0x7c
   825aa:	fb04 2003 	mla	r0, r4, r3, r2
   825ae:	b280      	uxth	r0, r0
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
	}

	vTraceError("Object table lookup with invalid object handle or object class!");
	return 0;
}
   825b0:	bd10      	pop	{r4, pc}
   825b2:	bf00      	nop
   825b4:	00085320 	.word	0x00085320
   825b8:	00082379 	.word	0x00082379
   825bc:	2007ab94 	.word	0x2007ab94
   825c0:	00085360 	.word	0x00085360

000825c4 <xTraceGetObjectHandle>:
 * contains the mapping between object handle and object name which was valid up
 * to this point in time. The object name is stored as a symbol table entry.
 ******************************************************************************/

objectHandleType xTraceGetObjectHandle(traceObjectClass objectclass)
{
   825c4:	b510      	push	{r4, lr}
	objectHandleType handle;
	static int indexOfHandle;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   825c6:	2806      	cmp	r0, #6
   825c8:	d904      	bls.n	825d4 <xTraceGetObjectHandle+0x10>
   825ca:	484c      	ldr	r0, [pc, #304]	; (826fc <xTraceGetObjectHandle+0x138>)
   825cc:	4b4c      	ldr	r3, [pc, #304]	; (82700 <xTraceGetObjectHandle+0x13c>)
   825ce:	4798      	blx	r3
   825d0:	2000      	movs	r0, #0
   825d2:	bd10      	pop	{r4, pc}
		"xTraceGetObjectHandle: Invalid value for objectclass", (objectHandleType)0);

	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   825d4:	4a4b      	ldr	r2, [pc, #300]	; (82704 <xTraceGetObjectHandle+0x140>)
   825d6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   825da:	441a      	add	r2, r3
   825dc:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   825e0:	b942      	cbnz	r2, 825f4 <xTraceGetObjectHandle+0x30>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   825e2:	4948      	ldr	r1, [pc, #288]	; (82704 <xTraceGetObjectHandle+0x140>)
   825e4:	18cc      	adds	r4, r1, r3
   825e6:	1c5a      	adds	r2, r3, #1
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   825e8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   825ec:	7b89      	ldrb	r1, [r1, #14]
   825ee:	1a52      	subs	r2, r2, r1
   825f0:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   825f4:	4a43      	ldr	r2, [pc, #268]	; (82704 <xTraceGetObjectHandle+0x140>)
   825f6:	eb02 0240 	add.w	r2, r2, r0, lsl #1
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   825fa:	8b92      	ldrh	r2, [r2, #28]
   825fc:	429a      	cmp	r2, r3
   825fe:	d205      	bcs.n	8260c <xTraceGetObjectHandle+0x48>
		> objectHandleStacks.highestIndexOfClass[objectclass])
	{
		/* ERROR */
		vTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   82600:	4b41      	ldr	r3, [pc, #260]	; (82708 <xTraceGetObjectHandle+0x144>)
   82602:	4798      	blx	r3
   82604:	4b3e      	ldr	r3, [pc, #248]	; (82700 <xTraceGetObjectHandle+0x13c>)
   82606:	4798      	blx	r3

		handle = 0; /* an invalid/anonymous handle - but the recorder is stopped now... */
   82608:	2000      	movs	r0, #0
   8260a:	bd10      	pop	{r4, pc}
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   8260c:	4a3d      	ldr	r2, [pc, #244]	; (82704 <xTraceGetObjectHandle+0x140>)
   8260e:	18d1      	adds	r1, r2, r3
   82610:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
		handle = 0; /* an invalid/anonymous handle - but the recorder is stopped now... */
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   82614:	3301      	adds	r3, #1
   82616:	b29b      	uxth	r3, r3
   82618:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
			objectHandleStacks.lowestIndexOfClass[objectclass];
   8261c:	eb02 0440 	add.w	r4, r2, r0, lsl #1
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   82620:	89e4      	ldrh	r4, [r4, #14]
   82622:	1b1b      	subs	r3, r3, r4
			objectHandleStacks.lowestIndexOfClass[objectclass];

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   82624:	eb02 0240 	add.w	r2, r2, r0, lsl #1
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
			objectHandleStacks.lowestIndexOfClass[objectclass];

		if (hndCount >
   82628:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   8262a:	4293      	cmp	r3, r2
   8262c:	dd04      	ble.n	82638 <xTraceGetObjectHandle+0x74>
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   8262e:	4a35      	ldr	r2, [pc, #212]	; (82704 <xTraceGetObjectHandle+0x140>)
   82630:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   82634:	b2db      	uxtb	r3, r3
   82636:	8553      	strh	r3, [r2, #42]	; 0x2a
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
   82638:	2806      	cmp	r0, #6
   8263a:	d85d      	bhi.n	826f8 <xTraceGetObjectHandle+0x134>
   8263c:	e8df f000 	tbb	[pc, r0]
   82640:	2f201104 	.word	0x2f201104
   82644:	3e5c      	.short	0x3e5c
   82646:	4d          	.byte	0x4d
   82647:	00          	.byte	0x00
   82648:	08c8      	lsrs	r0, r1, #3
   8264a:	4c30      	ldr	r4, [pc, #192]	; (8270c <xTraceGetObjectHandle+0x148>)
   8264c:	f001 0207 	and.w	r2, r1, #7
   82650:	2301      	movs	r3, #1
   82652:	fa03 f202 	lsl.w	r2, r3, r2
   82656:	5c23      	ldrb	r3, [r4, r0]
   82658:	ea23 0302 	bic.w	r3, r3, r2
   8265c:	5423      	strb	r3, [r4, r0]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   8265e:	4608      	mov	r0, r1
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
   82660:	bd10      	pop	{r4, pc}
   82662:	f101 030b 	add.w	r3, r1, #11
   82666:	10d8      	asrs	r0, r3, #3
   82668:	4c28      	ldr	r4, [pc, #160]	; (8270c <xTraceGetObjectHandle+0x148>)
   8266a:	f003 0307 	and.w	r3, r3, #7
   8266e:	2201      	movs	r2, #1
   82670:	fa02 f303 	lsl.w	r3, r2, r3
   82674:	5c22      	ldrb	r2, [r4, r0]
   82676:	ea22 0303 	bic.w	r3, r2, r3
   8267a:	5423      	strb	r3, [r4, r0]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   8267c:	4608      	mov	r0, r1
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
   8267e:	bd10      	pop	{r4, pc}
   82680:	f101 0316 	add.w	r3, r1, #22
   82684:	10d8      	asrs	r0, r3, #3
   82686:	4c21      	ldr	r4, [pc, #132]	; (8270c <xTraceGetObjectHandle+0x148>)
   82688:	f003 0307 	and.w	r3, r3, #7
   8268c:	2201      	movs	r2, #1
   8268e:	fa02 f303 	lsl.w	r3, r2, r3
   82692:	5c22      	ldrb	r2, [r4, r0]
   82694:	ea22 0303 	bic.w	r3, r2, r3
   82698:	5423      	strb	r3, [r4, r0]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   8269a:	4608      	mov	r0, r1
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
   8269c:	bd10      	pop	{r4, pc}
   8269e:	f101 0321 	add.w	r3, r1, #33	; 0x21
   826a2:	10d8      	asrs	r0, r3, #3
   826a4:	4c19      	ldr	r4, [pc, #100]	; (8270c <xTraceGetObjectHandle+0x148>)
   826a6:	f003 0307 	and.w	r3, r3, #7
   826aa:	2201      	movs	r2, #1
   826ac:	fa02 f303 	lsl.w	r3, r2, r3
   826b0:	5c22      	ldrb	r2, [r4, r0]
   826b2:	ea22 0303 	bic.w	r3, r2, r3
   826b6:	5423      	strb	r3, [r4, r0]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   826b8:	4608      	mov	r0, r1
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
   826ba:	bd10      	pop	{r4, pc}
   826bc:	f101 0331 	add.w	r3, r1, #49	; 0x31
   826c0:	10d8      	asrs	r0, r3, #3
   826c2:	4c12      	ldr	r4, [pc, #72]	; (8270c <xTraceGetObjectHandle+0x148>)
   826c4:	f003 0307 	and.w	r3, r3, #7
   826c8:	2201      	movs	r2, #1
   826ca:	fa02 f303 	lsl.w	r3, r2, r3
   826ce:	5c22      	ldrb	r2, [r4, r0]
   826d0:	ea22 0303 	bic.w	r3, r2, r3
   826d4:	5423      	strb	r3, [r4, r0]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   826d6:	4608      	mov	r0, r1
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
   826d8:	bd10      	pop	{r4, pc}
   826da:	f101 0334 	add.w	r3, r1, #52	; 0x34
   826de:	10d8      	asrs	r0, r3, #3
   826e0:	4c0a      	ldr	r4, [pc, #40]	; (8270c <xTraceGetObjectHandle+0x148>)
   826e2:	f003 0307 	and.w	r3, r3, #7
   826e6:	2201      	movs	r2, #1
   826e8:	fa02 f303 	lsl.w	r3, r2, r3
   826ec:	5c22      	ldrb	r2, [r4, r0]
   826ee:	ea22 0303 	bic.w	r3, r2, r3
   826f2:	5423      	strb	r3, [r4, r0]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   826f4:	4608      	mov	r0, r1
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
   826f6:	bd10      	pop	{r4, pc}
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   826f8:	4608      	mov	r0, r1

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
	}

	return handle;
}
   826fa:	bd10      	pop	{r4, pc}
   826fc:	000853a0 	.word	0x000853a0
   82700:	00082379 	.word	0x00082379
   82704:	2007ab98 	.word	0x2007ab98
   82708:	000831a5 	.word	0x000831a5
   8270c:	2007ac08 	.word	0x2007ac08

00082710 <vTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void vTraceSetObjectName(traceObjectClass objectclass,
						 objectHandleType handle,
						 const char* name)
{
   82710:	b538      	push	{r3, r4, r5, lr}
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "vTraceSetObjectName: name == NULL", );
   82712:	b91a      	cbnz	r2, 8271c <vTraceSetObjectName+0xc>
   82714:	4817      	ldr	r0, [pc, #92]	; (82774 <vTraceSetObjectName+0x64>)
   82716:	4b18      	ldr	r3, [pc, #96]	; (82778 <vTraceSetObjectName+0x68>)
   82718:	4798      	blx	r3
   8271a:	bd38      	pop	{r3, r4, r5, pc}
   8271c:	4604      	mov	r4, r0
   8271e:	4608      	mov	r0, r1
   82720:	4615      	mov	r5, r2

	if (objectclass >= TRACE_NCLASSES)
   82722:	2c06      	cmp	r4, #6
   82724:	d903      	bls.n	8272e <vTraceSetObjectName+0x1e>
	{
		vTraceError("Illegal object class in vTraceSetObjectName");
   82726:	4815      	ldr	r0, [pc, #84]	; (8277c <vTraceSetObjectName+0x6c>)
   82728:	4b13      	ldr	r3, [pc, #76]	; (82778 <vTraceSetObjectName+0x68>)
   8272a:	4798      	blx	r3
		return;
   8272c:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (handle == 0)
   8272e:	b919      	cbnz	r1, 82738 <vTraceSetObjectName+0x28>
	{
		vTraceError("Illegal handle (0) in vTraceSetObjectName.");
   82730:	4813      	ldr	r0, [pc, #76]	; (82780 <vTraceSetObjectName+0x70>)
   82732:	4b11      	ldr	r3, [pc, #68]	; (82778 <vTraceSetObjectName+0x68>)
   82734:	4798      	blx	r3
		return;
   82736:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   82738:	4b12      	ldr	r3, [pc, #72]	; (82784 <vTraceSetObjectName+0x74>)
   8273a:	681b      	ldr	r3, [r3, #0]
   8273c:	4423      	add	r3, r4
   8273e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82742:	428b      	cmp	r3, r1
   82744:	d205      	bcs.n	82752 <vTraceSetObjectName+0x42>
	{
		/* ERROR */
		vTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   82746:	4620      	mov	r0, r4
   82748:	4b0f      	ldr	r3, [pc, #60]	; (82788 <vTraceSetObjectName+0x78>)
   8274a:	4798      	blx	r3
   8274c:	4b0a      	ldr	r3, [pc, #40]	; (82778 <vTraceSetObjectName+0x68>)
   8274e:	4798      	blx	r3
   82750:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   82752:	4621      	mov	r1, r4
   82754:	4b0d      	ldr	r3, [pc, #52]	; (8278c <vTraceSetObjectName+0x7c>)
   82756:	4798      	blx	r3

		if (traceErrorMessage == NULL)
   82758:	4b0d      	ldr	r3, [pc, #52]	; (82790 <vTraceSetObjectName+0x80>)
   8275a:	681b      	ldr	r3, [r3, #0]
   8275c:	b94b      	cbnz	r3, 82772 <vTraceSetObjectName+0x62>
		{
			(void)strncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   8275e:	4b09      	ldr	r3, [pc, #36]	; (82784 <vTraceSetObjectName+0x74>)
   82760:	681b      	ldr	r3, [r3, #0]
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   82762:	441c      	add	r4, r3
	{
		idx = uiIndexOfObject(handle, objectclass);

		if (traceErrorMessage == NULL)
		{
			(void)strncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   82764:	4418      	add	r0, r3
   82766:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
   8276a:	4629      	mov	r1, r5
   8276c:	308c      	adds	r0, #140	; 0x8c
   8276e:	4b09      	ldr	r3, [pc, #36]	; (82794 <vTraceSetObjectName+0x84>)
   82770:	4798      	blx	r3
   82772:	bd38      	pop	{r3, r4, r5, pc}
   82774:	00085498 	.word	0x00085498
   82778:	00082379 	.word	0x00082379
   8277c:	000854c8 	.word	0x000854c8
   82780:	000854f4 	.word	0x000854f4
   82784:	2007ab94 	.word	0x2007ab94
   82788:	000831a5 	.word	0x000831a5
   8278c:	00082571 	.word	0x00082571
   82790:	2007ab88 	.word	0x2007ab88
   82794:	00083a2d 	.word	0x00083a2d

00082798 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 *
 * This is assumed to execute within a critical section...
 *****************************************************************************/

void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   82798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   8279c:	b118      	cbz	r0, 827a6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xe>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
   8279e:	4605      	mov	r5, r0
   827a0:	b930      	cbnz	r0, 827b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x18>
   827a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   827a6:	481f      	ldr	r0, [pc, #124]	; (82824 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x8c>)
   827a8:	4b1f      	ldr	r3, [pc, #124]	; (82828 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x90>)
   827aa:	4798      	blx	r3
   827ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
   827b0:	2400      	movs	r4, #0
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   827b2:	4e1e      	ldr	r6, [pc, #120]	; (8282c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x94>)
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   827b4:	4627      	mov	r7, r4
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4 * nDataEvents);
   827b6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 82830 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x98>
	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   827ba:	6830      	ldr	r0, [r6, #0]
   827bc:	69c3      	ldr	r3, [r0, #28]
   827be:	4423      	add	r3, r4
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   827c0:	ea4f 0e83 	mov.w	lr, r3, lsl #2
   827c4:	eb00 020e 	add.w	r2, r0, lr
   827c8:	f892 2830 	ldrb.w	r2, [r2, #2096]	; 0x830
   827cc:	f102 0167 	add.w	r1, r2, #103	; 0x67
   827d0:	b2c9      	uxtb	r1, r1
   827d2:	290e      	cmp	r1, #14
   827d4:	d80d      	bhi.n	827f2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x5a>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   827d6:	3268      	adds	r2, #104	; 0x68
   827d8:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   827da:	4413      	add	r3, r2
   827dc:	6981      	ldr	r1, [r0, #24]
   827de:	428b      	cmp	r3, r1
   827e0:	d21b      	bcs.n	8281a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x82>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4 * nDataEvents);
   827e2:	3201      	adds	r2, #1
   827e4:	f50e 6e03 	add.w	lr, lr, #2096	; 0x830
   827e8:	0092      	lsls	r2, r2, #2
   827ea:	4639      	mov	r1, r7
   827ec:	4470      	add	r0, lr
   827ee:	47c0      	blx	r8
   827f0:	e013      	b.n	8281a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x82>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   827f2:	2a01      	cmp	r2, #1
   827f4:	d111      	bne.n	8281a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x82>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   827f6:	3301      	adds	r3, #1
   827f8:	6982      	ldr	r2, [r0, #24]
   827fa:	4293      	cmp	r3, r2
   827fc:	d207      	bcs.n	8280e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x76>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   827fe:	f50e 6e03 	add.w	lr, lr, #2096	; 0x830
   82802:	eb00 030e 	add.w	r3, r0, lr
   82806:	f840 700e 	str.w	r7, [r0, lr]
   8280a:	605f      	str	r7, [r3, #4]
   8280c:	e005      	b.n	8281a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x82>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   8280e:	f8c0 7830 	str.w	r7, [r0, #2096]	; 0x830
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   82812:	f50e 6e03 	add.w	lr, lr, #2096	; 0x830
   82816:	f840 700e 	str.w	r7, [r0, lr]
			}
		}
		i++;
   8281a:	3401      	adds	r4, #1
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
   8281c:	42ac      	cmp	r4, r5
   8281e:	d1cc      	bne.n	827ba <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x22>
   82820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82824:	00085520 	.word	0x00085520
   82828:	00082379 	.word	0x00082379
   8282c:	2007ab94 	.word	0x2007ab94
   82830:	0008375d 	.word	0x0008375d

00082834 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   82834:	b508      	push	{r3, lr}
	if (RecorderDataPtr->recorderActive == 0)
   82836:	4b0a      	ldr	r3, [pc, #40]	; (82860 <prvTraceUpdateCounters+0x2c>)
   82838:	681b      	ldr	r3, [r3, #0]
   8283a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8283c:	b17a      	cbz	r2, 8285e <prvTraceUpdateCounters+0x2a>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   8283e:	695a      	ldr	r2, [r3, #20]
   82840:	3201      	adds	r2, #1
   82842:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   82844:	69da      	ldr	r2, [r3, #28]
   82846:	3201      	adds	r2, #1
   82848:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= EVENT_BUFFER_SIZE)
   8284a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   8284e:	d303      	bcc.n	82858 <prvTraceUpdateCounters+0x24>
	{
#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   82850:	2201      	movs	r2, #1
   82852:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   82854:	2200      	movs	r2, #0
   82856:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   82858:	2001      	movs	r0, #1
   8285a:	4b02      	ldr	r3, [pc, #8]	; (82864 <prvTraceUpdateCounters+0x30>)
   8285c:	4798      	blx	r3
   8285e:	bd08      	pop	{r3, pc}
   82860:	2007ab94 	.word	0x2007ab94
   82864:	00082799 	.word	0x00082799

00082868 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   82868:	b530      	push	{r4, r5, lr}
   8286a:	b083      	sub	sp, #12
   8286c:	4604      	mov	r4, r0
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
	uint32_t dts = 0;
	uint32_t timestamp = 0;
   8286e:	2300      	movs	r3, #0
   82870:	9301      	str	r3, [sp, #4]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   82872:	28ff      	cmp	r0, #255	; 0xff
   82874:	d008      	beq.n	82888 <prvTraceGetDTS+0x20>
   82876:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8287a:	4298      	cmp	r0, r3
   8287c:	d004      	beq.n	82888 <prvTraceGetDTS+0x20>
   8287e:	482f      	ldr	r0, [pc, #188]	; (8293c <prvTraceGetDTS+0xd4>)
   82880:	4b2f      	ldr	r3, [pc, #188]	; (82940 <prvTraceGetDTS+0xd8>)
   82882:	4798      	blx	r3
   82884:	2000      	movs	r0, #0
   82886:	e057      	b.n	82938 <prvTraceGetDTS+0xd0>

	if (RecorderDataPtr->frequency == 0 && init_hwtc_count != HWTC_COUNT)
   82888:	4b2e      	ldr	r3, [pc, #184]	; (82944 <prvTraceGetDTS+0xdc>)
   8288a:	681b      	ldr	r3, [r3, #0]
   8288c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   8288e:	b952      	cbnz	r2, 828a6 <prvTraceGetDTS+0x3e>
   82890:	4a2d      	ldr	r2, [pc, #180]	; (82948 <prvTraceGetDTS+0xe0>)
   82892:	6811      	ldr	r1, [r2, #0]
   82894:	4a2d      	ldr	r2, [pc, #180]	; (8294c <prvTraceGetDTS+0xe4>)
   82896:	6812      	ldr	r2, [r2, #0]
   82898:	440a      	add	r2, r1
   8289a:	492d      	ldr	r1, [pc, #180]	; (82950 <prvTraceGetDTS+0xe8>)
   8289c:	6809      	ldr	r1, [r1, #0]
   8289e:	428a      	cmp	r2, r1
#if (SELECTED_PORT == PORT_Win32)
		RecorderDataPtr->frequency = 100000;
#elif (SELECTED_PORT == PORT_HWIndependent)
		RecorderDataPtr->frequency = TRACE_TICK_RATE_HZ;
#else
		RecorderDataPtr->frequency = TRACE_CPU_CLOCK_HZ / HWTC_DIVISOR;//(HWTC_PERIOD * TRACE_TICK_RATE_HZ) / (uint32_t)HWTC_DIVISOR;
   828a0:	bf1c      	itt	ne
   828a2:	4a2c      	ldrne	r2, [pc, #176]	; (82954 <prvTraceGetDTS+0xec>)
   828a4:	625a      	strne	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	vTracePortGetTimeStamp(&timestamp);	
   828a6:	a801      	add	r0, sp, #4
   828a8:	4b2b      	ldr	r3, [pc, #172]	; (82958 <prvTraceGetDTS+0xf0>)
   828aa:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   828ac:	9a01      	ldr	r2, [sp, #4]
   828ae:	4b2b      	ldr	r3, [pc, #172]	; (8295c <prvTraceGetDTS+0xf4>)
   828b0:	6818      	ldr	r0, [r3, #0]
   828b2:	1a15      	subs	r5, r2, r0
	old_timestamp = timestamp;
   828b4:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   828b6:	4b23      	ldr	r3, [pc, #140]	; (82944 <prvTraceGetDTS+0xdc>)
   828b8:	681b      	ldr	r3, [r3, #0]
   828ba:	6a59      	ldr	r1, [r3, #36]	; 0x24
   828bc:	b1d9      	cbz	r1, 828f6 <prvTraceGetDTS+0x8e>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   828be:	428d      	cmp	r5, r1
   828c0:	d90a      	bls.n	828d8 <prvTraceGetDTS+0x70>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   828c2:	fbb5 f2f1 	udiv	r2, r5, r1
   828c6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   828c8:	4410      	add	r0, r2
   828ca:	62d8      	str	r0, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   828cc:	fb01 5112 	mls	r1, r1, r2, r5
   828d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   828d2:	4411      	add	r1, r2
   828d4:	6299      	str	r1, [r3, #40]	; 0x28
   828d6:	e002      	b.n	828de <prvTraceGetDTS+0x76>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   828d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   828da:	442a      	add	r2, r5
   828dc:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   828de:	4b19      	ldr	r3, [pc, #100]	; (82944 <prvTraceGetDTS+0xdc>)
   828e0:	681b      	ldr	r3, [r3, #0]
   828e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   828e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
   828e6:	428a      	cmp	r2, r1
   828e8:	d306      	bcc.n	828f8 <prvTraceGetDTS+0x90>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   828ea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   828ec:	3001      	adds	r0, #1
   828ee:	62d8      	str	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   828f0:	1a52      	subs	r2, r2, r1
   828f2:	629a      	str	r2, [r3, #40]	; 0x28
   828f4:	e000      	b.n	828f8 <prvTraceGetDTS+0x90>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   828f6:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   828f8:	42a5      	cmp	r5, r4
   828fa:	d91b      	bls.n	82934 <prvTraceGetDTS+0xcc>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) xTraceNextFreeEventBufferSlot();
   828fc:	4b18      	ldr	r3, [pc, #96]	; (82960 <prvTraceGetDTS+0xf8>)
   828fe:	4798      	blx	r3

		if (xts != NULL)
   82900:	b1c0      	cbz	r0, 82934 <prvTraceGetDTS+0xcc>
		{
			if (param_maxDTS == 0xFFFF)
   82902:	f64f 72ff 	movw	r2, #65535	; 0xffff
   82906:	4294      	cmp	r4, r2
   82908:	d106      	bne.n	82918 <prvTraceGetDTS+0xb0>
			{
				xts->type = XTS16;
   8290a:	22a9      	movs	r2, #169	; 0xa9
   8290c:	7002      	strb	r2, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   8290e:	0c2a      	lsrs	r2, r5, #16
   82910:	8042      	strh	r2, [r0, #2]
				xts->xts_8 = 0;
   82912:	2200      	movs	r2, #0
   82914:	7042      	strb	r2, [r0, #1]
   82916:	e00b      	b.n	82930 <prvTraceGetDTS+0xc8>
			}
			else if (param_maxDTS == 0xFF)
   82918:	2cff      	cmp	r4, #255	; 0xff
   8291a:	d106      	bne.n	8292a <prvTraceGetDTS+0xc2>
			{
				xts->type = XTS8;
   8291c:	22a8      	movs	r2, #168	; 0xa8
   8291e:	7002      	strb	r2, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   82920:	0a2a      	lsrs	r2, r5, #8
   82922:	8042      	strh	r2, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   82924:	0e2a      	lsrs	r2, r5, #24
   82926:	7042      	strb	r2, [r0, #1]
   82928:	e002      	b.n	82930 <prvTraceGetDTS+0xc8>
			}
			else
			{
				vTraceError("Bad param_maxDTS in prvTraceGetDTS");
   8292a:	480e      	ldr	r0, [pc, #56]	; (82964 <prvTraceGetDTS+0xfc>)
   8292c:	4b04      	ldr	r3, [pc, #16]	; (82940 <prvTraceGetDTS+0xd8>)
   8292e:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   82930:	4b0d      	ldr	r3, [pc, #52]	; (82968 <prvTraceGetDTS+0x100>)
   82932:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   82934:	ea05 0004 	and.w	r0, r5, r4
}
   82938:	b003      	add	sp, #12
   8293a:	bd30      	pop	{r4, r5, pc}
   8293c:	00085578 	.word	0x00085578
   82940:	00082379 	.word	0x00082379
   82944:	2007ab94 	.word	0x2007ab94
   82948:	e0001004 	.word	0xe0001004
   8294c:	2007ac20 	.word	0x2007ac20
   82950:	2007c450 	.word	0x2007c450
   82954:	01406f40 	.word	0x01406f40
   82958:	000829c1 	.word	0x000829c1
   8295c:	2007ab8c 	.word	0x2007ab8c
   82960:	00082539 	.word	0x00082539
   82964:	000855b8 	.word	0x000855b8
   82968:	00082835 	.word	0x00082835

0008296c <prvTraceInitCortexM>:
uint32_t DWT_CYCLES_ADDED = 0; /* Used on ARM Cortex-M only */

#if (SELECTED_PORT == PORT_ARM_CortexM) /* ONLY DWT PORT SHOULD BE HERE */

void prvTraceInitCortexM()
{
   8296c:	b508      	push	{r3, lr}
	/* Make sure DWT is enabled is enabled, if supported */
	REG_DEMCR |= DEMCR_TRCENA;
   8296e:	4b0e      	ldr	r3, [pc, #56]	; (829a8 <prvTraceInitCortexM+0x3c>)
   82970:	681a      	ldr	r2, [r3, #0]
   82972:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   82976:	601a      	str	r2, [r3, #0]

	do{
		/* Verify that DWT is supported */
		if (REG_DEMCR == 0)
   82978:	681b      	ldr	r3, [r3, #0]
   8297a:	b91b      	cbnz	r3, 82984 <prvTraceInitCortexM+0x18>
		{
			vTraceError("DWT not supported by this chip!");
   8297c:	480b      	ldr	r0, [pc, #44]	; (829ac <prvTraceInitCortexM+0x40>)
   8297e:	4b0c      	ldr	r3, [pc, #48]	; (829b0 <prvTraceInitCortexM+0x44>)
   82980:	4798      	blx	r3
			break;
   82982:	bd08      	pop	{r3, pc}
		}

		/* Verify that DWT_CYCCNT is supported */
		if (REG_DWT_CTRL & DWT_CTRL_NOCYCCNT)
   82984:	4b0b      	ldr	r3, [pc, #44]	; (829b4 <prvTraceInitCortexM+0x48>)
   82986:	681b      	ldr	r3, [r3, #0]
   82988:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   8298c:	d003      	beq.n	82996 <prvTraceInitCortexM+0x2a>
		{
			vTraceError("DWT_CYCCNT not supported by this chip!");
   8298e:	480a      	ldr	r0, [pc, #40]	; (829b8 <prvTraceInitCortexM+0x4c>)
   82990:	4b07      	ldr	r3, [pc, #28]	; (829b0 <prvTraceInitCortexM+0x44>)
   82992:	4798      	blx	r3
			break;
   82994:	bd08      	pop	{r3, pc}
		}

		/* Reset the cycle counter */
		REG_DWT_CYCCNT = 0;
   82996:	2200      	movs	r2, #0
   82998:	4b08      	ldr	r3, [pc, #32]	; (829bc <prvTraceInitCortexM+0x50>)
   8299a:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		REG_DWT_CTRL |= DWT_CTRL_CYCCNTENA;
   8299c:	4a05      	ldr	r2, [pc, #20]	; (829b4 <prvTraceInitCortexM+0x48>)
   8299e:	6813      	ldr	r3, [r2, #0]
   829a0:	f043 0301 	orr.w	r3, r3, #1
   829a4:	6013      	str	r3, [r2, #0]
   829a6:	bd08      	pop	{r3, pc}
   829a8:	e000edfc 	.word	0xe000edfc
   829ac:	000857cc 	.word	0x000857cc
   829b0:	00082379 	.word	0x00082379
   829b4:	e0001000 	.word	0xe0001000
   829b8:	000857ec 	.word	0x000857ec
   829bc:	e0001004 	.word	0xe0001004

000829c0 <vTracePortGetTimeStamp>:
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*HWTC_TYPE == HWTC_TYPE_SYSTICK*/

	if (trace_disable_timestamp == 1)
   829c0:	4b11      	ldr	r3, [pc, #68]	; (82a08 <vTracePortGetTimeStamp+0x48>)
   829c2:	681b      	ldr	r3, [r3, #0]
   829c4:	2b01      	cmp	r3, #1
   829c6:	d104      	bne.n	829d2 <vTracePortGetTimeStamp+0x12>
	{
		if (pTimestamp)
   829c8:	b1e0      	cbz	r0, 82a04 <vTracePortGetTimeStamp+0x44>
			*pTimestamp = last_timestamp;
   829ca:	4b10      	ldr	r3, [pc, #64]	; (82a0c <vTracePortGetTimeStamp+0x4c>)
   829cc:	681b      	ldr	r3, [r3, #0]
   829ce:	6003      	str	r3, [r0, #0]
   829d0:	4770      	bx	lr
 * or the trace recorder library. Typically you should not need to change
 * the code of vTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void vTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   829d2:	b410      	push	{r4}
	}

	/* Retrieve HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (HWTC_COUNT_DIRECTION == DIRECTION_INCREMENTING)
	/* Get the increasing tick count */
	hwtc_count = HWTC_COUNT;
   829d4:	4b0e      	ldr	r3, [pc, #56]	; (82a10 <vTracePortGetTimeStamp+0x50>)
   829d6:	681a      	ldr	r2, [r3, #0]
   829d8:	4b0e      	ldr	r3, [pc, #56]	; (82a14 <vTracePortGetTimeStamp+0x54>)
   829da:	681b      	ldr	r3, [r3, #0]
   829dc:	4413      	add	r3, r2
	/* This seemingly unnecessarily complicated code will handle free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will wrap at (2^32 / HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that went missing when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
   829de:	4a0e      	ldr	r2, [pc, #56]	; (82a18 <vTracePortGetTimeStamp+0x58>)
   829e0:	6812      	ldr	r2, [r2, #0]
   829e2:	1a99      	subs	r1, r3, r2
   829e4:	4c0d      	ldr	r4, [pc, #52]	; (82a1c <vTracePortGetTimeStamp+0x5c>)
   829e6:	6822      	ldr	r2, [r4, #0]
   829e8:	440a      	add	r2, r1
	
	/* Scale down the diff */
    diff_scaled = diff / HWTC_DIVISOR;
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
    last_hwtc_rest = diff % HWTC_DIVISOR;
   829ea:	f002 0103 	and.w	r1, r2, #3
   829ee:	6021      	str	r1, [r4, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
   829f0:	4c06      	ldr	r4, [pc, #24]	; (82a0c <vTracePortGetTimeStamp+0x4c>)
   829f2:	6821      	ldr	r1, [r4, #0]
   829f4:	eb01 0292 	add.w	r2, r1, r2, lsr #2
   829f8:	6022      	str	r2, [r4, #0]
#endif /*HWTC_TYPE == HWTC_TYPE_SYSTICK*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   829fa:	b100      	cbz	r0, 829fe <vTracePortGetTimeStamp+0x3e>
		*pTimestamp = last_timestamp;
   829fc:	6002      	str	r2, [r0, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   829fe:	4a06      	ldr	r2, [pc, #24]	; (82a18 <vTracePortGetTimeStamp+0x58>)
   82a00:	6013      	str	r3, [r2, #0]
}
   82a02:	bc10      	pop	{r4}
   82a04:	4770      	bx	lr
   82a06:	bf00      	nop
   82a08:	2007ac18 	.word	0x2007ac18
   82a0c:	2007ac1c 	.word	0x2007ac1c
   82a10:	e0001004 	.word	0xe0001004
   82a14:	2007ac20 	.word	0x2007ac20
   82a18:	2007ac14 	.word	0x2007ac14
   82a1c:	2007ac24 	.word	0x2007ac24

00082a20 <prvTraceGetParam>:
 * Used for storing extra bytes for kernel calls with numeric parameters.
 *
 * May only be called within a critical section!
 ******************************************************************************/
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   82a20:	b538      	push	{r3, r4, r5, lr}
   82a22:	4605      	mov	r5, r0
   82a24:	460c      	mov	r4, r1
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   82a26:	28ff      	cmp	r0, #255	; 0xff
   82a28:	d008      	beq.n	82a3c <prvTraceGetParam+0x1c>
   82a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   82a2e:	4298      	cmp	r0, r3
   82a30:	d004      	beq.n	82a3c <prvTraceGetParam+0x1c>
   82a32:	480c      	ldr	r0, [pc, #48]	; (82a64 <prvTraceGetParam+0x44>)
   82a34:	4b0c      	ldr	r3, [pc, #48]	; (82a68 <prvTraceGetParam+0x48>)
   82a36:	4798      	blx	r3
   82a38:	4620      	mov	r0, r4
   82a3a:	bd38      	pop	{r3, r4, r5, pc}
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   82a3c:	42a5      	cmp	r5, r4
   82a3e:	d20f      	bcs.n	82a60 <prvTraceGetParam+0x40>
	{
		return param;
	}
	else
	{
		xps = (XPSEvent*) xTraceNextFreeEventBufferSlot();
   82a40:	4b0a      	ldr	r3, [pc, #40]	; (82a6c <prvTraceGetParam+0x4c>)
   82a42:	4798      	blx	r3
		if (xps != NULL)
   82a44:	b148      	cbz	r0, 82a5a <prvTraceGetParam+0x3a>
		{
			xps->type = DIV_XPS;
   82a46:	2301      	movs	r3, #1
   82a48:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (param & (0xFF00 & ~param_max)) >> 8;
   82a4a:	ea24 0305 	bic.w	r3, r4, r5
   82a4e:	0a19      	lsrs	r1, r3, #8
   82a50:	7041      	strb	r1, [r0, #1]
			xps->xps_16 = (param & (0xFFFF0000 & ~param_max)) >> 16;
   82a52:	0c1b      	lsrs	r3, r3, #16
   82a54:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
   82a56:	4b06      	ldr	r3, [pc, #24]	; (82a70 <prvTraceGetParam+0x50>)
   82a58:	4798      	blx	r3
		}

		return param & param_max;
   82a5a:	ea05 0004 	and.w	r0, r5, r4
   82a5e:	bd38      	pop	{r3, r4, r5, pc}
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
	{
		return param;
   82a60:	4620      	mov	r0, r4
			prvTraceUpdateCounters();
		}

		return param & param_max;
	}
}
   82a62:	bd38      	pop	{r3, r4, r5, pc}
   82a64:	00085814 	.word	0x00085814
   82a68:	00082379 	.word	0x00082379
   82a6c:	00082539 	.word	0x00082539
   82a70:	00082835 	.word	0x00082835

00082a74 <vTraceStoreTaskReady>:
	TREvent* tr;
	uint8_t hnd8;

	TRACE_SR_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   82a74:	2800      	cmp	r0, #0
   82a76:	d040      	beq.n	82afa <vTraceStoreTaskReady+0x86>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   82a78:	4a20      	ldr	r2, [pc, #128]	; (82afc <vTraceStoreTaskReady+0x88>)
   82a7a:	6812      	ldr	r2, [r2, #0]
   82a7c:	2a00      	cmp	r2, #0
   82a7e:	d03c      	beq.n	82afa <vTraceStoreTaskReady+0x86>
 * vTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void vTraceStoreTaskReady(objectHandleType handle)
{
   82a80:	b570      	push	{r4, r5, r6, lr}
   82a82:	4604      	mov	r4, r0
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= NTask, "vTraceStoreTaskReady: Invalid value for handle", );
   82a84:	280f      	cmp	r0, #15
   82a86:	d903      	bls.n	82a90 <vTraceStoreTaskReady+0x1c>
   82a88:	481d      	ldr	r0, [pc, #116]	; (82b00 <vTraceStoreTaskReady+0x8c>)
   82a8a:	4b1e      	ldr	r3, [pc, #120]	; (82b04 <vTraceStoreTaskReady+0x90>)
   82a8c:	4798      	blx	r3
   82a8e:	bd70      	pop	{r4, r5, r6, pc}

	if (recorder_busy)
   82a90:	4b1d      	ldr	r3, [pc, #116]	; (82b08 <vTraceStoreTaskReady+0x94>)
   82a92:	681b      	ldr	r3, [r3, #0]
   82a94:	b11b      	cbz	r3, 82a9e <vTraceStoreTaskReady+0x2a>
	 * This should never occur, as the tick- and kernel call ISR is on lowest
	 * interrupt priority and always are disabled during the critical sections
	 * of the recorder.
	 ***********************************************************************/

	 vTraceError("Recorder busy - high priority ISR using syscall? (1)");
   82a96:	481d      	ldr	r0, [pc, #116]	; (82b0c <vTraceStoreTaskReady+0x98>)
   82a98:	4b1a      	ldr	r3, [pc, #104]	; (82b04 <vTraceStoreTaskReady+0x90>)
   82a9a:	4798      	blx	r3
	 return;
   82a9c:	bd70      	pop	{r4, r5, r6, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82a9e:	f3ef 8510 	mrs	r5, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   82aa2:	2301      	movs	r3, #1
   82aa4:	f383 8810 	msr	PRIMASK, r3
	}

	trcCRITICAL_SECTION_BEGIN();
   82aa8:	4a17      	ldr	r2, [pc, #92]	; (82b08 <vTraceStoreTaskReady+0x94>)
   82aaa:	6813      	ldr	r3, [r2, #0]
   82aac:	3301      	adds	r3, #1
   82aae:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   82ab0:	4b17      	ldr	r3, [pc, #92]	; (82b10 <vTraceStoreTaskReady+0x9c>)
   82ab2:	681b      	ldr	r3, [r3, #0]
   82ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82ab6:	b1cb      	cbz	r3, 82aec <vTraceStoreTaskReady+0x78>
	{
		if (!TRACE_GET_TASK_FLAG_ISEXCLUDED(handle))
   82ab8:	f100 0321 	add.w	r3, r0, #33	; 0x21
   82abc:	10da      	asrs	r2, r3, #3
   82abe:	4915      	ldr	r1, [pc, #84]	; (82b14 <vTraceStoreTaskReady+0xa0>)
   82ac0:	5c8a      	ldrb	r2, [r1, r2]
   82ac2:	f003 0307 	and.w	r3, r3, #7
   82ac6:	fa42 f303 	asr.w	r3, r2, r3
   82aca:	f013 0f01 	tst.w	r3, #1
   82ace:	d10d      	bne.n	82aec <vTraceStoreTaskReady+0x78>
		{
			dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   82ad0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82ad4:	4b10      	ldr	r3, [pc, #64]	; (82b18 <vTraceStoreTaskReady+0xa4>)
   82ad6:	4798      	blx	r3
   82ad8:	4606      	mov	r6, r0
			hnd8 = prvTraceGet8BitHandle(handle);
			tr = (TREvent*)xTraceNextFreeEventBufferSlot();
   82ada:	4b10      	ldr	r3, [pc, #64]	; (82b1c <vTraceStoreTaskReady+0xa8>)
   82adc:	4798      	blx	r3
			if (tr != NULL)
   82ade:	b128      	cbz	r0, 82aec <vTraceStoreTaskReady+0x78>
			{
				tr->type = DIV_TASK_READY;
   82ae0:	2202      	movs	r2, #2
   82ae2:	7002      	strb	r2, [r0, #0]
				tr->dts = dts3;
   82ae4:	8046      	strh	r6, [r0, #2]
				tr->objHandle = hnd8;
   82ae6:	7044      	strb	r4, [r0, #1]
				prvTraceUpdateCounters();
   82ae8:	4b0d      	ldr	r3, [pc, #52]	; (82b20 <vTraceStoreTaskReady+0xac>)
   82aea:	4798      	blx	r3
			}
		}
	}
	trcCRITICAL_SECTION_END();
   82aec:	4a06      	ldr	r2, [pc, #24]	; (82b08 <vTraceStoreTaskReady+0x94>)
   82aee:	6813      	ldr	r3, [r2, #0]
   82af0:	3b01      	subs	r3, #1
   82af2:	6013      	str	r3, [r2, #0]
   82af4:	f385 8810 	msr	PRIMASK, r5
   82af8:	bd70      	pop	{r4, r5, r6, pc}
   82afa:	4770      	bx	lr
   82afc:	2007013c 	.word	0x2007013c
   82b00:	00085850 	.word	0x00085850
   82b04:	00082379 	.word	0x00082379
   82b08:	2007ab90 	.word	0x2007ab90
   82b0c:	00085890 	.word	0x00085890
   82b10:	2007ab94 	.word	0x2007ab94
   82b14:	2007ac08 	.word	0x2007ac08
   82b18:	00082869 	.word	0x00082869
   82b1c:	00082539 	.word	0x00082539
   82b20:	00082835 	.word	0x00082835

00082b24 <vTraceStoreKernelCall>:
 *
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
void vTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   82b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82b26:	4604      	mov	r4, r0
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "vTraceStoreKernelCall: ecode >= 0xFF", );
   82b28:	28fe      	cmp	r0, #254	; 0xfe
   82b2a:	d903      	bls.n	82b34 <vTraceStoreKernelCall+0x10>
   82b2c:	482b      	ldr	r0, [pc, #172]	; (82bdc <vTraceStoreKernelCall+0xb8>)
   82b2e:	4b2c      	ldr	r3, [pc, #176]	; (82be0 <vTraceStoreKernelCall+0xbc>)
   82b30:	4798      	blx	r3
   82b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82b34:	4608      	mov	r0, r1
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "vTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", );
   82b36:	2906      	cmp	r1, #6
   82b38:	d903      	bls.n	82b42 <vTraceStoreKernelCall+0x1e>
   82b3a:	482a      	ldr	r0, [pc, #168]	; (82be4 <vTraceStoreKernelCall+0xc0>)
   82b3c:	4b28      	ldr	r3, [pc, #160]	; (82be0 <vTraceStoreKernelCall+0xbc>)
   82b3e:	4798      	blx	r3
   82b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "vTraceStoreKernelCall: Invalid value for objectNumber", );
   82b42:	4b29      	ldr	r3, [pc, #164]	; (82be8 <vTraceStoreKernelCall+0xc4>)
   82b44:	681b      	ldr	r3, [r3, #0]
   82b46:	440b      	add	r3, r1
   82b48:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82b4c:	4293      	cmp	r3, r2
   82b4e:	d203      	bcs.n	82b58 <vTraceStoreKernelCall+0x34>
   82b50:	4826      	ldr	r0, [pc, #152]	; (82bec <vTraceStoreKernelCall+0xc8>)
   82b52:	4b23      	ldr	r3, [pc, #140]	; (82be0 <vTraceStoreKernelCall+0xbc>)
   82b54:	4798      	blx	r3
   82b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	if (recorder_busy)
   82b58:	4b25      	ldr	r3, [pc, #148]	; (82bf0 <vTraceStoreKernelCall+0xcc>)
   82b5a:	681b      	ldr	r3, [r3, #0]
   82b5c:	b11b      	cbz	r3, 82b66 <vTraceStoreKernelCall+0x42>
		* or creates a user event.
		* Only ISRs that are disabled by TRACE_ENTER_CRITICAL_SECTION may use system calls
		* or user events (see TRACE_MAX_SYSCALL_INTERRUPT_PRIORITY).
		*************************************************************************/

		vTraceError("Recorder busy - high priority ISR using syscall? (2)");
   82b5e:	4825      	ldr	r0, [pc, #148]	; (82bf4 <vTraceStoreKernelCall+0xd0>)
   82b60:	4b1f      	ldr	r3, [pc, #124]	; (82be0 <vTraceStoreKernelCall+0xbc>)
   82b62:	4798      	blx	r3
		return;
   82b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (handle_of_last_logged_task == 0)
   82b66:	4b24      	ldr	r3, [pc, #144]	; (82bf8 <vTraceStoreKernelCall+0xd4>)
   82b68:	781b      	ldrb	r3, [r3, #0]
   82b6a:	2b00      	cmp	r3, #0
   82b6c:	d034      	beq.n	82bd8 <vTraceStoreKernelCall+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82b6e:	f3ef 8510 	mrs	r5, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   82b72:	2301      	movs	r3, #1
   82b74:	f383 8810 	msr	PRIMASK, r3
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   82b78:	491d      	ldr	r1, [pc, #116]	; (82bf0 <vTraceStoreKernelCall+0xcc>)
   82b7a:	680b      	ldr	r3, [r1, #0]
   82b7c:	3301      	adds	r3, #1
   82b7e:	600b      	str	r3, [r1, #0]
	if (RecorderDataPtr->recorderActive)
   82b80:	4b19      	ldr	r3, [pc, #100]	; (82be8 <vTraceStoreKernelCall+0xc4>)
   82b82:	681b      	ldr	r3, [r3, #0]
   82b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82b86:	b30b      	cbz	r3, 82bcc <vTraceStoreKernelCall+0xa8>
	{
		/* If it is an ISR or NOT an excluded task, this kernel call will be stored in the trace */
		if (nISRactive || !inExcludedTask)
   82b88:	4b1c      	ldr	r3, [pc, #112]	; (82bfc <vTraceStoreKernelCall+0xd8>)
   82b8a:	f993 3000 	ldrsb.w	r3, [r3]
   82b8e:	b913      	cbnz	r3, 82b96 <vTraceStoreKernelCall+0x72>
   82b90:	4b1b      	ldr	r3, [pc, #108]	; (82c00 <vTraceStoreKernelCall+0xdc>)
   82b92:	781b      	ldrb	r3, [r3, #0]
   82b94:	b9d3      	cbnz	r3, 82bcc <vTraceStoreKernelCall+0xa8>
		{
			/* Check if the referenced object or the event code is excluded */
			if (!uiTraceIsObjectExcluded(objectClass, (objectHandleType)objectNumber) && !TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(ecode))
   82b96:	b2d6      	uxtb	r6, r2
   82b98:	4631      	mov	r1, r6
   82b9a:	4b1a      	ldr	r3, [pc, #104]	; (82c04 <vTraceStoreKernelCall+0xe0>)
   82b9c:	4798      	blx	r3
   82b9e:	b9a8      	cbnz	r0, 82bcc <vTraceStoreKernelCall+0xa8>
   82ba0:	08e3      	lsrs	r3, r4, #3
   82ba2:	4a19      	ldr	r2, [pc, #100]	; (82c08 <vTraceStoreKernelCall+0xe4>)
   82ba4:	5cd3      	ldrb	r3, [r2, r3]
   82ba6:	f004 0207 	and.w	r2, r4, #7
   82baa:	4113      	asrs	r3, r2
   82bac:	f013 0f01 	tst.w	r3, #1
   82bb0:	d10c      	bne.n	82bcc <vTraceStoreKernelCall+0xa8>
			{
				dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   82bb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82bb6:	4b15      	ldr	r3, [pc, #84]	; (82c0c <vTraceStoreKernelCall+0xe8>)
   82bb8:	4798      	blx	r3
   82bba:	4607      	mov	r7, r0
				hnd8 = prvTraceGet8BitHandle(objectNumber);
				kse = (KernelCall*) xTraceNextFreeEventBufferSlot();
   82bbc:	4b14      	ldr	r3, [pc, #80]	; (82c10 <vTraceStoreKernelCall+0xec>)
   82bbe:	4798      	blx	r3
				if (kse != NULL)
   82bc0:	b120      	cbz	r0, 82bcc <vTraceStoreKernelCall+0xa8>
				{
					kse->dts = dts1;
   82bc2:	8047      	strh	r7, [r0, #2]
					kse->type = (uint8_t)ecode;
   82bc4:	7004      	strb	r4, [r0, #0]
					kse->objHandle = hnd8;
   82bc6:	7046      	strb	r6, [r0, #1]
					prvTraceUpdateCounters();
   82bc8:	4b12      	ldr	r3, [pc, #72]	; (82c14 <vTraceStoreKernelCall+0xf0>)
   82bca:	4798      	blx	r3
				}
			}
		}
	}
	trcCRITICAL_SECTION_END();
   82bcc:	4a08      	ldr	r2, [pc, #32]	; (82bf0 <vTraceStoreKernelCall+0xcc>)
   82bce:	6813      	ldr	r3, [r2, #0]
   82bd0:	3b01      	subs	r3, #1
   82bd2:	6013      	str	r3, [r2, #0]
   82bd4:	f385 8810 	msr	PRIMASK, r5
   82bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82bda:	bf00      	nop
   82bdc:	00085900 	.word	0x00085900
   82be0:	00082379 	.word	0x00082379
   82be4:	00085934 	.word	0x00085934
   82be8:	2007ab94 	.word	0x2007ab94
   82bec:	00085978 	.word	0x00085978
   82bf0:	2007ab90 	.word	0x2007ab90
   82bf4:	000859bc 	.word	0x000859bc
   82bf8:	2007ac29 	.word	0x2007ac29
   82bfc:	2007ac2a 	.word	0x2007ac2a
   82c00:	2007ac28 	.word	0x2007ac28
   82c04:	000831f5 	.word	0x000831f5
   82c08:	2007ab64 	.word	0x2007ab64
   82c0c:	00082869 	.word	0x00082869
   82c10:	00082539 	.word	0x00082539
   82c14:	00082835 	.word	0x00082835

00082c18 <vTraceStoreKernelCallWithParam>:
 ******************************************************************************/
void vTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   82c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82c1c:	4604      	mov	r4, r0
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "vTraceStoreKernelCall: evtcode >= 0xFF", );
   82c1e:	28fe      	cmp	r0, #254	; 0xfe
   82c20:	d904      	bls.n	82c2c <vTraceStoreKernelCallWithParam+0x14>
   82c22:	4831      	ldr	r0, [pc, #196]	; (82ce8 <vTraceStoreKernelCallWithParam+0xd0>)
   82c24:	4b31      	ldr	r3, [pc, #196]	; (82cec <vTraceStoreKernelCallWithParam+0xd4>)
   82c26:	4798      	blx	r3
   82c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82c2c:	4608      	mov	r0, r1
   82c2e:	461d      	mov	r5, r3
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "vTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", );
   82c30:	2906      	cmp	r1, #6
   82c32:	d904      	bls.n	82c3e <vTraceStoreKernelCallWithParam+0x26>
   82c34:	482e      	ldr	r0, [pc, #184]	; (82cf0 <vTraceStoreKernelCallWithParam+0xd8>)
   82c36:	4b2d      	ldr	r3, [pc, #180]	; (82cec <vTraceStoreKernelCallWithParam+0xd4>)
   82c38:	4798      	blx	r3
   82c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "vTraceStoreKernelCallWithParam: Invalid value for objectNumber", );
   82c3e:	4b2d      	ldr	r3, [pc, #180]	; (82cf4 <vTraceStoreKernelCallWithParam+0xdc>)
   82c40:	681b      	ldr	r3, [r3, #0]
   82c42:	440b      	add	r3, r1
   82c44:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82c48:	4293      	cmp	r3, r2
   82c4a:	d204      	bcs.n	82c56 <vTraceStoreKernelCallWithParam+0x3e>
   82c4c:	482a      	ldr	r0, [pc, #168]	; (82cf8 <vTraceStoreKernelCallWithParam+0xe0>)
   82c4e:	4b27      	ldr	r3, [pc, #156]	; (82cec <vTraceStoreKernelCallWithParam+0xd4>)
   82c50:	4798      	blx	r3
   82c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (recorder_busy)
   82c56:	4b29      	ldr	r3, [pc, #164]	; (82cfc <vTraceStoreKernelCallWithParam+0xe4>)
   82c58:	681b      	ldr	r3, [r3, #0]
   82c5a:	b123      	cbz	r3, 82c66 <vTraceStoreKernelCallWithParam+0x4e>
		* or creates a user event.
		* Only ISRs that are disabled by TRACE_ENTER_CRITICAL_SECTION may use system calls
		* or user events (see TRACE_MAX_SYSCALL_INTERRUPT_PRIORITY).
		*************************************************************************/

		vTraceError("Recorder busy - high priority ISR using syscall? (3)");
   82c5c:	4828      	ldr	r0, [pc, #160]	; (82d00 <vTraceStoreKernelCallWithParam+0xe8>)
   82c5e:	4b23      	ldr	r3, [pc, #140]	; (82cec <vTraceStoreKernelCallWithParam+0xd4>)
   82c60:	4798      	blx	r3
		return;
   82c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82c66:	f3ef 8610 	mrs	r6, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   82c6a:	2301      	movs	r3, #1
   82c6c:	f383 8810 	msr	PRIMASK, r3
	}

	trcCRITICAL_SECTION_BEGIN();
   82c70:	4922      	ldr	r1, [pc, #136]	; (82cfc <vTraceStoreKernelCallWithParam+0xe4>)
   82c72:	680b      	ldr	r3, [r1, #0]
   82c74:	3301      	adds	r3, #1
   82c76:	600b      	str	r3, [r1, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task && (! inExcludedTask || nISRactive))
   82c78:	4b1e      	ldr	r3, [pc, #120]	; (82cf4 <vTraceStoreKernelCallWithParam+0xdc>)
   82c7a:	681b      	ldr	r3, [r3, #0]
   82c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82c7e:	b353      	cbz	r3, 82cd6 <vTraceStoreKernelCallWithParam+0xbe>
   82c80:	4b20      	ldr	r3, [pc, #128]	; (82d04 <vTraceStoreKernelCallWithParam+0xec>)
   82c82:	781b      	ldrb	r3, [r3, #0]
   82c84:	b33b      	cbz	r3, 82cd6 <vTraceStoreKernelCallWithParam+0xbe>
   82c86:	4b20      	ldr	r3, [pc, #128]	; (82d08 <vTraceStoreKernelCallWithParam+0xf0>)
   82c88:	781b      	ldrb	r3, [r3, #0]
   82c8a:	b11b      	cbz	r3, 82c94 <vTraceStoreKernelCallWithParam+0x7c>
   82c8c:	4b1f      	ldr	r3, [pc, #124]	; (82d0c <vTraceStoreKernelCallWithParam+0xf4>)
   82c8e:	f993 3000 	ldrsb.w	r3, [r3]
   82c92:	b303      	cbz	r3, 82cd6 <vTraceStoreKernelCallWithParam+0xbe>
	{
		/* Check if the referenced object or the event code is excluded */
		if (!uiTraceIsObjectExcluded(objectClass, (objectHandleType)objectNumber) &&
   82c94:	b2d7      	uxtb	r7, r2
   82c96:	4639      	mov	r1, r7
   82c98:	4b1d      	ldr	r3, [pc, #116]	; (82d10 <vTraceStoreKernelCallWithParam+0xf8>)
   82c9a:	4798      	blx	r3
   82c9c:	b9d8      	cbnz	r0, 82cd6 <vTraceStoreKernelCallWithParam+0xbe>
			!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
   82c9e:	08e3      	lsrs	r3, r4, #3

	trcCRITICAL_SECTION_BEGIN();
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task && (! inExcludedTask || nISRactive))
	{
		/* Check if the referenced object or the event code is excluded */
		if (!uiTraceIsObjectExcluded(objectClass, (objectHandleType)objectNumber) &&
   82ca0:	4a1c      	ldr	r2, [pc, #112]	; (82d14 <vTraceStoreKernelCallWithParam+0xfc>)
   82ca2:	5cd3      	ldrb	r3, [r2, r3]
   82ca4:	f004 0207 	and.w	r2, r4, #7
   82ca8:	4113      	asrs	r3, r2
   82caa:	f013 0f01 	tst.w	r3, #1
   82cae:	d112      	bne.n	82cd6 <vTraceStoreKernelCallWithParam+0xbe>
			!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
		{
			dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   82cb0:	20ff      	movs	r0, #255	; 0xff
   82cb2:	4b19      	ldr	r3, [pc, #100]	; (82d18 <vTraceStoreKernelCallWithParam+0x100>)
   82cb4:	4798      	blx	r3
   82cb6:	4680      	mov	r8, r0
			p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   82cb8:	4629      	mov	r1, r5
   82cba:	20ff      	movs	r0, #255	; 0xff
   82cbc:	4b17      	ldr	r3, [pc, #92]	; (82d1c <vTraceStoreKernelCallWithParam+0x104>)
   82cbe:	4798      	blx	r3
   82cc0:	4605      	mov	r5, r0
			hnd8 = prvTraceGet8BitHandle((objectHandleType)objectNumber);
			kse = (KernelCallWithParamAndHandle*) xTraceNextFreeEventBufferSlot();
   82cc2:	4b17      	ldr	r3, [pc, #92]	; (82d20 <vTraceStoreKernelCallWithParam+0x108>)
   82cc4:	4798      	blx	r3
			if (kse != NULL)
   82cc6:	b130      	cbz	r0, 82cd6 <vTraceStoreKernelCallWithParam+0xbe>
			{
				kse->dts = dts2;
   82cc8:	f880 8003 	strb.w	r8, [r0, #3]
				kse->type = (uint8_t)evtcode;
   82ccc:	7004      	strb	r4, [r0, #0]
				kse->objHandle = hnd8;
   82cce:	7047      	strb	r7, [r0, #1]
				kse->param = p8;
   82cd0:	7085      	strb	r5, [r0, #2]
				prvTraceUpdateCounters();
   82cd2:	4b14      	ldr	r3, [pc, #80]	; (82d24 <vTraceStoreKernelCallWithParam+0x10c>)
   82cd4:	4798      	blx	r3
			}
		}
	}
	trcCRITICAL_SECTION_END();
   82cd6:	4a09      	ldr	r2, [pc, #36]	; (82cfc <vTraceStoreKernelCallWithParam+0xe4>)
   82cd8:	6813      	ldr	r3, [r2, #0]
   82cda:	3b01      	subs	r3, #1
   82cdc:	6013      	str	r3, [r2, #0]
   82cde:	f386 8810 	msr	PRIMASK, r6
   82ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ce6:	bf00      	nop
   82ce8:	000859f4 	.word	0x000859f4
   82cec:	00082379 	.word	0x00082379
   82cf0:	00085a2c 	.word	0x00085a2c
   82cf4:	2007ab94 	.word	0x2007ab94
   82cf8:	00085a78 	.word	0x00085a78
   82cfc:	2007ab90 	.word	0x2007ab90
   82d00:	00085ac8 	.word	0x00085ac8
   82d04:	2007ac29 	.word	0x2007ac29
   82d08:	2007ac28 	.word	0x2007ac28
   82d0c:	2007ac2a 	.word	0x2007ac2a
   82d10:	000831f5 	.word	0x000831f5
   82d14:	2007ab64 	.word	0x2007ab64
   82d18:	00082869 	.word	0x00082869
   82d1c:	00082a21 	.word	0x00082a21
   82d20:	00082539 	.word	0x00082539
   82d24:	00082835 	.word	0x00082835

00082d28 <vTraceStoreKernelCallWithNumericParamOnly>:
 *
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
void vTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   82d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t restParam;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	restParam = 0;

	TRACE_ASSERT(evtcode < 0xFF,
   82d2a:	28fe      	cmp	r0, #254	; 0xfe
   82d2c:	d903      	bls.n	82d36 <vTraceStoreKernelCallWithNumericParamOnly+0xe>
   82d2e:	4823      	ldr	r0, [pc, #140]	; (82dbc <vTraceStoreKernelCallWithNumericParamOnly+0x94>)
   82d30:	4b23      	ldr	r3, [pc, #140]	; (82dc0 <vTraceStoreKernelCallWithNumericParamOnly+0x98>)
   82d32:	4798      	blx	r3
   82d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d36:	4604      	mov	r4, r0
   82d38:	460e      	mov	r6, r1
		"vTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", );

	if (recorder_busy)
   82d3a:	4b22      	ldr	r3, [pc, #136]	; (82dc4 <vTraceStoreKernelCallWithNumericParamOnly+0x9c>)
   82d3c:	681b      	ldr	r3, [r3, #0]
   82d3e:	b11b      	cbz	r3, 82d48 <vTraceStoreKernelCallWithNumericParamOnly+0x20>
		* or creates a user event.
		* Only ISRs that are disabled by TRACE_ENTER_CRITICAL_SECTION may use system calls
		* or user events (see TRACE_MAX_SYSCALL_INTERRUPT_PRIORITY).
		*************************************************************************/

		vTraceError("Recorder busy - high priority ISR using syscall? (4)");
   82d40:	4821      	ldr	r0, [pc, #132]	; (82dc8 <vTraceStoreKernelCallWithNumericParamOnly+0xa0>)
   82d42:	4b1f      	ldr	r3, [pc, #124]	; (82dc0 <vTraceStoreKernelCallWithNumericParamOnly+0x98>)
   82d44:	4798      	blx	r3
		return;
   82d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82d48:	f3ef 8510 	mrs	r5, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   82d4c:	2301      	movs	r3, #1
   82d4e:	f383 8810 	msr	PRIMASK, r3
	}

	trcCRITICAL_SECTION_BEGIN();
   82d52:	4a1c      	ldr	r2, [pc, #112]	; (82dc4 <vTraceStoreKernelCallWithNumericParamOnly+0x9c>)
   82d54:	6813      	ldr	r3, [r2, #0]
   82d56:	3301      	adds	r3, #1
   82d58:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task
   82d5a:	4b1c      	ldr	r3, [pc, #112]	; (82dcc <vTraceStoreKernelCallWithNumericParamOnly+0xa4>)
   82d5c:	681b      	ldr	r3, [r3, #0]
   82d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82d60:	b323      	cbz	r3, 82dac <vTraceStoreKernelCallWithNumericParamOnly+0x84>
   82d62:	4b1b      	ldr	r3, [pc, #108]	; (82dd0 <vTraceStoreKernelCallWithNumericParamOnly+0xa8>)
   82d64:	781b      	ldrb	r3, [r3, #0]
   82d66:	b30b      	cbz	r3, 82dac <vTraceStoreKernelCallWithNumericParamOnly+0x84>
		&& (! inExcludedTask || nISRactive))
   82d68:	4b1a      	ldr	r3, [pc, #104]	; (82dd4 <vTraceStoreKernelCallWithNumericParamOnly+0xac>)
   82d6a:	781b      	ldrb	r3, [r3, #0]
   82d6c:	b11b      	cbz	r3, 82d76 <vTraceStoreKernelCallWithNumericParamOnly+0x4e>
   82d6e:	4b1a      	ldr	r3, [pc, #104]	; (82dd8 <vTraceStoreKernelCallWithNumericParamOnly+0xb0>)
   82d70:	f993 3000 	ldrsb.w	r3, [r3]
   82d74:	b1d3      	cbz	r3, 82dac <vTraceStoreKernelCallWithNumericParamOnly+0x84>
	{
		/* Check if the event code is excluded */
		if (!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
   82d76:	08e3      	lsrs	r3, r4, #3
   82d78:	4a18      	ldr	r2, [pc, #96]	; (82ddc <vTraceStoreKernelCallWithNumericParamOnly+0xb4>)
   82d7a:	5cd3      	ldrb	r3, [r2, r3]
   82d7c:	f004 0207 	and.w	r2, r4, #7
   82d80:	4113      	asrs	r3, r2
   82d82:	f013 0f01 	tst.w	r3, #1
   82d86:	d111      	bne.n	82dac <vTraceStoreKernelCallWithNumericParamOnly+0x84>
		{
			dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   82d88:	20ff      	movs	r0, #255	; 0xff
   82d8a:	4b15      	ldr	r3, [pc, #84]	; (82de0 <vTraceStoreKernelCallWithNumericParamOnly+0xb8>)
   82d8c:	4798      	blx	r3
   82d8e:	4607      	mov	r7, r0
			restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   82d90:	4631      	mov	r1, r6
   82d92:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82d96:	4b13      	ldr	r3, [pc, #76]	; (82de4 <vTraceStoreKernelCallWithNumericParamOnly+0xbc>)
   82d98:	4798      	blx	r3
   82d9a:	4606      	mov	r6, r0
			kse = (KernelCallWithParam16*) xTraceNextFreeEventBufferSlot();
   82d9c:	4b12      	ldr	r3, [pc, #72]	; (82de8 <vTraceStoreKernelCallWithNumericParamOnly+0xc0>)
   82d9e:	4798      	blx	r3
			if (kse != NULL)
   82da0:	b120      	cbz	r0, 82dac <vTraceStoreKernelCallWithNumericParamOnly+0x84>
			{
				kse->dts = dts6;
   82da2:	7047      	strb	r7, [r0, #1]
				kse->type = (uint8_t)evtcode;
   82da4:	7004      	strb	r4, [r0, #0]
				kse->param = restParam;
   82da6:	8046      	strh	r6, [r0, #2]
				prvTraceUpdateCounters();
   82da8:	4b10      	ldr	r3, [pc, #64]	; (82dec <vTraceStoreKernelCallWithNumericParamOnly+0xc4>)
   82daa:	4798      	blx	r3
			}
		}
	}
	trcCRITICAL_SECTION_END();
   82dac:	4a05      	ldr	r2, [pc, #20]	; (82dc4 <vTraceStoreKernelCallWithNumericParamOnly+0x9c>)
   82dae:	6813      	ldr	r3, [r2, #0]
   82db0:	3b01      	subs	r3, #1
   82db2:	6013      	str	r3, [r2, #0]
   82db4:	f385 8810 	msr	PRIMASK, r5
   82db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82dba:	bf00      	nop
   82dbc:	00085b00 	.word	0x00085b00
   82dc0:	00082379 	.word	0x00082379
   82dc4:	2007ab90 	.word	0x2007ab90
   82dc8:	00085b54 	.word	0x00085b54
   82dcc:	2007ab94 	.word	0x2007ab94
   82dd0:	2007ac29 	.word	0x2007ac29
   82dd4:	2007ac28 	.word	0x2007ac28
   82dd8:	2007ac2a 	.word	0x2007ac2a
   82ddc:	2007ab64 	.word	0x2007ab64
   82de0:	00082869 	.word	0x00082869
   82de4:	00082a21 	.word	0x00082a21
   82de8:	00082539 	.word	0x00082539
   82dec:	00082835 	.word	0x00082835

00082df0 <vTraceSetPriorityProperty>:
	}
}
#endif

void vTraceSetPriorityProperty(uint8_t objectclass, objectHandleType id, uint8_t value)
{
   82df0:	b538      	push	{r3, r4, r5, lr}
   82df2:	4604      	mov	r4, r0
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   82df4:	2806      	cmp	r0, #6
   82df6:	d903      	bls.n	82e00 <vTraceSetPriorityProperty+0x10>
   82df8:	480e      	ldr	r0, [pc, #56]	; (82e34 <vTraceSetPriorityProperty+0x44>)
   82dfa:	4b0f      	ldr	r3, [pc, #60]	; (82e38 <vTraceSetPriorityProperty+0x48>)
   82dfc:	4798      	blx	r3
   82dfe:	bd38      	pop	{r3, r4, r5, pc}
   82e00:	4608      	mov	r0, r1
   82e02:	4615      	mov	r5, r2
		"vTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   82e04:	4b0d      	ldr	r3, [pc, #52]	; (82e3c <vTraceSetPriorityProperty+0x4c>)
   82e06:	681b      	ldr	r3, [r3, #0]
   82e08:	4423      	add	r3, r4
   82e0a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82e0e:	428b      	cmp	r3, r1
   82e10:	d203      	bcs.n	82e1a <vTraceSetPriorityProperty+0x2a>
   82e12:	480b      	ldr	r0, [pc, #44]	; (82e40 <vTraceSetPriorityProperty+0x50>)
   82e14:	4b08      	ldr	r3, [pc, #32]	; (82e38 <vTraceSetPriorityProperty+0x48>)
   82e16:	4798      	blx	r3
   82e18:	bd38      	pop	{r3, r4, r5, pc}
		"vTraceSetPriorityProperty: Invalid value for id", );

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   82e1a:	4621      	mov	r1, r4
   82e1c:	4b09      	ldr	r3, [pc, #36]	; (82e44 <vTraceSetPriorityProperty+0x54>)
   82e1e:	4798      	blx	r3
   82e20:	4b06      	ldr	r3, [pc, #24]	; (82e3c <vTraceSetPriorityProperty+0x4c>)
   82e22:	681b      	ldr	r3, [r3, #0]
   82e24:	441c      	add	r4, r3
   82e26:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
   82e2a:	4418      	add	r0, r3
   82e2c:	4410      	add	r0, r2
   82e2e:	f880 508d 	strb.w	r5, [r0, #141]	; 0x8d
   82e32:	bd38      	pop	{r3, r4, r5, pc}
   82e34:	00085cd0 	.word	0x00085cd0
   82e38:	00082379 	.word	0x00082379
   82e3c:	2007ab94 	.word	0x2007ab94
   82e40:	00085d18 	.word	0x00085d18
   82e44:	00082571 	.word	0x00082571

00082e48 <uiTraceGetPriorityProperty>:
}

uint8_t uiTraceGetPriorityProperty(uint8_t objectclass, objectHandleType id)
{
   82e48:	b510      	push	{r4, lr}
   82e4a:	4604      	mov	r4, r0
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   82e4c:	2806      	cmp	r0, #6
   82e4e:	d904      	bls.n	82e5a <uiTraceGetPriorityProperty+0x12>
   82e50:	480f      	ldr	r0, [pc, #60]	; (82e90 <uiTraceGetPriorityProperty+0x48>)
   82e52:	4b10      	ldr	r3, [pc, #64]	; (82e94 <uiTraceGetPriorityProperty+0x4c>)
   82e54:	4798      	blx	r3
   82e56:	2000      	movs	r0, #0
   82e58:	bd10      	pop	{r4, pc}
   82e5a:	4608      	mov	r0, r1
		"uiTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   82e5c:	4b0e      	ldr	r3, [pc, #56]	; (82e98 <uiTraceGetPriorityProperty+0x50>)
   82e5e:	681b      	ldr	r3, [r3, #0]
   82e60:	4423      	add	r3, r4
   82e62:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82e66:	428b      	cmp	r3, r1
   82e68:	d204      	bcs.n	82e74 <uiTraceGetPriorityProperty+0x2c>
   82e6a:	480c      	ldr	r0, [pc, #48]	; (82e9c <uiTraceGetPriorityProperty+0x54>)
   82e6c:	4b09      	ldr	r3, [pc, #36]	; (82e94 <uiTraceGetPriorityProperty+0x4c>)
   82e6e:	4798      	blx	r3
   82e70:	2000      	movs	r0, #0
   82e72:	bd10      	pop	{r4, pc}
		"uiTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   82e74:	4621      	mov	r1, r4
   82e76:	4b0a      	ldr	r3, [pc, #40]	; (82ea0 <uiTraceGetPriorityProperty+0x58>)
   82e78:	4798      	blx	r3
   82e7a:	4b07      	ldr	r3, [pc, #28]	; (82e98 <uiTraceGetPriorityProperty+0x50>)
   82e7c:	681b      	ldr	r3, [r3, #0]
   82e7e:	441c      	add	r4, r3
   82e80:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
   82e84:	4418      	add	r0, r3
   82e86:	4410      	add	r0, r2
   82e88:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
}
   82e8c:	bd10      	pop	{r4, pc}
   82e8e:	bf00      	nop
   82e90:	00085d58 	.word	0x00085d58
   82e94:	00082379 	.word	0x00082379
   82e98:	2007ab94 	.word	0x2007ab94
   82e9c:	00085da0 	.word	0x00085da0
   82ea0:	00082571 	.word	0x00082571

00082ea4 <vTraceSetObjectState>:

void vTraceSetObjectState(uint8_t objectclass, objectHandleType id, uint8_t value)
{
   82ea4:	b538      	push	{r3, r4, r5, lr}
   82ea6:	4604      	mov	r4, r0
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   82ea8:	2806      	cmp	r0, #6
   82eaa:	d903      	bls.n	82eb4 <vTraceSetObjectState+0x10>
   82eac:	480e      	ldr	r0, [pc, #56]	; (82ee8 <vTraceSetObjectState+0x44>)
   82eae:	4b0f      	ldr	r3, [pc, #60]	; (82eec <vTraceSetObjectState+0x48>)
   82eb0:	4798      	blx	r3
   82eb2:	bd38      	pop	{r3, r4, r5, pc}
   82eb4:	4608      	mov	r0, r1
   82eb6:	4615      	mov	r5, r2
		"vTraceSetObjectState: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   82eb8:	4b0d      	ldr	r3, [pc, #52]	; (82ef0 <vTraceSetObjectState+0x4c>)
   82eba:	681b      	ldr	r3, [r3, #0]
   82ebc:	4423      	add	r3, r4
   82ebe:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82ec2:	428b      	cmp	r3, r1
   82ec4:	d203      	bcs.n	82ece <vTraceSetObjectState+0x2a>
   82ec6:	480b      	ldr	r0, [pc, #44]	; (82ef4 <vTraceSetObjectState+0x50>)
   82ec8:	4b08      	ldr	r3, [pc, #32]	; (82eec <vTraceSetObjectState+0x48>)
   82eca:	4798      	blx	r3
   82ecc:	bd38      	pop	{r3, r4, r5, pc}
		"vTraceSetObjectState: Invalid value for id", );

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   82ece:	4621      	mov	r1, r4
   82ed0:	4b09      	ldr	r3, [pc, #36]	; (82ef8 <vTraceSetObjectState+0x54>)
   82ed2:	4798      	blx	r3
   82ed4:	4b06      	ldr	r3, [pc, #24]	; (82ef0 <vTraceSetObjectState+0x4c>)
   82ed6:	681b      	ldr	r3, [r3, #0]
   82ed8:	441c      	add	r4, r3
   82eda:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
   82ede:	4418      	add	r0, r3
   82ee0:	4410      	add	r0, r2
   82ee2:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
   82ee6:	bd38      	pop	{r3, r4, r5, pc}
   82ee8:	00085de0 	.word	0x00085de0
   82eec:	00082379 	.word	0x00082379
   82ef0:	2007ab94 	.word	0x2007ab94
   82ef4:	00085e24 	.word	0x00085e24
   82ef8:	00082571 	.word	0x00082571

00082efc <uiTraceGetObjectState>:
}

uint8_t uiTraceGetObjectState(uint8_t objectclass, objectHandleType id)
{
   82efc:	b510      	push	{r4, lr}
   82efe:	4604      	mov	r4, r0
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   82f00:	2806      	cmp	r0, #6
   82f02:	d904      	bls.n	82f0e <uiTraceGetObjectState+0x12>
   82f04:	480f      	ldr	r0, [pc, #60]	; (82f44 <uiTraceGetObjectState+0x48>)
   82f06:	4b10      	ldr	r3, [pc, #64]	; (82f48 <uiTraceGetObjectState+0x4c>)
   82f08:	4798      	blx	r3
   82f0a:	2000      	movs	r0, #0
   82f0c:	bd10      	pop	{r4, pc}
   82f0e:	4608      	mov	r0, r1
		"uiTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   82f10:	4b0e      	ldr	r3, [pc, #56]	; (82f4c <uiTraceGetObjectState+0x50>)
   82f12:	681b      	ldr	r3, [r3, #0]
   82f14:	4423      	add	r3, r4
   82f16:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82f1a:	428b      	cmp	r3, r1
   82f1c:	d204      	bcs.n	82f28 <uiTraceGetObjectState+0x2c>
   82f1e:	480c      	ldr	r0, [pc, #48]	; (82f50 <uiTraceGetObjectState+0x54>)
   82f20:	4b09      	ldr	r3, [pc, #36]	; (82f48 <uiTraceGetObjectState+0x4c>)
   82f22:	4798      	blx	r3
   82f24:	2000      	movs	r0, #0
   82f26:	bd10      	pop	{r4, pc}
		"uiTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   82f28:	4621      	mov	r1, r4
   82f2a:	4b0a      	ldr	r3, [pc, #40]	; (82f54 <uiTraceGetObjectState+0x58>)
   82f2c:	4798      	blx	r3
   82f2e:	4b07      	ldr	r3, [pc, #28]	; (82f4c <uiTraceGetObjectState+0x50>)
   82f30:	681b      	ldr	r3, [r3, #0]
   82f32:	441c      	add	r4, r3
   82f34:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
   82f38:	4418      	add	r0, r3
   82f3a:	4410      	add	r0, r2
   82f3c:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
}
   82f40:	bd10      	pop	{r4, pc}
   82f42:	bf00      	nop
   82f44:	00085e60 	.word	0x00085e60
   82f48:	00082379 	.word	0x00082379
   82f4c:	2007ab94 	.word	0x2007ab94
   82f50:	00085ea4 	.word	0x00085ea4
   82f54:	00082571 	.word	0x00082571

00082f58 <vTraceStoreTaskswitch>:
 * vTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void vTraceStoreTaskswitch(objectHandleType task_handle)
{
   82f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	extern int32_t isPendingContextSwitch;
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	skipEvent = 0;

	TRACE_ASSERT(task_handle <= NTask,
   82f5a:	280f      	cmp	r0, #15
   82f5c:	d903      	bls.n	82f66 <vTraceStoreTaskswitch+0xe>
   82f5e:	4828      	ldr	r0, [pc, #160]	; (83000 <vTraceStoreTaskswitch+0xa8>)
   82f60:	4b28      	ldr	r3, [pc, #160]	; (83004 <vTraceStoreTaskswitch+0xac>)
   82f62:	4798      	blx	r3
   82f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82f66:	4604      	mov	r4, r0
	function since critical sections should not be used in the context switch
	event...)
	***************************************************************************/

	/* Skip the event if the task has been excluded, using vTraceExcludeTask */
	if (TRACE_GET_TASK_FLAG_ISEXCLUDED(task_handle))
   82f68:	f100 0321 	add.w	r3, r0, #33	; 0x21
   82f6c:	10da      	asrs	r2, r3, #3
   82f6e:	4926      	ldr	r1, [pc, #152]	; (83008 <vTraceStoreTaskswitch+0xb0>)
   82f70:	5c8a      	ldrb	r2, [r1, r2]
   82f72:	f003 0307 	and.w	r3, r3, #7
   82f76:	fa42 f303 	asr.w	r3, r2, r3
   82f7a:	f013 0f01 	tst.w	r3, #1
	{
		skipEvent = 1;
		inExcludedTask = 1;
   82f7e:	bf14      	ite	ne
   82f80:	2301      	movne	r3, #1
	}
	else
	{
		inExcludedTask = 0;
   82f82:	2300      	moveq	r3, #0
   82f84:	4a21      	ldr	r2, [pc, #132]	; (8300c <vTraceStoreTaskswitch+0xb4>)
   82f86:	7013      	strb	r3, [r2, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82f88:	f3ef 8510 	mrs	r5, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   82f8c:	2201      	movs	r2, #1
   82f8e:	f382 8810 	msr	PRIMASK, r2
	}

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   82f92:	491f      	ldr	r1, [pc, #124]	; (83010 <vTraceStoreTaskswitch+0xb8>)
   82f94:	680a      	ldr	r2, [r1, #0]
   82f96:	3201      	adds	r2, #1
   82f98:	600a      	str	r2, [r1, #0]

	/* Skip the event if the same task is scheduled */
	if (task_handle == handle_of_last_logged_task)
   82f9a:	4a1e      	ldr	r2, [pc, #120]	; (83014 <vTraceStoreTaskswitch+0xbc>)
   82f9c:	7812      	ldrb	r2, [r2, #0]
   82f9e:	4282      	cmp	r2, r0
   82fa0:	d026      	beq.n	82ff0 <vTraceStoreTaskswitch+0x98>
	{
		skipEvent = 1;
	}

	if (!RecorderDataPtr->recorderActive)
   82fa2:	4a1d      	ldr	r2, [pc, #116]	; (83018 <vTraceStoreTaskswitch+0xc0>)
   82fa4:	6812      	ldr	r2, [r2, #0]
   82fa6:	6b12      	ldr	r2, [r2, #48]	; 0x30
   82fa8:	b312      	cbz	r2, 82ff0 <vTraceStoreTaskswitch+0x98>
	{
		skipEvent = 1;
	}

	/* If this event should be logged, log it! */
	if (skipEvent == 0)
   82faa:	bb0b      	cbnz	r3, 82ff0 <vTraceStoreTaskswitch+0x98>
	{
		isPendingContextSwitch = 0;
   82fac:	2200      	movs	r2, #0
   82fae:	4b1b      	ldr	r3, [pc, #108]	; (8301c <vTraceStoreTaskswitch+0xc4>)
   82fb0:	601a      	str	r2, [r3, #0]

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   82fb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82fb6:	4b1a      	ldr	r3, [pc, #104]	; (83020 <vTraceStoreTaskswitch+0xc8>)
   82fb8:	4798      	blx	r3
   82fba:	4607      	mov	r7, r0
		handle_of_last_logged_task = task_handle;
   82fbc:	4b15      	ldr	r3, [pc, #84]	; (83014 <vTraceStoreTaskswitch+0xbc>)
   82fbe:	701c      	strb	r4, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
		ts = (TSEvent*)xTraceNextFreeEventBufferSlot();
   82fc0:	4b18      	ldr	r3, [pc, #96]	; (83024 <vTraceStoreTaskswitch+0xcc>)
   82fc2:	4798      	blx	r3

		if (ts != NULL)
   82fc4:	4606      	mov	r6, r0
   82fc6:	b198      	cbz	r0, 82ff0 <vTraceStoreTaskswitch+0x98>
		{
			if (uiTraceGetObjectState(TRACE_CLASS_TASK,
   82fc8:	4b12      	ldr	r3, [pc, #72]	; (83014 <vTraceStoreTaskswitch+0xbc>)
   82fca:	7819      	ldrb	r1, [r3, #0]
   82fcc:	2003      	movs	r0, #3
   82fce:	4b16      	ldr	r3, [pc, #88]	; (83028 <vTraceStoreTaskswitch+0xd0>)
   82fd0:	4798      	blx	r3
   82fd2:	2801      	cmp	r0, #1
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   82fd4:	bf0c      	ite	eq
   82fd6:	2307      	moveq	r3, #7
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   82fd8:	2306      	movne	r3, #6
   82fda:	7033      	strb	r3, [r6, #0]
			}

			ts->dts = dts3;
   82fdc:	8077      	strh	r7, [r6, #2]
			ts->objHandle = hnd8;
   82fde:	7074      	strb	r4, [r6, #1]

			vTraceSetObjectState(TRACE_CLASS_TASK,
   82fe0:	2201      	movs	r2, #1
   82fe2:	4b0c      	ldr	r3, [pc, #48]	; (83014 <vTraceStoreTaskswitch+0xbc>)
   82fe4:	7819      	ldrb	r1, [r3, #0]
   82fe6:	2003      	movs	r0, #3
   82fe8:	4b10      	ldr	r3, [pc, #64]	; (8302c <vTraceStoreTaskswitch+0xd4>)
   82fea:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   82fec:	4b10      	ldr	r3, [pc, #64]	; (83030 <vTraceStoreTaskswitch+0xd8>)
   82fee:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   82ff0:	4a07      	ldr	r2, [pc, #28]	; (83010 <vTraceStoreTaskswitch+0xb8>)
   82ff2:	6813      	ldr	r3, [r2, #0]
   82ff4:	3b01      	subs	r3, #1
   82ff6:	6013      	str	r3, [r2, #0]
   82ff8:	f385 8810 	msr	PRIMASK, r5
   82ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82ffe:	bf00      	nop
   83000:	00085ee0 	.word	0x00085ee0
   83004:	00082379 	.word	0x00082379
   83008:	2007ac08 	.word	0x2007ac08
   8300c:	2007ac28 	.word	0x2007ac28
   83010:	2007ab90 	.word	0x2007ab90
   83014:	2007ac29 	.word	0x2007ac29
   83018:	2007ab94 	.word	0x2007ab94
   8301c:	2007ac2c 	.word	0x2007ac2c
   83020:	00082869 	.word	0x00082869
   83024:	00082539 	.word	0x00082539
   83028:	00082efd 	.word	0x00082efd
   8302c:	00082ea5 	.word	0x00082ea5
   83030:	00082835 	.word	0x00082835

00083034 <vTraceSetTaskInstanceFinished>:

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
}

void vTraceSetTaskInstanceFinished(objectHandleType handle)
{
   83034:	b508      	push	{r3, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   83036:	4b0b      	ldr	r3, [pc, #44]	; (83064 <vTraceSetTaskInstanceFinished+0x30>)
   83038:	681b      	ldr	r3, [r3, #0]
   8303a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
   8303e:	4283      	cmp	r3, r0
   83040:	d203      	bcs.n	8304a <vTraceSetTaskInstanceFinished+0x16>
   83042:	4809      	ldr	r0, [pc, #36]	; (83068 <vTraceSetTaskInstanceFinished+0x34>)
   83044:	4b09      	ldr	r3, [pc, #36]	; (8306c <vTraceSetTaskInstanceFinished+0x38>)
   83046:	4798      	blx	r3
   83048:	bd08      	pop	{r3, pc}
		"vTraceSetTaskInstanceFinished: Invalid value for handle", );

#if (USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   8304a:	2103      	movs	r1, #3
   8304c:	4b08      	ldr	r3, [pc, #32]	; (83070 <vTraceSetTaskInstanceFinished+0x3c>)
   8304e:	4798      	blx	r3
   83050:	4b04      	ldr	r3, [pc, #16]	; (83064 <vTraceSetTaskInstanceFinished+0x30>)
   83052:	681b      	ldr	r3, [r3, #0]
   83054:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
   83058:	4418      	add	r0, r3
   8305a:	4410      	add	r0, r2
   8305c:	2300      	movs	r3, #0
   8305e:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
   83062:	bd08      	pop	{r3, pc}
   83064:	2007ab94 	.word	0x2007ab94
   83068:	00085f24 	.word	0x00085f24
   8306c:	00082379 	.word	0x00082379
   83070:	00082571 	.word	0x00082571

00083074 <prvTraceGetObjectNumber>:
int uiInEventGroupSetBitsFromISR = 0;

#if (FREERTOS_VERSION < FREERTOS_VERSION_8_X)

objectHandleType prvTraceGetObjectNumber(void* handle)
{
   83074:	b508      	push	{r3, lr}
	return (objectHandleType) ucQueueGetQueueNumber(handle);
   83076:	4b01      	ldr	r3, [pc, #4]	; (8307c <prvTraceGetObjectNumber+0x8>)
   83078:	4798      	blx	r3
}
   8307a:	bd08      	pop	{r3, pc}
   8307c:	00080ddd 	.word	0x00080ddd

00083080 <prvTraceGetObjectType>:
}

#endif

unsigned char prvTraceGetObjectType(void* handle)
{
   83080:	b508      	push	{r3, lr}
	return ucQueueGetQueueType(handle);
   83082:	4b01      	ldr	r3, [pc, #4]	; (83088 <prvTraceGetObjectType+0x8>)
   83084:	4798      	blx	r3
}
   83086:	bd08      	pop	{r3, pc}
   83088:	00080de5 	.word	0x00080de5

0008308c <prvTraceGetTaskNumber>:

objectHandleType prvTraceGetTaskNumber(void* handle)
{
   8308c:	b508      	push	{r3, lr}
	return (objectHandleType)uxTaskGetTaskNumber(handle);
   8308e:	4b02      	ldr	r3, [pc, #8]	; (83098 <prvTraceGetTaskNumber+0xc>)
   83090:	4798      	blx	r3
}
   83092:	b2c0      	uxtb	r0, r0
   83094:	bd08      	pop	{r3, pc}
   83096:	bf00      	nop
   83098:	00081761 	.word	0x00081761

0008309c <prvTraceGetCurrentTaskHandle>:
{
	return xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED;
}

void* prvTraceGetCurrentTaskHandle()
{
   8309c:	b508      	push	{r3, lr}
	return xTaskGetCurrentTaskHandle();
   8309e:	4b01      	ldr	r3, [pc, #4]	; (830a4 <prvTraceGetCurrentTaskHandle+0x8>)
   830a0:	4798      	blx	r3
}
   830a2:	bd08      	pop	{r3, pc}
   830a4:	0008176d 	.word	0x0008176d

000830a8 <vTraceInitObjectPropertyTable>:

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   830a8:	4b29      	ldr	r3, [pc, #164]	; (83150 <vTraceInitObjectPropertyTable+0xa8>)
   830aa:	681b      	ldr	r3, [r3, #0]
   830ac:	2207      	movs	r2, #7
   830ae:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = NQueue;
   830b0:	220a      	movs	r2, #10
   830b2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = NSemaphore;
   830b6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = NMutex;
   830ba:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = NTask;
   830be:	220f      	movs	r2, #15
   830c0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = NISR;
   830c4:	2105      	movs	r1, #5
   830c6:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = NTimer;
   830ca:	2102      	movs	r1, #2
   830cc:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = NEventGroup;	
   830d0:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = NameLenQueue;
   830d4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = NameLenSemaphore;
   830d8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = NameLenMutex;
   830dc:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = NameLenTask;
   830e0:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = NameLenISR;
   830e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = NameLenTimer;
   830e8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = NameLenEventGroup;	
   830ec:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   830f0:	2210      	movs	r2, #16
   830f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   830f6:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   830fa:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   830fe:	2113      	movs	r1, #19
   83100:	f883 1077 	strb.w	r1, [r3, #119]	; 0x77
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   83104:	2011      	movs	r0, #17
   83106:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   8310a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   8310e:	f883 107a 	strb.w	r1, [r3, #122]	; 0x7a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   83112:	2200      	movs	r2, #0
   83114:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   83118:	22a0      	movs	r2, #160	; 0xa0
   8311a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   8311e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   83122:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   83126:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   8312a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   8312e:	f240 22fd 	movw	r2, #765	; 0x2fd
   83132:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   83136:	f240 3252 	movw	r2, #850	; 0x352
   8313a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   8313e:	f240 3272 	movw	r2, #882	; 0x372
   83142:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   83146:	f44f 7266 	mov.w	r2, #920	; 0x398
   8314a:	661a      	str	r2, [r3, #96]	; 0x60
   8314c:	4770      	bx	lr
   8314e:	bf00      	nop
   83150:	2007ab94 	.word	0x2007ab94

00083154 <vTraceInitObjectHandleStack>:
}

/* Initialization of the handle mechanism, see e.g, xTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   83154:	4b12      	ldr	r3, [pc, #72]	; (831a0 <vTraceInitObjectHandleStack+0x4c>)
   83156:	2200      	movs	r2, #0
   83158:	81da      	strh	r2, [r3, #14]
   8315a:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = NQueue;
   8315c:	220a      	movs	r2, #10
   8315e:	821a      	strh	r2, [r3, #16]
   83160:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = NQueue + NSemaphore;
   83162:	2214      	movs	r2, #20
   83164:	825a      	strh	r2, [r3, #18]
   83166:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = NQueue + NSemaphore + NMutex;
   83168:	221e      	movs	r2, #30
   8316a:	829a      	strh	r2, [r3, #20]
   8316c:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = NQueue + NSemaphore + NMutex + NTask;
   8316e:	222d      	movs	r2, #45	; 0x2d
   83170:	82da      	strh	r2, [r3, #22]
   83172:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = NQueue + NSemaphore + NMutex + NTask + NISR;
   83174:	2232      	movs	r2, #50	; 0x32
   83176:	831a      	strh	r2, [r3, #24]
   83178:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer;
   8317a:	2234      	movs	r2, #52	; 0x34
   8317c:	835a      	strh	r2, [r3, #26]
   8317e:	819a      	strh	r2, [r3, #12]

	objectHandleStacks.highestIndexOfClass[0] = NQueue - 1;
   83180:	2209      	movs	r2, #9
   83182:	839a      	strh	r2, [r3, #28]
	objectHandleStacks.highestIndexOfClass[1] = NQueue + NSemaphore - 1;
   83184:	2213      	movs	r2, #19
   83186:	83da      	strh	r2, [r3, #30]
	objectHandleStacks.highestIndexOfClass[2] = NQueue + NSemaphore + NMutex - 1;
   83188:	221d      	movs	r2, #29
   8318a:	841a      	strh	r2, [r3, #32]
	objectHandleStacks.highestIndexOfClass[3] = NQueue + NSemaphore + NMutex + NTask - 1;
   8318c:	222c      	movs	r2, #44	; 0x2c
   8318e:	845a      	strh	r2, [r3, #34]	; 0x22
	objectHandleStacks.highestIndexOfClass[4] = NQueue + NSemaphore + NMutex + NTask + NISR - 1;
   83190:	2231      	movs	r2, #49	; 0x31
   83192:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[5] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer - 1;
   83194:	2233      	movs	r2, #51	; 0x33
   83196:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[6] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer + NEventGroup - 1;
   83198:	2235      	movs	r2, #53	; 0x35
   8319a:	851a      	strh	r2, [r3, #40]	; 0x28
   8319c:	4770      	bx	lr
   8319e:	bf00      	nop
   831a0:	2007ab98 	.word	0x2007ab98

000831a4 <pszTraceGetErrorNotEnoughHandles>:
}
	
/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
	switch(objectclass)
   831a4:	2806      	cmp	r0, #6
   831a6:	d811      	bhi.n	831cc <pszTraceGetErrorNotEnoughHandles+0x28>
   831a8:	e8df f000 	tbb	[pc, r0]
   831ac:	1208060a 	.word	0x1208060a
   831b0:	0c04      	.short	0x0c04
   831b2:	0e          	.byte	0x0e
   831b3:	00          	.byte	0x00
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase NTask in trcConfig.h";
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase NISR in trcConfig.h";
   831b4:	4807      	ldr	r0, [pc, #28]	; (831d4 <pszTraceGetErrorNotEnoughHandles+0x30>)
   831b6:	4770      	bx	lr
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase NSemaphore in trcConfig.h";
   831b8:	4807      	ldr	r0, [pc, #28]	; (831d8 <pszTraceGetErrorNotEnoughHandles+0x34>)
   831ba:	4770      	bx	lr
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase NMutex in trcConfig.h";
   831bc:	4807      	ldr	r0, [pc, #28]	; (831dc <pszTraceGetErrorNotEnoughHandles+0x38>)
   831be:	4770      	bx	lr
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase NQueue in trcConfig.h";
   831c0:	4807      	ldr	r0, [pc, #28]	; (831e0 <pszTraceGetErrorNotEnoughHandles+0x3c>)
   831c2:	4770      	bx	lr
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase NTimer in trcConfig.h";
   831c4:	4807      	ldr	r0, [pc, #28]	; (831e4 <pszTraceGetErrorNotEnoughHandles+0x40>)
   831c6:	4770      	bx	lr
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase NEventGroup in trcConfig.h";		
   831c8:	4807      	ldr	r0, [pc, #28]	; (831e8 <pszTraceGetErrorNotEnoughHandles+0x44>)
   831ca:	4770      	bx	lr
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   831cc:	4807      	ldr	r0, [pc, #28]	; (831ec <pszTraceGetErrorNotEnoughHandles+0x48>)
   831ce:	4770      	bx	lr
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
	switch(objectclass)
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase NTask in trcConfig.h";
   831d0:	4807      	ldr	r0, [pc, #28]	; (831f0 <pszTraceGetErrorNotEnoughHandles+0x4c>)
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase NEventGroup in trcConfig.h";		
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
	}
}
   831d2:	4770      	bx	lr
   831d4:	00085fa4 	.word	0x00085fa4
   831d8:	00085fdc 	.word	0x00085fdc
   831dc:	00086020 	.word	0x00086020
   831e0:	0008605c 	.word	0x0008605c
   831e4:	00086098 	.word	0x00086098
   831e8:	000860d4 	.word	0x000860d4
   831ec:	00086118 	.word	0x00086118
   831f0:	00085f6c 	.word	0x00085f6c

000831f4 <uiTraceIsObjectExcluded>:

/* Returns the exclude state of the object */
uint8_t uiTraceIsObjectExcluded(traceObjectClass objectclass, objectHandleType handle)
{
   831f4:	b508      	push	{r3, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, "prvTraceIsObjectExcluded: objectclass >= TRACE_NCLASSES", 1);
   831f6:	2806      	cmp	r0, #6
   831f8:	d904      	bls.n	83204 <uiTraceIsObjectExcluded+0x10>
   831fa:	482f      	ldr	r0, [pc, #188]	; (832b8 <uiTraceIsObjectExcluded+0xc4>)
   831fc:	4b2f      	ldr	r3, [pc, #188]	; (832bc <uiTraceIsObjectExcluded+0xc8>)
   831fe:	4798      	blx	r3
   83200:	2001      	movs	r0, #1
   83202:	bd08      	pop	{r3, pc}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], "uiTraceIsObjectExcluded: Invalid value for handle", 1);
   83204:	4b2e      	ldr	r3, [pc, #184]	; (832c0 <uiTraceIsObjectExcluded+0xcc>)
   83206:	681b      	ldr	r3, [r3, #0]
   83208:	4403      	add	r3, r0
   8320a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   8320e:	428b      	cmp	r3, r1
   83210:	d204      	bcs.n	8321c <uiTraceIsObjectExcluded+0x28>
   83212:	482c      	ldr	r0, [pc, #176]	; (832c4 <uiTraceIsObjectExcluded+0xd0>)
   83214:	4b29      	ldr	r3, [pc, #164]	; (832bc <uiTraceIsObjectExcluded+0xc8>)
   83216:	4798      	blx	r3
   83218:	2001      	movs	r0, #1
   8321a:	bd08      	pop	{r3, pc}
	
	switch(objectclass)
   8321c:	2806      	cmp	r0, #6
   8321e:	d846      	bhi.n	832ae <uiTraceIsObjectExcluded+0xba>
   83220:	e8df f000 	tbb	[pc, r0]
   83224:	041a0f25 	.word	0x041a0f25
   83228:	2f45      	.short	0x2f45
   8322a:	3a          	.byte	0x3a
   8322b:	00          	.byte	0x00
	{
	case TRACE_CLASS_TASK:
		return TRACE_GET_TASK_FLAG_ISEXCLUDED(handle);
   8322c:	3121      	adds	r1, #33	; 0x21
   8322e:	10cb      	asrs	r3, r1, #3
   83230:	f001 0107 	and.w	r1, r1, #7
   83234:	2001      	movs	r0, #1
   83236:	fa00 f101 	lsl.w	r1, r0, r1
   8323a:	4a23      	ldr	r2, [pc, #140]	; (832c8 <uiTraceIsObjectExcluded+0xd4>)
   8323c:	5cd0      	ldrb	r0, [r2, r3]
   8323e:	4008      	ands	r0, r1
   83240:	bd08      	pop	{r3, pc}
	case TRACE_CLASS_SEMAPHORE:
		return TRACE_GET_SEMAPHORE_FLAG_ISEXCLUDED(handle);
   83242:	310b      	adds	r1, #11
   83244:	10cb      	asrs	r3, r1, #3
   83246:	f001 0107 	and.w	r1, r1, #7
   8324a:	2001      	movs	r0, #1
   8324c:	fa00 f101 	lsl.w	r1, r0, r1
   83250:	4a1d      	ldr	r2, [pc, #116]	; (832c8 <uiTraceIsObjectExcluded+0xd4>)
   83252:	5cd0      	ldrb	r0, [r2, r3]
   83254:	4008      	ands	r0, r1
   83256:	bd08      	pop	{r3, pc}
	case TRACE_CLASS_MUTEX:
		return TRACE_GET_MUTEX_FLAG_ISEXCLUDED(handle);
   83258:	3116      	adds	r1, #22
   8325a:	10cb      	asrs	r3, r1, #3
   8325c:	f001 0107 	and.w	r1, r1, #7
   83260:	2001      	movs	r0, #1
   83262:	fa00 f101 	lsl.w	r1, r0, r1
   83266:	4a18      	ldr	r2, [pc, #96]	; (832c8 <uiTraceIsObjectExcluded+0xd4>)
   83268:	5cd0      	ldrb	r0, [r2, r3]
   8326a:	4008      	ands	r0, r1
   8326c:	bd08      	pop	{r3, pc}
	case TRACE_CLASS_QUEUE:
		return TRACE_GET_QUEUE_FLAG_ISEXCLUDED(handle);
   8326e:	08cb      	lsrs	r3, r1, #3
   83270:	f001 0107 	and.w	r1, r1, #7
   83274:	2001      	movs	r0, #1
   83276:	fa00 f101 	lsl.w	r1, r0, r1
   8327a:	4a13      	ldr	r2, [pc, #76]	; (832c8 <uiTraceIsObjectExcluded+0xd4>)
   8327c:	5cd0      	ldrb	r0, [r2, r3]
   8327e:	4008      	ands	r0, r1
   83280:	bd08      	pop	{r3, pc}
	case TRACE_CLASS_TIMER:
		return TRACE_GET_TIMER_FLAG_ISEXCLUDED(handle);		
   83282:	3131      	adds	r1, #49	; 0x31
   83284:	10cb      	asrs	r3, r1, #3
   83286:	f001 0107 	and.w	r1, r1, #7
   8328a:	2001      	movs	r0, #1
   8328c:	fa00 f101 	lsl.w	r1, r0, r1
   83290:	4a0d      	ldr	r2, [pc, #52]	; (832c8 <uiTraceIsObjectExcluded+0xd4>)
   83292:	5cd0      	ldrb	r0, [r2, r3]
   83294:	4008      	ands	r0, r1
   83296:	bd08      	pop	{r3, pc}
	case TRACE_CLASS_EVENTGROUP:
		return TRACE_GET_EVENTGROUP_FLAG_ISEXCLUDED(handle);				
   83298:	3134      	adds	r1, #52	; 0x34
   8329a:	10cb      	asrs	r3, r1, #3
   8329c:	f001 0107 	and.w	r1, r1, #7
   832a0:	2001      	movs	r0, #1
   832a2:	fa00 f101 	lsl.w	r1, r0, r1
   832a6:	4a08      	ldr	r2, [pc, #32]	; (832c8 <uiTraceIsObjectExcluded+0xd4>)
   832a8:	5cd0      	ldrb	r0, [r2, r3]
   832aa:	4008      	ands	r0, r1
   832ac:	bd08      	pop	{r3, pc}
	}
	
	vTraceError("Invalid object class ID in uiTraceIsObjectExcluded!");
   832ae:	4807      	ldr	r0, [pc, #28]	; (832cc <uiTraceIsObjectExcluded+0xd8>)
   832b0:	4b02      	ldr	r3, [pc, #8]	; (832bc <uiTraceIsObjectExcluded+0xc8>)
   832b2:	4798      	blx	r3
	
	/* Must never reach */
	return 1;
   832b4:	2001      	movs	r0, #1
}
   832b6:	bd08      	pop	{r3, pc}
   832b8:	00086148 	.word	0x00086148
   832bc:	00082379 	.word	0x00082379
   832c0:	2007ab94 	.word	0x2007ab94
   832c4:	00086190 	.word	0x00086190
   832c8:	2007ac08 	.word	0x2007ac08
   832cc:	000861d0 	.word	0x000861d0

000832d0 <vTraceInitTraceData>:
 *
 * Allocates, if necessary, and initializes the recorder data structure, based
 * on the constants in trcConfig.h.
 ******************************************************************************/
void vTraceInitTraceData(void)
{
   832d0:	b508      	push	{r3, lr}
	prvTraceInitTraceData();
   832d2:	4b01      	ldr	r3, [pc, #4]	; (832d8 <vTraceInitTraceData+0x8>)
   832d4:	4798      	blx	r3
   832d6:	bd08      	pop	{r3, pc}
   832d8:	000823c9 	.word	0x000823c9

000832dc <uiTraceStart>:
 * error. In that case, check vTraceGetLastError to get the error message.
 * Any error message is also presented when opening a trace file.
 ******************************************************************************/

uint32_t uiTraceStart(void)
{
   832dc:	b538      	push	{r3, r4, r5, lr}
	objectHandleType handle;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	handle = 0;

	if (RecorderDataPtr == NULL)
   832de:	4b1c      	ldr	r3, [pc, #112]	; (83350 <uiTraceStart+0x74>)
   832e0:	681b      	ldr	r3, [r3, #0]
   832e2:	b923      	cbnz	r3, 832ee <uiTraceStart+0x12>
	{
		vTraceError("RecorderDataPtr is NULL. Call vTraceInitTraceData() before starting trace.");
   832e4:	481b      	ldr	r0, [pc, #108]	; (83354 <uiTraceStart+0x78>)
   832e6:	4b1c      	ldr	r3, [pc, #112]	; (83358 <uiTraceStart+0x7c>)
   832e8:	4798      	blx	r3
		return 0;
   832ea:	2000      	movs	r0, #0
   832ec:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (traceErrorMessage == NULL)
   832ee:	4b1b      	ldr	r3, [pc, #108]	; (8335c <uiTraceStart+0x80>)
   832f0:	681b      	ldr	r3, [r3, #0]
   832f2:	bb43      	cbnz	r3, 83346 <uiTraceStart+0x6a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   832f4:	f3ef 8410 	mrs	r4, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   832f8:	2201      	movs	r2, #1
   832fa:	f382 8810 	msr	PRIMASK, r2
	{
		trcCRITICAL_SECTION_BEGIN();
   832fe:	4918      	ldr	r1, [pc, #96]	; (83360 <uiTraceStart+0x84>)
   83300:	680b      	ldr	r3, [r1, #0]
   83302:	4413      	add	r3, r2
   83304:	600b      	str	r3, [r1, #0]
		RecorderDataPtr->recorderActive = 1;
   83306:	4b12      	ldr	r3, [pc, #72]	; (83350 <uiTraceStart+0x74>)
   83308:	681b      	ldr	r3, [r3, #0]
   8330a:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   8330c:	4b15      	ldr	r3, [pc, #84]	; (83364 <uiTraceStart+0x88>)
   8330e:	4798      	blx	r3
   83310:	4b15      	ldr	r3, [pc, #84]	; (83368 <uiTraceStart+0x8c>)
   83312:	4798      	blx	r3
		if (handle == 0)
   83314:	4605      	mov	r5, r0
   83316:	b968      	cbnz	r0, 83334 <uiTraceStart+0x58>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = xTraceGetObjectHandle(TRACE_CLASS_TASK);
   83318:	2003      	movs	r0, #3
   8331a:	4b14      	ldr	r3, [pc, #80]	; (8336c <uiTraceStart+0x90>)
   8331c:	4798      	blx	r3
   8331e:	4605      	mov	r5, r0
			vTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   83320:	4a13      	ldr	r2, [pc, #76]	; (83370 <uiTraceStart+0x94>)
   83322:	4601      	mov	r1, r0
   83324:	2003      	movs	r0, #3
   83326:	4b13      	ldr	r3, [pc, #76]	; (83374 <uiTraceStart+0x98>)
   83328:	4798      	blx	r3

			vTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   8332a:	2200      	movs	r2, #0
   8332c:	4629      	mov	r1, r5
   8332e:	2003      	movs	r0, #3
   83330:	4b11      	ldr	r3, [pc, #68]	; (83378 <uiTraceStart+0x9c>)
   83332:	4798      	blx	r3
		}

		vTraceStoreTaskswitch(handle); /* Register the currently running task */
   83334:	4628      	mov	r0, r5
   83336:	4b11      	ldr	r3, [pc, #68]	; (8337c <uiTraceStart+0xa0>)
   83338:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   8333a:	4a09      	ldr	r2, [pc, #36]	; (83360 <uiTraceStart+0x84>)
   8333c:	6813      	ldr	r3, [r2, #0]
   8333e:	3b01      	subs	r3, #1
   83340:	6013      	str	r3, [r2, #0]
   83342:	f384 8810 	msr	PRIMASK, r4
	}

	return RecorderDataPtr->recorderActive;
   83346:	4b02      	ldr	r3, [pc, #8]	; (83350 <uiTraceStart+0x74>)
   83348:	681b      	ldr	r3, [r3, #0]
   8334a:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
   8334c:	bd38      	pop	{r3, r4, r5, pc}
   8334e:	bf00      	nop
   83350:	2007ab94 	.word	0x2007ab94
   83354:	0008625c 	.word	0x0008625c
   83358:	00082379 	.word	0x00082379
   8335c:	2007ab88 	.word	0x2007ab88
   83360:	2007ab90 	.word	0x2007ab90
   83364:	0008309d 	.word	0x0008309d
   83368:	0008308d 	.word	0x0008308d
   8336c:	000825c5 	.word	0x000825c5
   83370:	000862a8 	.word	0x000862a8
   83374:	00082711 	.word	0x00082711
   83378:	00082df1 	.word	0x00082df1
   8337c:	00082f59 	.word	0x00082f59

00083380 <vTask1>:
	for( ;; );
}
/*-----------------------------------------------------------*/

void vTask1( void *pvParameters )
{
   83380:	b530      	push	{r4, r5, lr}
   83382:	b083      	sub	sp, #12

	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		/* Print out the name of this task. */
		puts( pcTaskName );
   83384:	4d08      	ldr	r5, [pc, #32]	; (833a8 <vTask1+0x28>)

		/* Delay for a period. */
		for( ul = 0; ul < mainDELAY_LOOP_COUNT; ul++ )
   83386:	4c09      	ldr	r4, [pc, #36]	; (833ac <vTask1+0x2c>)

	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		/* Print out the name of this task. */
		puts( pcTaskName );
   83388:	4628      	mov	r0, r5
   8338a:	4b09      	ldr	r3, [pc, #36]	; (833b0 <vTask1+0x30>)
   8338c:	4798      	blx	r3

		/* Delay for a period. */
		for( ul = 0; ul < mainDELAY_LOOP_COUNT; ul++ )
   8338e:	2300      	movs	r3, #0
   83390:	9301      	str	r3, [sp, #4]
   83392:	9b01      	ldr	r3, [sp, #4]
   83394:	42a3      	cmp	r3, r4
   83396:	d8f7      	bhi.n	83388 <vTask1+0x8>
   83398:	9b01      	ldr	r3, [sp, #4]
   8339a:	3301      	adds	r3, #1
   8339c:	9301      	str	r3, [sp, #4]
   8339e:	9b01      	ldr	r3, [sp, #4]
   833a0:	42a3      	cmp	r3, r4
   833a2:	d9f9      	bls.n	83398 <vTask1+0x18>
   833a4:	e7f0      	b.n	83388 <vTask1+0x8>
   833a6:	bf00      	nop
   833a8:	00086538 	.word	0x00086538
   833ac:	000ffffe 	.word	0x000ffffe
   833b0:	00083861 	.word	0x00083861

000833b4 <vTask2>:
	}
}
/*-----------------------------------------------------------*/

void vTask2( void *pvParameters )
{
   833b4:	b530      	push	{r4, r5, lr}
   833b6:	b083      	sub	sp, #12

	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		/* Print out the name of this task. */
		puts( pcTaskName );
   833b8:	4d08      	ldr	r5, [pc, #32]	; (833dc <vTask2+0x28>)

		/* Delay for a period. */
		for( ul = 0; ul < mainDELAY_LOOP_COUNT; ul++ )
   833ba:	4c09      	ldr	r4, [pc, #36]	; (833e0 <vTask2+0x2c>)

	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		/* Print out the name of this task. */
		puts( pcTaskName );
   833bc:	4628      	mov	r0, r5
   833be:	4b09      	ldr	r3, [pc, #36]	; (833e4 <vTask2+0x30>)
   833c0:	4798      	blx	r3

		/* Delay for a period. */
		for( ul = 0; ul < mainDELAY_LOOP_COUNT; ul++ )
   833c2:	2300      	movs	r3, #0
   833c4:	9301      	str	r3, [sp, #4]
   833c6:	9b01      	ldr	r3, [sp, #4]
   833c8:	42a3      	cmp	r3, r4
   833ca:	d8f7      	bhi.n	833bc <vTask2+0x8>
   833cc:	9b01      	ldr	r3, [sp, #4]
   833ce:	3301      	adds	r3, #1
   833d0:	9301      	str	r3, [sp, #4]
   833d2:	9b01      	ldr	r3, [sp, #4]
   833d4:	42a3      	cmp	r3, r4
   833d6:	d9f9      	bls.n	833cc <vTask2+0x18>
   833d8:	e7f0      	b.n	833bc <vTask2+0x8>
   833da:	bf00      	nop
   833dc:	0008654c 	.word	0x0008654c
   833e0:	000ffffe 	.word	0x000ffffe
   833e4:	00083861 	.word	0x00083861

000833e8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   833e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   833ea:	b083      	sub	sp, #12
   833ec:	4604      	mov	r4, r0
   833ee:	460d      	mov	r5, r1
	uint32_t val = 0;
   833f0:	2300      	movs	r3, #0
   833f2:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   833f4:	4b1f      	ldr	r3, [pc, #124]	; (83474 <usart_serial_getchar+0x8c>)
   833f6:	4298      	cmp	r0, r3
   833f8:	d107      	bne.n	8340a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   833fa:	461f      	mov	r7, r3
   833fc:	4e1e      	ldr	r6, [pc, #120]	; (83478 <usart_serial_getchar+0x90>)
   833fe:	4629      	mov	r1, r5
   83400:	4638      	mov	r0, r7
   83402:	47b0      	blx	r6
   83404:	2800      	cmp	r0, #0
   83406:	d1fa      	bne.n	833fe <usart_serial_getchar+0x16>
   83408:	e019      	b.n	8343e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8340a:	4b1c      	ldr	r3, [pc, #112]	; (8347c <usart_serial_getchar+0x94>)
   8340c:	4298      	cmp	r0, r3
   8340e:	d109      	bne.n	83424 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   83410:	461f      	mov	r7, r3
   83412:	4e1b      	ldr	r6, [pc, #108]	; (83480 <usart_serial_getchar+0x98>)
   83414:	a901      	add	r1, sp, #4
   83416:	4638      	mov	r0, r7
   83418:	47b0      	blx	r6
   8341a:	2800      	cmp	r0, #0
   8341c:	d1fa      	bne.n	83414 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   8341e:	9b01      	ldr	r3, [sp, #4]
   83420:	702b      	strb	r3, [r5, #0]
   83422:	e019      	b.n	83458 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   83424:	4b17      	ldr	r3, [pc, #92]	; (83484 <usart_serial_getchar+0x9c>)
   83426:	4298      	cmp	r0, r3
   83428:	d109      	bne.n	8343e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   8342a:	461e      	mov	r6, r3
   8342c:	4c14      	ldr	r4, [pc, #80]	; (83480 <usart_serial_getchar+0x98>)
   8342e:	a901      	add	r1, sp, #4
   83430:	4630      	mov	r0, r6
   83432:	47a0      	blx	r4
   83434:	2800      	cmp	r0, #0
   83436:	d1fa      	bne.n	8342e <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   83438:	9b01      	ldr	r3, [sp, #4]
   8343a:	702b      	strb	r3, [r5, #0]
   8343c:	e018      	b.n	83470 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8343e:	4b12      	ldr	r3, [pc, #72]	; (83488 <usart_serial_getchar+0xa0>)
   83440:	429c      	cmp	r4, r3
   83442:	d109      	bne.n	83458 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   83444:	461e      	mov	r6, r3
   83446:	4c0e      	ldr	r4, [pc, #56]	; (83480 <usart_serial_getchar+0x98>)
   83448:	a901      	add	r1, sp, #4
   8344a:	4630      	mov	r0, r6
   8344c:	47a0      	blx	r4
   8344e:	2800      	cmp	r0, #0
   83450:	d1fa      	bne.n	83448 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   83452:	9b01      	ldr	r3, [sp, #4]
   83454:	702b      	strb	r3, [r5, #0]
   83456:	e00b      	b.n	83470 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   83458:	4b0c      	ldr	r3, [pc, #48]	; (8348c <usart_serial_getchar+0xa4>)
   8345a:	429c      	cmp	r4, r3
   8345c:	d108      	bne.n	83470 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   8345e:	461e      	mov	r6, r3
   83460:	4c07      	ldr	r4, [pc, #28]	; (83480 <usart_serial_getchar+0x98>)
   83462:	a901      	add	r1, sp, #4
   83464:	4630      	mov	r0, r6
   83466:	47a0      	blx	r4
   83468:	2800      	cmp	r0, #0
   8346a:	d1fa      	bne.n	83462 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   8346c:	9b01      	ldr	r3, [sp, #4]
   8346e:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   83470:	b003      	add	sp, #12
   83472:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83474:	400e0800 	.word	0x400e0800
   83478:	00080251 	.word	0x00080251
   8347c:	40098000 	.word	0x40098000
   83480:	000801a1 	.word	0x000801a1
   83484:	4009c000 	.word	0x4009c000
   83488:	400a0000 	.word	0x400a0000
   8348c:	400a4000 	.word	0x400a4000

00083490 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   83490:	b570      	push	{r4, r5, r6, lr}
   83492:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   83494:	4b1e      	ldr	r3, [pc, #120]	; (83510 <usart_serial_putchar+0x80>)
   83496:	4298      	cmp	r0, r3
   83498:	d108      	bne.n	834ac <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   8349a:	461e      	mov	r6, r3
   8349c:	4d1d      	ldr	r5, [pc, #116]	; (83514 <usart_serial_putchar+0x84>)
   8349e:	4621      	mov	r1, r4
   834a0:	4630      	mov	r0, r6
   834a2:	47a8      	blx	r5
   834a4:	2800      	cmp	r0, #0
   834a6:	d1fa      	bne.n	8349e <usart_serial_putchar+0xe>
		return 1;
   834a8:	2001      	movs	r0, #1
   834aa:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   834ac:	4b1a      	ldr	r3, [pc, #104]	; (83518 <usart_serial_putchar+0x88>)
   834ae:	4298      	cmp	r0, r3
   834b0:	d108      	bne.n	834c4 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   834b2:	461e      	mov	r6, r3
   834b4:	4d19      	ldr	r5, [pc, #100]	; (8351c <usart_serial_putchar+0x8c>)
   834b6:	4621      	mov	r1, r4
   834b8:	4630      	mov	r0, r6
   834ba:	47a8      	blx	r5
   834bc:	2800      	cmp	r0, #0
   834be:	d1fa      	bne.n	834b6 <usart_serial_putchar+0x26>
		return 1;
   834c0:	2001      	movs	r0, #1
   834c2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   834c4:	4b16      	ldr	r3, [pc, #88]	; (83520 <usart_serial_putchar+0x90>)
   834c6:	4298      	cmp	r0, r3
   834c8:	d108      	bne.n	834dc <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   834ca:	461e      	mov	r6, r3
   834cc:	4d13      	ldr	r5, [pc, #76]	; (8351c <usart_serial_putchar+0x8c>)
   834ce:	4621      	mov	r1, r4
   834d0:	4630      	mov	r0, r6
   834d2:	47a8      	blx	r5
   834d4:	2800      	cmp	r0, #0
   834d6:	d1fa      	bne.n	834ce <usart_serial_putchar+0x3e>
		return 1;
   834d8:	2001      	movs	r0, #1
   834da:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   834dc:	4b11      	ldr	r3, [pc, #68]	; (83524 <usart_serial_putchar+0x94>)
   834de:	4298      	cmp	r0, r3
   834e0:	d108      	bne.n	834f4 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   834e2:	461e      	mov	r6, r3
   834e4:	4d0d      	ldr	r5, [pc, #52]	; (8351c <usart_serial_putchar+0x8c>)
   834e6:	4621      	mov	r1, r4
   834e8:	4630      	mov	r0, r6
   834ea:	47a8      	blx	r5
   834ec:	2800      	cmp	r0, #0
   834ee:	d1fa      	bne.n	834e6 <usart_serial_putchar+0x56>
		return 1;
   834f0:	2001      	movs	r0, #1
   834f2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   834f4:	4b0c      	ldr	r3, [pc, #48]	; (83528 <usart_serial_putchar+0x98>)
   834f6:	4298      	cmp	r0, r3
   834f8:	d108      	bne.n	8350c <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   834fa:	461e      	mov	r6, r3
   834fc:	4d07      	ldr	r5, [pc, #28]	; (8351c <usart_serial_putchar+0x8c>)
   834fe:	4621      	mov	r1, r4
   83500:	4630      	mov	r0, r6
   83502:	47a8      	blx	r5
   83504:	2800      	cmp	r0, #0
   83506:	d1fa      	bne.n	834fe <usart_serial_putchar+0x6e>
		return 1;
   83508:	2001      	movs	r0, #1
   8350a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8350c:	2000      	movs	r0, #0
}
   8350e:	bd70      	pop	{r4, r5, r6, pc}
   83510:	400e0800 	.word	0x400e0800
   83514:	00080241 	.word	0x00080241
   83518:	40098000 	.word	0x40098000
   8351c:	0008018d 	.word	0x0008018d
   83520:	4009c000 	.word	0x4009c000
   83524:	400a0000 	.word	0x400a0000
   83528:	400a4000 	.word	0x400a4000

0008352c <main>:
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
}

int main( void )
{
   8352c:	b500      	push	{lr}
   8352e:	b089      	sub	sp, #36	; 0x24
	sysclk_init();
   83530:	4b23      	ldr	r3, [pc, #140]	; (835c0 <main+0x94>)
   83532:	4798      	blx	r3
	board_init();
   83534:	4b23      	ldr	r3, [pc, #140]	; (835c4 <main+0x98>)
   83536:	4798      	blx	r3
   83538:	2008      	movs	r0, #8
   8353a:	4d23      	ldr	r5, [pc, #140]	; (835c8 <main+0x9c>)
   8353c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8353e:	4c23      	ldr	r4, [pc, #140]	; (835cc <main+0xa0>)
   83540:	4b23      	ldr	r3, [pc, #140]	; (835d0 <main+0xa4>)
   83542:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   83544:	4a23      	ldr	r2, [pc, #140]	; (835d4 <main+0xa8>)
   83546:	4b24      	ldr	r3, [pc, #144]	; (835d8 <main+0xac>)
   83548:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8354a:	4a24      	ldr	r2, [pc, #144]	; (835dc <main+0xb0>)
   8354c:	4b24      	ldr	r3, [pc, #144]	; (835e0 <main+0xb4>)
   8354e:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   83550:	4b24      	ldr	r3, [pc, #144]	; (835e4 <main+0xb8>)
   83552:	9305      	str	r3, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
   83554:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   83558:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
   8355a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8355e:	9307      	str	r3, [sp, #28]
   83560:	2008      	movs	r0, #8
   83562:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   83564:	a905      	add	r1, sp, #20
   83566:	4620      	mov	r0, r4
   83568:	4b1f      	ldr	r3, [pc, #124]	; (835e8 <main+0xbc>)
   8356a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8356c:	4d1f      	ldr	r5, [pc, #124]	; (835ec <main+0xc0>)
   8356e:	682b      	ldr	r3, [r5, #0]
   83570:	2100      	movs	r1, #0
   83572:	6898      	ldr	r0, [r3, #8]
   83574:	4c1e      	ldr	r4, [pc, #120]	; (835f0 <main+0xc4>)
   83576:	47a0      	blx	r4
	setbuf(stdin, NULL);
   83578:	682b      	ldr	r3, [r5, #0]
   8357a:	2100      	movs	r1, #0
   8357c:	6858      	ldr	r0, [r3, #4]
   8357e:	47a0      	blx	r4
	
	configure_console();
	
	
	/* Output example information */
	puts(STRING_HEADER);
   83580:	481c      	ldr	r0, [pc, #112]	; (835f4 <main+0xc8>)
   83582:	4b1d      	ldr	r3, [pc, #116]	; (835f8 <main+0xcc>)
   83584:	4798      	blx	r3

#if (configUSE_TRACE_FACILITY == 1)
	/*Allocates, if necessary, and initializes the recorder data structure */
	vTraceInitTraceData();
   83586:	4b1d      	ldr	r3, [pc, #116]	; (835fc <main+0xd0>)
   83588:	4798      	blx	r3

	/*Starts the recorder*/
	uiTraceStart();
   8358a:	4b1d      	ldr	r3, [pc, #116]	; (83600 <main+0xd4>)
   8358c:	4798      	blx	r3
#endif
	
	/* Create one of the two tasks. */
	xTaskCreate(	vTask1,		/* Pointer to the function that implements the task. */
   8358e:	2400      	movs	r4, #0
   83590:	9403      	str	r4, [sp, #12]
   83592:	9402      	str	r4, [sp, #8]
   83594:	9401      	str	r4, [sp, #4]
   83596:	2601      	movs	r6, #1
   83598:	9600      	str	r6, [sp, #0]
   8359a:	4623      	mov	r3, r4
   8359c:	22f0      	movs	r2, #240	; 0xf0
   8359e:	4919      	ldr	r1, [pc, #100]	; (83604 <main+0xd8>)
   835a0:	4819      	ldr	r0, [pc, #100]	; (83608 <main+0xdc>)
   835a2:	4d1a      	ldr	r5, [pc, #104]	; (8360c <main+0xe0>)
   835a4:	47a8      	blx	r5
					NULL,		/* We are not using the task parameter. */
					1,			/* This task will run at priority 1. */
					NULL );		/* We are not using the task handle. */

	/* Create the other task in exactly the same way. */
	xTaskCreate( vTask2, "Task 2", 240, NULL, 1, NULL );
   835a6:	9403      	str	r4, [sp, #12]
   835a8:	9402      	str	r4, [sp, #8]
   835aa:	9401      	str	r4, [sp, #4]
   835ac:	9600      	str	r6, [sp, #0]
   835ae:	4623      	mov	r3, r4
   835b0:	22f0      	movs	r2, #240	; 0xf0
   835b2:	4917      	ldr	r1, [pc, #92]	; (83610 <main+0xe4>)
   835b4:	4817      	ldr	r0, [pc, #92]	; (83614 <main+0xe8>)
   835b6:	47a8      	blx	r5

	/* Start the scheduler so our tasks start executing. */
	vTaskStartScheduler();
   835b8:	4b17      	ldr	r3, [pc, #92]	; (83618 <main+0xec>)
   835ba:	4798      	blx	r3
   835bc:	e7fe      	b.n	835bc <main+0x90>
   835be:	bf00      	nop
   835c0:	00081c81 	.word	0x00081c81
   835c4:	00081ce5 	.word	0x00081ce5
   835c8:	00082109 	.word	0x00082109
   835cc:	400e0800 	.word	0x400e0800
   835d0:	2007ac6c 	.word	0x2007ac6c
   835d4:	00083491 	.word	0x00083491
   835d8:	2007ac68 	.word	0x2007ac68
   835dc:	000833e9 	.word	0x000833e9
   835e0:	2007ac64 	.word	0x2007ac64
   835e4:	0501bd00 	.word	0x0501bd00
   835e8:	00080209 	.word	0x00080209
   835ec:	20070570 	.word	0x20070570
   835f0:	00083871 	.word	0x00083871
   835f4:	00086560 	.word	0x00086560
   835f8:	00083861 	.word	0x00083861
   835fc:	000832d1 	.word	0x000832d1
   83600:	000832dd 	.word	0x000832dd
   83604:	000865bc 	.word	0x000865bc
   83608:	00083381 	.word	0x00083381
   8360c:	00080e91 	.word	0x00080e91
   83610:	000865c4 	.word	0x000865c4
   83614:	000833b5 	.word	0x000833b5
   83618:	000810fd 	.word	0x000810fd

0008361c <vApplicationMallocFailedHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
   8361c:	e7fe      	b.n	8361c <vApplicationMallocFailedHook>
   8361e:	bf00      	nop

00083620 <__libc_init_array>:
   83620:	b570      	push	{r4, r5, r6, lr}
   83622:	4e0f      	ldr	r6, [pc, #60]	; (83660 <__libc_init_array+0x40>)
   83624:	4d0f      	ldr	r5, [pc, #60]	; (83664 <__libc_init_array+0x44>)
   83626:	1b76      	subs	r6, r6, r5
   83628:	10b6      	asrs	r6, r6, #2
   8362a:	bf18      	it	ne
   8362c:	2400      	movne	r4, #0
   8362e:	d005      	beq.n	8363c <__libc_init_array+0x1c>
   83630:	3401      	adds	r4, #1
   83632:	f855 3b04 	ldr.w	r3, [r5], #4
   83636:	4798      	blx	r3
   83638:	42a6      	cmp	r6, r4
   8363a:	d1f9      	bne.n	83630 <__libc_init_array+0x10>
   8363c:	4e0a      	ldr	r6, [pc, #40]	; (83668 <__libc_init_array+0x48>)
   8363e:	4d0b      	ldr	r5, [pc, #44]	; (8366c <__libc_init_array+0x4c>)
   83640:	f002 ffc8 	bl	865d4 <_init>
   83644:	1b76      	subs	r6, r6, r5
   83646:	10b6      	asrs	r6, r6, #2
   83648:	bf18      	it	ne
   8364a:	2400      	movne	r4, #0
   8364c:	d006      	beq.n	8365c <__libc_init_array+0x3c>
   8364e:	3401      	adds	r4, #1
   83650:	f855 3b04 	ldr.w	r3, [r5], #4
   83654:	4798      	blx	r3
   83656:	42a6      	cmp	r6, r4
   83658:	d1f9      	bne.n	8364e <__libc_init_array+0x2e>
   8365a:	bd70      	pop	{r4, r5, r6, pc}
   8365c:	bd70      	pop	{r4, r5, r6, pc}
   8365e:	bf00      	nop
   83660:	000865e0 	.word	0x000865e0
   83664:	000865e0 	.word	0x000865e0
   83668:	000865e8 	.word	0x000865e8
   8366c:	000865e0 	.word	0x000865e0

00083670 <memcpy>:
   83670:	4684      	mov	ip, r0
   83672:	ea41 0300 	orr.w	r3, r1, r0
   83676:	f013 0303 	ands.w	r3, r3, #3
   8367a:	d149      	bne.n	83710 <memcpy+0xa0>
   8367c:	3a40      	subs	r2, #64	; 0x40
   8367e:	d323      	bcc.n	836c8 <memcpy+0x58>
   83680:	680b      	ldr	r3, [r1, #0]
   83682:	6003      	str	r3, [r0, #0]
   83684:	684b      	ldr	r3, [r1, #4]
   83686:	6043      	str	r3, [r0, #4]
   83688:	688b      	ldr	r3, [r1, #8]
   8368a:	6083      	str	r3, [r0, #8]
   8368c:	68cb      	ldr	r3, [r1, #12]
   8368e:	60c3      	str	r3, [r0, #12]
   83690:	690b      	ldr	r3, [r1, #16]
   83692:	6103      	str	r3, [r0, #16]
   83694:	694b      	ldr	r3, [r1, #20]
   83696:	6143      	str	r3, [r0, #20]
   83698:	698b      	ldr	r3, [r1, #24]
   8369a:	6183      	str	r3, [r0, #24]
   8369c:	69cb      	ldr	r3, [r1, #28]
   8369e:	61c3      	str	r3, [r0, #28]
   836a0:	6a0b      	ldr	r3, [r1, #32]
   836a2:	6203      	str	r3, [r0, #32]
   836a4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   836a6:	6243      	str	r3, [r0, #36]	; 0x24
   836a8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   836aa:	6283      	str	r3, [r0, #40]	; 0x28
   836ac:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   836ae:	62c3      	str	r3, [r0, #44]	; 0x2c
   836b0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   836b2:	6303      	str	r3, [r0, #48]	; 0x30
   836b4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   836b6:	6343      	str	r3, [r0, #52]	; 0x34
   836b8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   836ba:	6383      	str	r3, [r0, #56]	; 0x38
   836bc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   836be:	63c3      	str	r3, [r0, #60]	; 0x3c
   836c0:	3040      	adds	r0, #64	; 0x40
   836c2:	3140      	adds	r1, #64	; 0x40
   836c4:	3a40      	subs	r2, #64	; 0x40
   836c6:	d2db      	bcs.n	83680 <memcpy+0x10>
   836c8:	3230      	adds	r2, #48	; 0x30
   836ca:	d30b      	bcc.n	836e4 <memcpy+0x74>
   836cc:	680b      	ldr	r3, [r1, #0]
   836ce:	6003      	str	r3, [r0, #0]
   836d0:	684b      	ldr	r3, [r1, #4]
   836d2:	6043      	str	r3, [r0, #4]
   836d4:	688b      	ldr	r3, [r1, #8]
   836d6:	6083      	str	r3, [r0, #8]
   836d8:	68cb      	ldr	r3, [r1, #12]
   836da:	60c3      	str	r3, [r0, #12]
   836dc:	3010      	adds	r0, #16
   836de:	3110      	adds	r1, #16
   836e0:	3a10      	subs	r2, #16
   836e2:	d2f3      	bcs.n	836cc <memcpy+0x5c>
   836e4:	320c      	adds	r2, #12
   836e6:	d305      	bcc.n	836f4 <memcpy+0x84>
   836e8:	f851 3b04 	ldr.w	r3, [r1], #4
   836ec:	f840 3b04 	str.w	r3, [r0], #4
   836f0:	3a04      	subs	r2, #4
   836f2:	d2f9      	bcs.n	836e8 <memcpy+0x78>
   836f4:	3204      	adds	r2, #4
   836f6:	d008      	beq.n	8370a <memcpy+0x9a>
   836f8:	07d2      	lsls	r2, r2, #31
   836fa:	bf1c      	itt	ne
   836fc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83700:	f800 3b01 	strbne.w	r3, [r0], #1
   83704:	d301      	bcc.n	8370a <memcpy+0x9a>
   83706:	880b      	ldrh	r3, [r1, #0]
   83708:	8003      	strh	r3, [r0, #0]
   8370a:	4660      	mov	r0, ip
   8370c:	4770      	bx	lr
   8370e:	bf00      	nop
   83710:	2a08      	cmp	r2, #8
   83712:	d313      	bcc.n	8373c <memcpy+0xcc>
   83714:	078b      	lsls	r3, r1, #30
   83716:	d0b1      	beq.n	8367c <memcpy+0xc>
   83718:	f010 0303 	ands.w	r3, r0, #3
   8371c:	d0ae      	beq.n	8367c <memcpy+0xc>
   8371e:	f1c3 0304 	rsb	r3, r3, #4
   83722:	1ad2      	subs	r2, r2, r3
   83724:	07db      	lsls	r3, r3, #31
   83726:	bf1c      	itt	ne
   83728:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8372c:	f800 3b01 	strbne.w	r3, [r0], #1
   83730:	d3a4      	bcc.n	8367c <memcpy+0xc>
   83732:	f831 3b02 	ldrh.w	r3, [r1], #2
   83736:	f820 3b02 	strh.w	r3, [r0], #2
   8373a:	e79f      	b.n	8367c <memcpy+0xc>
   8373c:	3a04      	subs	r2, #4
   8373e:	d3d9      	bcc.n	836f4 <memcpy+0x84>
   83740:	3a01      	subs	r2, #1
   83742:	f811 3b01 	ldrb.w	r3, [r1], #1
   83746:	f800 3b01 	strb.w	r3, [r0], #1
   8374a:	d2f9      	bcs.n	83740 <memcpy+0xd0>
   8374c:	780b      	ldrb	r3, [r1, #0]
   8374e:	7003      	strb	r3, [r0, #0]
   83750:	784b      	ldrb	r3, [r1, #1]
   83752:	7043      	strb	r3, [r0, #1]
   83754:	788b      	ldrb	r3, [r1, #2]
   83756:	7083      	strb	r3, [r0, #2]
   83758:	4660      	mov	r0, ip
   8375a:	4770      	bx	lr

0008375c <memset>:
   8375c:	b470      	push	{r4, r5, r6}
   8375e:	0784      	lsls	r4, r0, #30
   83760:	d046      	beq.n	837f0 <memset+0x94>
   83762:	1e54      	subs	r4, r2, #1
   83764:	2a00      	cmp	r2, #0
   83766:	d041      	beq.n	837ec <memset+0x90>
   83768:	b2cd      	uxtb	r5, r1
   8376a:	4603      	mov	r3, r0
   8376c:	e002      	b.n	83774 <memset+0x18>
   8376e:	1e62      	subs	r2, r4, #1
   83770:	b3e4      	cbz	r4, 837ec <memset+0x90>
   83772:	4614      	mov	r4, r2
   83774:	f803 5b01 	strb.w	r5, [r3], #1
   83778:	079a      	lsls	r2, r3, #30
   8377a:	d1f8      	bne.n	8376e <memset+0x12>
   8377c:	2c03      	cmp	r4, #3
   8377e:	d92e      	bls.n	837de <memset+0x82>
   83780:	b2cd      	uxtb	r5, r1
   83782:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83786:	2c0f      	cmp	r4, #15
   83788:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8378c:	d919      	bls.n	837c2 <memset+0x66>
   8378e:	4626      	mov	r6, r4
   83790:	f103 0210 	add.w	r2, r3, #16
   83794:	3e10      	subs	r6, #16
   83796:	2e0f      	cmp	r6, #15
   83798:	f842 5c10 	str.w	r5, [r2, #-16]
   8379c:	f842 5c0c 	str.w	r5, [r2, #-12]
   837a0:	f842 5c08 	str.w	r5, [r2, #-8]
   837a4:	f842 5c04 	str.w	r5, [r2, #-4]
   837a8:	f102 0210 	add.w	r2, r2, #16
   837ac:	d8f2      	bhi.n	83794 <memset+0x38>
   837ae:	f1a4 0210 	sub.w	r2, r4, #16
   837b2:	f022 020f 	bic.w	r2, r2, #15
   837b6:	f004 040f 	and.w	r4, r4, #15
   837ba:	3210      	adds	r2, #16
   837bc:	2c03      	cmp	r4, #3
   837be:	4413      	add	r3, r2
   837c0:	d90d      	bls.n	837de <memset+0x82>
   837c2:	461e      	mov	r6, r3
   837c4:	4622      	mov	r2, r4
   837c6:	3a04      	subs	r2, #4
   837c8:	2a03      	cmp	r2, #3
   837ca:	f846 5b04 	str.w	r5, [r6], #4
   837ce:	d8fa      	bhi.n	837c6 <memset+0x6a>
   837d0:	1f22      	subs	r2, r4, #4
   837d2:	f022 0203 	bic.w	r2, r2, #3
   837d6:	3204      	adds	r2, #4
   837d8:	4413      	add	r3, r2
   837da:	f004 0403 	and.w	r4, r4, #3
   837de:	b12c      	cbz	r4, 837ec <memset+0x90>
   837e0:	b2c9      	uxtb	r1, r1
   837e2:	441c      	add	r4, r3
   837e4:	f803 1b01 	strb.w	r1, [r3], #1
   837e8:	42a3      	cmp	r3, r4
   837ea:	d1fb      	bne.n	837e4 <memset+0x88>
   837ec:	bc70      	pop	{r4, r5, r6}
   837ee:	4770      	bx	lr
   837f0:	4614      	mov	r4, r2
   837f2:	4603      	mov	r3, r0
   837f4:	e7c2      	b.n	8377c <memset+0x20>
   837f6:	bf00      	nop

000837f8 <_puts_r>:
   837f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   837fa:	4605      	mov	r5, r0
   837fc:	b089      	sub	sp, #36	; 0x24
   837fe:	4608      	mov	r0, r1
   83800:	460c      	mov	r4, r1
   83802:	f000 f8e5 	bl	839d0 <strlen>
   83806:	1c43      	adds	r3, r0, #1
   83808:	4f14      	ldr	r7, [pc, #80]	; (8385c <_puts_r+0x64>)
   8380a:	9303      	str	r3, [sp, #12]
   8380c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8380e:	2601      	movs	r6, #1
   83810:	a904      	add	r1, sp, #16
   83812:	2202      	movs	r2, #2
   83814:	9404      	str	r4, [sp, #16]
   83816:	9005      	str	r0, [sp, #20]
   83818:	68ac      	ldr	r4, [r5, #8]
   8381a:	9706      	str	r7, [sp, #24]
   8381c:	9607      	str	r6, [sp, #28]
   8381e:	9101      	str	r1, [sp, #4]
   83820:	9202      	str	r2, [sp, #8]
   83822:	b1b3      	cbz	r3, 83852 <_puts_r+0x5a>
   83824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83828:	049a      	lsls	r2, r3, #18
   8382a:	d406      	bmi.n	8383a <_puts_r+0x42>
   8382c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8382e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   83836:	81a3      	strh	r3, [r4, #12]
   83838:	6662      	str	r2, [r4, #100]	; 0x64
   8383a:	4621      	mov	r1, r4
   8383c:	4628      	mov	r0, r5
   8383e:	aa01      	add	r2, sp, #4
   83840:	f000 fbc4 	bl	83fcc <__sfvwrite_r>
   83844:	2800      	cmp	r0, #0
   83846:	bf14      	ite	ne
   83848:	f04f 30ff 	movne.w	r0, #4294967295
   8384c:	200a      	moveq	r0, #10
   8384e:	b009      	add	sp, #36	; 0x24
   83850:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83852:	4628      	mov	r0, r5
   83854:	f000 fa66 	bl	83d24 <__sinit>
   83858:	e7e4      	b.n	83824 <_puts_r+0x2c>
   8385a:	bf00      	nop
   8385c:	00085244 	.word	0x00085244

00083860 <puts>:
   83860:	4b02      	ldr	r3, [pc, #8]	; (8386c <puts+0xc>)
   83862:	4601      	mov	r1, r0
   83864:	6818      	ldr	r0, [r3, #0]
   83866:	f7ff bfc7 	b.w	837f8 <_puts_r>
   8386a:	bf00      	nop
   8386c:	20070570 	.word	0x20070570

00083870 <setbuf>:
   83870:	2900      	cmp	r1, #0
   83872:	bf0c      	ite	eq
   83874:	2202      	moveq	r2, #2
   83876:	2200      	movne	r2, #0
   83878:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8387c:	f000 b800 	b.w	83880 <setvbuf>

00083880 <setvbuf>:
   83880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83884:	4d51      	ldr	r5, [pc, #324]	; (839cc <setvbuf+0x14c>)
   83886:	b083      	sub	sp, #12
   83888:	682d      	ldr	r5, [r5, #0]
   8388a:	4604      	mov	r4, r0
   8388c:	460f      	mov	r7, r1
   8388e:	4690      	mov	r8, r2
   83890:	461e      	mov	r6, r3
   83892:	b115      	cbz	r5, 8389a <setvbuf+0x1a>
   83894:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83896:	2b00      	cmp	r3, #0
   83898:	d079      	beq.n	8398e <setvbuf+0x10e>
   8389a:	f1b8 0f02 	cmp.w	r8, #2
   8389e:	d004      	beq.n	838aa <setvbuf+0x2a>
   838a0:	f1b8 0f01 	cmp.w	r8, #1
   838a4:	d87f      	bhi.n	839a6 <setvbuf+0x126>
   838a6:	2e00      	cmp	r6, #0
   838a8:	db7d      	blt.n	839a6 <setvbuf+0x126>
   838aa:	4621      	mov	r1, r4
   838ac:	4628      	mov	r0, r5
   838ae:	f000 f9a5 	bl	83bfc <_fflush_r>
   838b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   838b4:	b141      	cbz	r1, 838c8 <setvbuf+0x48>
   838b6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   838ba:	4299      	cmp	r1, r3
   838bc:	d002      	beq.n	838c4 <setvbuf+0x44>
   838be:	4628      	mov	r0, r5
   838c0:	f000 fa9c 	bl	83dfc <_free_r>
   838c4:	2300      	movs	r3, #0
   838c6:	6323      	str	r3, [r4, #48]	; 0x30
   838c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   838cc:	2200      	movs	r2, #0
   838ce:	61a2      	str	r2, [r4, #24]
   838d0:	6062      	str	r2, [r4, #4]
   838d2:	061a      	lsls	r2, r3, #24
   838d4:	d454      	bmi.n	83980 <setvbuf+0x100>
   838d6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   838da:	f023 0303 	bic.w	r3, r3, #3
   838de:	f1b8 0f02 	cmp.w	r8, #2
   838e2:	81a3      	strh	r3, [r4, #12]
   838e4:	d039      	beq.n	8395a <setvbuf+0xda>
   838e6:	ab01      	add	r3, sp, #4
   838e8:	466a      	mov	r2, sp
   838ea:	4621      	mov	r1, r4
   838ec:	4628      	mov	r0, r5
   838ee:	f000 fd19 	bl	84324 <__swhatbuf_r>
   838f2:	89a3      	ldrh	r3, [r4, #12]
   838f4:	4318      	orrs	r0, r3
   838f6:	81a0      	strh	r0, [r4, #12]
   838f8:	b326      	cbz	r6, 83944 <setvbuf+0xc4>
   838fa:	b327      	cbz	r7, 83946 <setvbuf+0xc6>
   838fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   838fe:	2b00      	cmp	r3, #0
   83900:	d04d      	beq.n	8399e <setvbuf+0x11e>
   83902:	9b00      	ldr	r3, [sp, #0]
   83904:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   83908:	429e      	cmp	r6, r3
   8390a:	bf1c      	itt	ne
   8390c:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   83910:	81a0      	strhne	r0, [r4, #12]
   83912:	f1b8 0f01 	cmp.w	r8, #1
   83916:	bf08      	it	eq
   83918:	f040 0001 	orreq.w	r0, r0, #1
   8391c:	b283      	uxth	r3, r0
   8391e:	bf08      	it	eq
   83920:	81a0      	strheq	r0, [r4, #12]
   83922:	f003 0008 	and.w	r0, r3, #8
   83926:	b280      	uxth	r0, r0
   83928:	6027      	str	r7, [r4, #0]
   8392a:	6127      	str	r7, [r4, #16]
   8392c:	6166      	str	r6, [r4, #20]
   8392e:	b318      	cbz	r0, 83978 <setvbuf+0xf8>
   83930:	f013 0001 	ands.w	r0, r3, #1
   83934:	d02f      	beq.n	83996 <setvbuf+0x116>
   83936:	2000      	movs	r0, #0
   83938:	4276      	negs	r6, r6
   8393a:	61a6      	str	r6, [r4, #24]
   8393c:	60a0      	str	r0, [r4, #8]
   8393e:	b003      	add	sp, #12
   83940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83944:	9e00      	ldr	r6, [sp, #0]
   83946:	4630      	mov	r0, r6
   83948:	f000 fd60 	bl	8440c <malloc>
   8394c:	4607      	mov	r7, r0
   8394e:	b368      	cbz	r0, 839ac <setvbuf+0x12c>
   83950:	89a3      	ldrh	r3, [r4, #12]
   83952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83956:	81a3      	strh	r3, [r4, #12]
   83958:	e7d0      	b.n	838fc <setvbuf+0x7c>
   8395a:	2000      	movs	r0, #0
   8395c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83960:	f043 0302 	orr.w	r3, r3, #2
   83964:	2500      	movs	r5, #0
   83966:	2101      	movs	r1, #1
   83968:	81a3      	strh	r3, [r4, #12]
   8396a:	60a5      	str	r5, [r4, #8]
   8396c:	6022      	str	r2, [r4, #0]
   8396e:	6122      	str	r2, [r4, #16]
   83970:	6161      	str	r1, [r4, #20]
   83972:	b003      	add	sp, #12
   83974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83978:	60a0      	str	r0, [r4, #8]
   8397a:	b003      	add	sp, #12
   8397c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83980:	6921      	ldr	r1, [r4, #16]
   83982:	4628      	mov	r0, r5
   83984:	f000 fa3a 	bl	83dfc <_free_r>
   83988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8398c:	e7a3      	b.n	838d6 <setvbuf+0x56>
   8398e:	4628      	mov	r0, r5
   83990:	f000 f9c8 	bl	83d24 <__sinit>
   83994:	e781      	b.n	8389a <setvbuf+0x1a>
   83996:	60a6      	str	r6, [r4, #8]
   83998:	b003      	add	sp, #12
   8399a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8399e:	4628      	mov	r0, r5
   839a0:	f000 f9c0 	bl	83d24 <__sinit>
   839a4:	e7ad      	b.n	83902 <setvbuf+0x82>
   839a6:	f04f 30ff 	mov.w	r0, #4294967295
   839aa:	e7e2      	b.n	83972 <setvbuf+0xf2>
   839ac:	f8dd 9000 	ldr.w	r9, [sp]
   839b0:	45b1      	cmp	r9, r6
   839b2:	d006      	beq.n	839c2 <setvbuf+0x142>
   839b4:	4648      	mov	r0, r9
   839b6:	f000 fd29 	bl	8440c <malloc>
   839ba:	4607      	mov	r7, r0
   839bc:	b108      	cbz	r0, 839c2 <setvbuf+0x142>
   839be:	464e      	mov	r6, r9
   839c0:	e7c6      	b.n	83950 <setvbuf+0xd0>
   839c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   839c6:	f04f 30ff 	mov.w	r0, #4294967295
   839ca:	e7c7      	b.n	8395c <setvbuf+0xdc>
   839cc:	20070570 	.word	0x20070570

000839d0 <strlen>:
   839d0:	f020 0103 	bic.w	r1, r0, #3
   839d4:	f010 0003 	ands.w	r0, r0, #3
   839d8:	f1c0 0000 	rsb	r0, r0, #0
   839dc:	f851 3b04 	ldr.w	r3, [r1], #4
   839e0:	f100 0c04 	add.w	ip, r0, #4
   839e4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   839e8:	f06f 0200 	mvn.w	r2, #0
   839ec:	bf1c      	itt	ne
   839ee:	fa22 f20c 	lsrne.w	r2, r2, ip
   839f2:	4313      	orrne	r3, r2
   839f4:	f04f 0c01 	mov.w	ip, #1
   839f8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   839fc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83a00:	eba3 020c 	sub.w	r2, r3, ip
   83a04:	ea22 0203 	bic.w	r2, r2, r3
   83a08:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83a0c:	bf04      	itt	eq
   83a0e:	f851 3b04 	ldreq.w	r3, [r1], #4
   83a12:	3004      	addeq	r0, #4
   83a14:	d0f4      	beq.n	83a00 <strlen+0x30>
   83a16:	f1c2 0100 	rsb	r1, r2, #0
   83a1a:	ea02 0201 	and.w	r2, r2, r1
   83a1e:	fab2 f282 	clz	r2, r2
   83a22:	f1c2 021f 	rsb	r2, r2, #31
   83a26:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83a2a:	4770      	bx	lr

00083a2c <strncpy>:
   83a2c:	ea40 0301 	orr.w	r3, r0, r1
   83a30:	079b      	lsls	r3, r3, #30
   83a32:	b470      	push	{r4, r5, r6}
   83a34:	d12b      	bne.n	83a8e <strncpy+0x62>
   83a36:	2a03      	cmp	r2, #3
   83a38:	d929      	bls.n	83a8e <strncpy+0x62>
   83a3a:	460c      	mov	r4, r1
   83a3c:	4603      	mov	r3, r0
   83a3e:	4621      	mov	r1, r4
   83a40:	f854 6b04 	ldr.w	r6, [r4], #4
   83a44:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   83a48:	ea25 0506 	bic.w	r5, r5, r6
   83a4c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   83a50:	d106      	bne.n	83a60 <strncpy+0x34>
   83a52:	3a04      	subs	r2, #4
   83a54:	2a03      	cmp	r2, #3
   83a56:	f843 6b04 	str.w	r6, [r3], #4
   83a5a:	4621      	mov	r1, r4
   83a5c:	d8ef      	bhi.n	83a3e <strncpy+0x12>
   83a5e:	b1a2      	cbz	r2, 83a8a <strncpy+0x5e>
   83a60:	780c      	ldrb	r4, [r1, #0]
   83a62:	3a01      	subs	r2, #1
   83a64:	701c      	strb	r4, [r3, #0]
   83a66:	3101      	adds	r1, #1
   83a68:	3301      	adds	r3, #1
   83a6a:	b13c      	cbz	r4, 83a7c <strncpy+0x50>
   83a6c:	b16a      	cbz	r2, 83a8a <strncpy+0x5e>
   83a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
   83a72:	3a01      	subs	r2, #1
   83a74:	f803 4b01 	strb.w	r4, [r3], #1
   83a78:	2c00      	cmp	r4, #0
   83a7a:	d1f7      	bne.n	83a6c <strncpy+0x40>
   83a7c:	b12a      	cbz	r2, 83a8a <strncpy+0x5e>
   83a7e:	441a      	add	r2, r3
   83a80:	2100      	movs	r1, #0
   83a82:	f803 1b01 	strb.w	r1, [r3], #1
   83a86:	429a      	cmp	r2, r3
   83a88:	d1fb      	bne.n	83a82 <strncpy+0x56>
   83a8a:	bc70      	pop	{r4, r5, r6}
   83a8c:	4770      	bx	lr
   83a8e:	4603      	mov	r3, r0
   83a90:	e7e5      	b.n	83a5e <strncpy+0x32>
   83a92:	bf00      	nop

00083a94 <register_fini>:
   83a94:	4b02      	ldr	r3, [pc, #8]	; (83aa0 <register_fini+0xc>)
   83a96:	b113      	cbz	r3, 83a9e <register_fini+0xa>
   83a98:	4802      	ldr	r0, [pc, #8]	; (83aa4 <register_fini+0x10>)
   83a9a:	f000 b805 	b.w	83aa8 <atexit>
   83a9e:	4770      	bx	lr
   83aa0:	00000000 	.word	0x00000000
   83aa4:	00083d39 	.word	0x00083d39

00083aa8 <atexit>:
   83aa8:	2300      	movs	r3, #0
   83aaa:	4601      	mov	r1, r0
   83aac:	461a      	mov	r2, r3
   83aae:	4618      	mov	r0, r3
   83ab0:	f001 bac8 	b.w	85044 <__register_exitproc>

00083ab4 <__sflush_r>:
   83ab4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   83ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83abc:	b29a      	uxth	r2, r3
   83abe:	460d      	mov	r5, r1
   83ac0:	0711      	lsls	r1, r2, #28
   83ac2:	4680      	mov	r8, r0
   83ac4:	d43c      	bmi.n	83b40 <__sflush_r+0x8c>
   83ac6:	686a      	ldr	r2, [r5, #4]
   83ac8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83acc:	2a00      	cmp	r2, #0
   83ace:	81ab      	strh	r3, [r5, #12]
   83ad0:	dd73      	ble.n	83bba <__sflush_r+0x106>
   83ad2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83ad4:	2c00      	cmp	r4, #0
   83ad6:	d04b      	beq.n	83b70 <__sflush_r+0xbc>
   83ad8:	b29b      	uxth	r3, r3
   83ada:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   83ade:	2100      	movs	r1, #0
   83ae0:	b292      	uxth	r2, r2
   83ae2:	f8d8 6000 	ldr.w	r6, [r8]
   83ae6:	f8c8 1000 	str.w	r1, [r8]
   83aea:	2a00      	cmp	r2, #0
   83aec:	d069      	beq.n	83bc2 <__sflush_r+0x10e>
   83aee:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   83af0:	075f      	lsls	r7, r3, #29
   83af2:	d505      	bpl.n	83b00 <__sflush_r+0x4c>
   83af4:	6869      	ldr	r1, [r5, #4]
   83af6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   83af8:	1a52      	subs	r2, r2, r1
   83afa:	b10b      	cbz	r3, 83b00 <__sflush_r+0x4c>
   83afc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   83afe:	1ad2      	subs	r2, r2, r3
   83b00:	2300      	movs	r3, #0
   83b02:	69e9      	ldr	r1, [r5, #28]
   83b04:	4640      	mov	r0, r8
   83b06:	47a0      	blx	r4
   83b08:	1c44      	adds	r4, r0, #1
   83b0a:	d03c      	beq.n	83b86 <__sflush_r+0xd2>
   83b0c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   83b10:	6929      	ldr	r1, [r5, #16]
   83b12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83b16:	2200      	movs	r2, #0
   83b18:	81ab      	strh	r3, [r5, #12]
   83b1a:	04db      	lsls	r3, r3, #19
   83b1c:	e885 0006 	stmia.w	r5, {r1, r2}
   83b20:	d449      	bmi.n	83bb6 <__sflush_r+0x102>
   83b22:	6b29      	ldr	r1, [r5, #48]	; 0x30
   83b24:	f8c8 6000 	str.w	r6, [r8]
   83b28:	b311      	cbz	r1, 83b70 <__sflush_r+0xbc>
   83b2a:	f105 0340 	add.w	r3, r5, #64	; 0x40
   83b2e:	4299      	cmp	r1, r3
   83b30:	d002      	beq.n	83b38 <__sflush_r+0x84>
   83b32:	4640      	mov	r0, r8
   83b34:	f000 f962 	bl	83dfc <_free_r>
   83b38:	2000      	movs	r0, #0
   83b3a:	6328      	str	r0, [r5, #48]	; 0x30
   83b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b40:	692e      	ldr	r6, [r5, #16]
   83b42:	b1ae      	cbz	r6, 83b70 <__sflush_r+0xbc>
   83b44:	0790      	lsls	r0, r2, #30
   83b46:	682c      	ldr	r4, [r5, #0]
   83b48:	bf0c      	ite	eq
   83b4a:	696b      	ldreq	r3, [r5, #20]
   83b4c:	2300      	movne	r3, #0
   83b4e:	602e      	str	r6, [r5, #0]
   83b50:	1ba4      	subs	r4, r4, r6
   83b52:	60ab      	str	r3, [r5, #8]
   83b54:	e00a      	b.n	83b6c <__sflush_r+0xb8>
   83b56:	4623      	mov	r3, r4
   83b58:	4632      	mov	r2, r6
   83b5a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   83b5c:	69e9      	ldr	r1, [r5, #28]
   83b5e:	4640      	mov	r0, r8
   83b60:	47b8      	blx	r7
   83b62:	2800      	cmp	r0, #0
   83b64:	eba4 0400 	sub.w	r4, r4, r0
   83b68:	4406      	add	r6, r0
   83b6a:	dd04      	ble.n	83b76 <__sflush_r+0xc2>
   83b6c:	2c00      	cmp	r4, #0
   83b6e:	dcf2      	bgt.n	83b56 <__sflush_r+0xa2>
   83b70:	2000      	movs	r0, #0
   83b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b76:	89ab      	ldrh	r3, [r5, #12]
   83b78:	f04f 30ff 	mov.w	r0, #4294967295
   83b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83b80:	81ab      	strh	r3, [r5, #12]
   83b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b86:	f8d8 2000 	ldr.w	r2, [r8]
   83b8a:	2a1d      	cmp	r2, #29
   83b8c:	d8f3      	bhi.n	83b76 <__sflush_r+0xc2>
   83b8e:	4b1a      	ldr	r3, [pc, #104]	; (83bf8 <__sflush_r+0x144>)
   83b90:	40d3      	lsrs	r3, r2
   83b92:	f003 0301 	and.w	r3, r3, #1
   83b96:	f083 0401 	eor.w	r4, r3, #1
   83b9a:	2b00      	cmp	r3, #0
   83b9c:	d0eb      	beq.n	83b76 <__sflush_r+0xc2>
   83b9e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   83ba2:	6929      	ldr	r1, [r5, #16]
   83ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83ba8:	6029      	str	r1, [r5, #0]
   83baa:	04d9      	lsls	r1, r3, #19
   83bac:	606c      	str	r4, [r5, #4]
   83bae:	81ab      	strh	r3, [r5, #12]
   83bb0:	d5b7      	bpl.n	83b22 <__sflush_r+0x6e>
   83bb2:	2a00      	cmp	r2, #0
   83bb4:	d1b5      	bne.n	83b22 <__sflush_r+0x6e>
   83bb6:	6528      	str	r0, [r5, #80]	; 0x50
   83bb8:	e7b3      	b.n	83b22 <__sflush_r+0x6e>
   83bba:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   83bbc:	2a00      	cmp	r2, #0
   83bbe:	dc88      	bgt.n	83ad2 <__sflush_r+0x1e>
   83bc0:	e7d6      	b.n	83b70 <__sflush_r+0xbc>
   83bc2:	2301      	movs	r3, #1
   83bc4:	69e9      	ldr	r1, [r5, #28]
   83bc6:	4640      	mov	r0, r8
   83bc8:	47a0      	blx	r4
   83bca:	1c43      	adds	r3, r0, #1
   83bcc:	4602      	mov	r2, r0
   83bce:	d002      	beq.n	83bd6 <__sflush_r+0x122>
   83bd0:	89ab      	ldrh	r3, [r5, #12]
   83bd2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83bd4:	e78c      	b.n	83af0 <__sflush_r+0x3c>
   83bd6:	f8d8 3000 	ldr.w	r3, [r8]
   83bda:	2b00      	cmp	r3, #0
   83bdc:	d0f8      	beq.n	83bd0 <__sflush_r+0x11c>
   83bde:	2b1d      	cmp	r3, #29
   83be0:	d001      	beq.n	83be6 <__sflush_r+0x132>
   83be2:	2b16      	cmp	r3, #22
   83be4:	d102      	bne.n	83bec <__sflush_r+0x138>
   83be6:	f8c8 6000 	str.w	r6, [r8]
   83bea:	e7c1      	b.n	83b70 <__sflush_r+0xbc>
   83bec:	89ab      	ldrh	r3, [r5, #12]
   83bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83bf2:	81ab      	strh	r3, [r5, #12]
   83bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83bf8:	20400001 	.word	0x20400001

00083bfc <_fflush_r>:
   83bfc:	b510      	push	{r4, lr}
   83bfe:	4604      	mov	r4, r0
   83c00:	b082      	sub	sp, #8
   83c02:	b108      	cbz	r0, 83c08 <_fflush_r+0xc>
   83c04:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83c06:	b153      	cbz	r3, 83c1e <_fflush_r+0x22>
   83c08:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   83c0c:	b908      	cbnz	r0, 83c12 <_fflush_r+0x16>
   83c0e:	b002      	add	sp, #8
   83c10:	bd10      	pop	{r4, pc}
   83c12:	4620      	mov	r0, r4
   83c14:	b002      	add	sp, #8
   83c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83c1a:	f7ff bf4b 	b.w	83ab4 <__sflush_r>
   83c1e:	9101      	str	r1, [sp, #4]
   83c20:	f000 f880 	bl	83d24 <__sinit>
   83c24:	9901      	ldr	r1, [sp, #4]
   83c26:	e7ef      	b.n	83c08 <_fflush_r+0xc>

00083c28 <_cleanup_r>:
   83c28:	4901      	ldr	r1, [pc, #4]	; (83c30 <_cleanup_r+0x8>)
   83c2a:	f000 bb53 	b.w	842d4 <_fwalk_reent>
   83c2e:	bf00      	nop
   83c30:	0008510d 	.word	0x0008510d

00083c34 <__sinit.part.1>:
   83c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83c38:	4607      	mov	r7, r0
   83c3a:	4835      	ldr	r0, [pc, #212]	; (83d10 <__sinit.part.1+0xdc>)
   83c3c:	687d      	ldr	r5, [r7, #4]
   83c3e:	2400      	movs	r4, #0
   83c40:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   83c44:	2304      	movs	r3, #4
   83c46:	2103      	movs	r1, #3
   83c48:	63f8      	str	r0, [r7, #60]	; 0x3c
   83c4a:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   83c4e:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   83c52:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   83c56:	b083      	sub	sp, #12
   83c58:	602c      	str	r4, [r5, #0]
   83c5a:	606c      	str	r4, [r5, #4]
   83c5c:	60ac      	str	r4, [r5, #8]
   83c5e:	666c      	str	r4, [r5, #100]	; 0x64
   83c60:	81ec      	strh	r4, [r5, #14]
   83c62:	612c      	str	r4, [r5, #16]
   83c64:	616c      	str	r4, [r5, #20]
   83c66:	61ac      	str	r4, [r5, #24]
   83c68:	81ab      	strh	r3, [r5, #12]
   83c6a:	4621      	mov	r1, r4
   83c6c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83c70:	2208      	movs	r2, #8
   83c72:	f7ff fd73 	bl	8375c <memset>
   83c76:	f8df b09c 	ldr.w	fp, [pc, #156]	; 83d14 <__sinit.part.1+0xe0>
   83c7a:	68be      	ldr	r6, [r7, #8]
   83c7c:	f8df a098 	ldr.w	sl, [pc, #152]	; 83d18 <__sinit.part.1+0xe4>
   83c80:	f8df 9098 	ldr.w	r9, [pc, #152]	; 83d1c <__sinit.part.1+0xe8>
   83c84:	f8df 8098 	ldr.w	r8, [pc, #152]	; 83d20 <__sinit.part.1+0xec>
   83c88:	2301      	movs	r3, #1
   83c8a:	2209      	movs	r2, #9
   83c8c:	f8c5 b020 	str.w	fp, [r5, #32]
   83c90:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83c94:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   83c98:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83c9c:	61ed      	str	r5, [r5, #28]
   83c9e:	4621      	mov	r1, r4
   83ca0:	81f3      	strh	r3, [r6, #14]
   83ca2:	81b2      	strh	r2, [r6, #12]
   83ca4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   83ca8:	6034      	str	r4, [r6, #0]
   83caa:	6074      	str	r4, [r6, #4]
   83cac:	60b4      	str	r4, [r6, #8]
   83cae:	6674      	str	r4, [r6, #100]	; 0x64
   83cb0:	6134      	str	r4, [r6, #16]
   83cb2:	6174      	str	r4, [r6, #20]
   83cb4:	61b4      	str	r4, [r6, #24]
   83cb6:	2208      	movs	r2, #8
   83cb8:	9301      	str	r3, [sp, #4]
   83cba:	f7ff fd4f 	bl	8375c <memset>
   83cbe:	68fd      	ldr	r5, [r7, #12]
   83cc0:	2012      	movs	r0, #18
   83cc2:	2202      	movs	r2, #2
   83cc4:	61f6      	str	r6, [r6, #28]
   83cc6:	f8c6 b020 	str.w	fp, [r6, #32]
   83cca:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   83cce:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   83cd2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   83cd6:	4621      	mov	r1, r4
   83cd8:	81a8      	strh	r0, [r5, #12]
   83cda:	81ea      	strh	r2, [r5, #14]
   83cdc:	602c      	str	r4, [r5, #0]
   83cde:	606c      	str	r4, [r5, #4]
   83ce0:	60ac      	str	r4, [r5, #8]
   83ce2:	666c      	str	r4, [r5, #100]	; 0x64
   83ce4:	612c      	str	r4, [r5, #16]
   83ce6:	616c      	str	r4, [r5, #20]
   83ce8:	61ac      	str	r4, [r5, #24]
   83cea:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83cee:	2208      	movs	r2, #8
   83cf0:	f7ff fd34 	bl	8375c <memset>
   83cf4:	9b01      	ldr	r3, [sp, #4]
   83cf6:	61ed      	str	r5, [r5, #28]
   83cf8:	f8c5 b020 	str.w	fp, [r5, #32]
   83cfc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83d00:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   83d04:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83d08:	63bb      	str	r3, [r7, #56]	; 0x38
   83d0a:	b003      	add	sp, #12
   83d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d10:	00083c29 	.word	0x00083c29
   83d14:	00084ec9 	.word	0x00084ec9
   83d18:	00084eed 	.word	0x00084eed
   83d1c:	00084f29 	.word	0x00084f29
   83d20:	00084f49 	.word	0x00084f49

00083d24 <__sinit>:
   83d24:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83d26:	b103      	cbz	r3, 83d2a <__sinit+0x6>
   83d28:	4770      	bx	lr
   83d2a:	f7ff bf83 	b.w	83c34 <__sinit.part.1>
   83d2e:	bf00      	nop

00083d30 <__sfp_lock_acquire>:
   83d30:	4770      	bx	lr
   83d32:	bf00      	nop

00083d34 <__sfp_lock_release>:
   83d34:	4770      	bx	lr
   83d36:	bf00      	nop

00083d38 <__libc_fini_array>:
   83d38:	b538      	push	{r3, r4, r5, lr}
   83d3a:	4d07      	ldr	r5, [pc, #28]	; (83d58 <__libc_fini_array+0x20>)
   83d3c:	4c07      	ldr	r4, [pc, #28]	; (83d5c <__libc_fini_array+0x24>)
   83d3e:	1b2c      	subs	r4, r5, r4
   83d40:	10a4      	asrs	r4, r4, #2
   83d42:	d005      	beq.n	83d50 <__libc_fini_array+0x18>
   83d44:	3c01      	subs	r4, #1
   83d46:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   83d4a:	4798      	blx	r3
   83d4c:	2c00      	cmp	r4, #0
   83d4e:	d1f9      	bne.n	83d44 <__libc_fini_array+0xc>
   83d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83d54:	f002 bc48 	b.w	865e8 <_fini>
   83d58:	000865f8 	.word	0x000865f8
   83d5c:	000865f4 	.word	0x000865f4

00083d60 <_malloc_trim_r>:
   83d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83d62:	460c      	mov	r4, r1
   83d64:	4f22      	ldr	r7, [pc, #136]	; (83df0 <_malloc_trim_r+0x90>)
   83d66:	4606      	mov	r6, r0
   83d68:	f000 feae 	bl	84ac8 <__malloc_lock>
   83d6c:	68bb      	ldr	r3, [r7, #8]
   83d6e:	685d      	ldr	r5, [r3, #4]
   83d70:	f025 0503 	bic.w	r5, r5, #3
   83d74:	1b29      	subs	r1, r5, r4
   83d76:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   83d7a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83d7e:	f021 010f 	bic.w	r1, r1, #15
   83d82:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   83d86:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   83d8a:	db07      	blt.n	83d9c <_malloc_trim_r+0x3c>
   83d8c:	2100      	movs	r1, #0
   83d8e:	4630      	mov	r0, r6
   83d90:	f001 f888 	bl	84ea4 <_sbrk_r>
   83d94:	68bb      	ldr	r3, [r7, #8]
   83d96:	442b      	add	r3, r5
   83d98:	4298      	cmp	r0, r3
   83d9a:	d004      	beq.n	83da6 <_malloc_trim_r+0x46>
   83d9c:	4630      	mov	r0, r6
   83d9e:	f000 fe95 	bl	84acc <__malloc_unlock>
   83da2:	2000      	movs	r0, #0
   83da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83da6:	4261      	negs	r1, r4
   83da8:	4630      	mov	r0, r6
   83daa:	f001 f87b 	bl	84ea4 <_sbrk_r>
   83dae:	3001      	adds	r0, #1
   83db0:	d00d      	beq.n	83dce <_malloc_trim_r+0x6e>
   83db2:	4b10      	ldr	r3, [pc, #64]	; (83df4 <_malloc_trim_r+0x94>)
   83db4:	68ba      	ldr	r2, [r7, #8]
   83db6:	6819      	ldr	r1, [r3, #0]
   83db8:	1b2d      	subs	r5, r5, r4
   83dba:	f045 0501 	orr.w	r5, r5, #1
   83dbe:	4630      	mov	r0, r6
   83dc0:	1b09      	subs	r1, r1, r4
   83dc2:	6055      	str	r5, [r2, #4]
   83dc4:	6019      	str	r1, [r3, #0]
   83dc6:	f000 fe81 	bl	84acc <__malloc_unlock>
   83dca:	2001      	movs	r0, #1
   83dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83dce:	2100      	movs	r1, #0
   83dd0:	4630      	mov	r0, r6
   83dd2:	f001 f867 	bl	84ea4 <_sbrk_r>
   83dd6:	68ba      	ldr	r2, [r7, #8]
   83dd8:	1a83      	subs	r3, r0, r2
   83dda:	2b0f      	cmp	r3, #15
   83ddc:	ddde      	ble.n	83d9c <_malloc_trim_r+0x3c>
   83dde:	4c06      	ldr	r4, [pc, #24]	; (83df8 <_malloc_trim_r+0x98>)
   83de0:	4904      	ldr	r1, [pc, #16]	; (83df4 <_malloc_trim_r+0x94>)
   83de2:	6824      	ldr	r4, [r4, #0]
   83de4:	f043 0301 	orr.w	r3, r3, #1
   83de8:	1b00      	subs	r0, r0, r4
   83dea:	6053      	str	r3, [r2, #4]
   83dec:	6008      	str	r0, [r1, #0]
   83dee:	e7d5      	b.n	83d9c <_malloc_trim_r+0x3c>
   83df0:	20070574 	.word	0x20070574
   83df4:	2007ac3c 	.word	0x2007ac3c
   83df8:	20070980 	.word	0x20070980

00083dfc <_free_r>:
   83dfc:	2900      	cmp	r1, #0
   83dfe:	d045      	beq.n	83e8c <_free_r+0x90>
   83e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83e04:	460d      	mov	r5, r1
   83e06:	4680      	mov	r8, r0
   83e08:	f000 fe5e 	bl	84ac8 <__malloc_lock>
   83e0c:	f855 7c04 	ldr.w	r7, [r5, #-4]
   83e10:	496a      	ldr	r1, [pc, #424]	; (83fbc <_free_r+0x1c0>)
   83e12:	f1a5 0408 	sub.w	r4, r5, #8
   83e16:	f027 0301 	bic.w	r3, r7, #1
   83e1a:	18e2      	adds	r2, r4, r3
   83e1c:	688e      	ldr	r6, [r1, #8]
   83e1e:	6850      	ldr	r0, [r2, #4]
   83e20:	42b2      	cmp	r2, r6
   83e22:	f020 0003 	bic.w	r0, r0, #3
   83e26:	d062      	beq.n	83eee <_free_r+0xf2>
   83e28:	07fe      	lsls	r6, r7, #31
   83e2a:	6050      	str	r0, [r2, #4]
   83e2c:	d40b      	bmi.n	83e46 <_free_r+0x4a>
   83e2e:	f855 7c08 	ldr.w	r7, [r5, #-8]
   83e32:	f101 0e08 	add.w	lr, r1, #8
   83e36:	1be4      	subs	r4, r4, r7
   83e38:	68a5      	ldr	r5, [r4, #8]
   83e3a:	443b      	add	r3, r7
   83e3c:	4575      	cmp	r5, lr
   83e3e:	d06f      	beq.n	83f20 <_free_r+0x124>
   83e40:	68e7      	ldr	r7, [r4, #12]
   83e42:	60ef      	str	r7, [r5, #12]
   83e44:	60bd      	str	r5, [r7, #8]
   83e46:	1815      	adds	r5, r2, r0
   83e48:	686d      	ldr	r5, [r5, #4]
   83e4a:	07ed      	lsls	r5, r5, #31
   83e4c:	d542      	bpl.n	83ed4 <_free_r+0xd8>
   83e4e:	f043 0201 	orr.w	r2, r3, #1
   83e52:	6062      	str	r2, [r4, #4]
   83e54:	50e3      	str	r3, [r4, r3]
   83e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83e5a:	d218      	bcs.n	83e8e <_free_r+0x92>
   83e5c:	08db      	lsrs	r3, r3, #3
   83e5e:	6848      	ldr	r0, [r1, #4]
   83e60:	109d      	asrs	r5, r3, #2
   83e62:	2201      	movs	r2, #1
   83e64:	3301      	adds	r3, #1
   83e66:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   83e6a:	fa02 f505 	lsl.w	r5, r2, r5
   83e6e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   83e72:	4328      	orrs	r0, r5
   83e74:	3a08      	subs	r2, #8
   83e76:	60e2      	str	r2, [r4, #12]
   83e78:	60a7      	str	r7, [r4, #8]
   83e7a:	6048      	str	r0, [r1, #4]
   83e7c:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   83e80:	60fc      	str	r4, [r7, #12]
   83e82:	4640      	mov	r0, r8
   83e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83e88:	f000 be20 	b.w	84acc <__malloc_unlock>
   83e8c:	4770      	bx	lr
   83e8e:	0a5a      	lsrs	r2, r3, #9
   83e90:	2a04      	cmp	r2, #4
   83e92:	d853      	bhi.n	83f3c <_free_r+0x140>
   83e94:	099a      	lsrs	r2, r3, #6
   83e96:	f102 0739 	add.w	r7, r2, #57	; 0x39
   83e9a:	007f      	lsls	r7, r7, #1
   83e9c:	f102 0538 	add.w	r5, r2, #56	; 0x38
   83ea0:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   83ea4:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   83ea8:	3808      	subs	r0, #8
   83eaa:	4290      	cmp	r0, r2
   83eac:	4943      	ldr	r1, [pc, #268]	; (83fbc <_free_r+0x1c0>)
   83eae:	d04d      	beq.n	83f4c <_free_r+0x150>
   83eb0:	6851      	ldr	r1, [r2, #4]
   83eb2:	f021 0103 	bic.w	r1, r1, #3
   83eb6:	428b      	cmp	r3, r1
   83eb8:	d202      	bcs.n	83ec0 <_free_r+0xc4>
   83eba:	6892      	ldr	r2, [r2, #8]
   83ebc:	4290      	cmp	r0, r2
   83ebe:	d1f7      	bne.n	83eb0 <_free_r+0xb4>
   83ec0:	68d0      	ldr	r0, [r2, #12]
   83ec2:	60e0      	str	r0, [r4, #12]
   83ec4:	60a2      	str	r2, [r4, #8]
   83ec6:	6084      	str	r4, [r0, #8]
   83ec8:	60d4      	str	r4, [r2, #12]
   83eca:	4640      	mov	r0, r8
   83ecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83ed0:	f000 bdfc 	b.w	84acc <__malloc_unlock>
   83ed4:	6895      	ldr	r5, [r2, #8]
   83ed6:	4f3a      	ldr	r7, [pc, #232]	; (83fc0 <_free_r+0x1c4>)
   83ed8:	4403      	add	r3, r0
   83eda:	42bd      	cmp	r5, r7
   83edc:	d03f      	beq.n	83f5e <_free_r+0x162>
   83ede:	68d0      	ldr	r0, [r2, #12]
   83ee0:	f043 0201 	orr.w	r2, r3, #1
   83ee4:	60e8      	str	r0, [r5, #12]
   83ee6:	6085      	str	r5, [r0, #8]
   83ee8:	6062      	str	r2, [r4, #4]
   83eea:	50e3      	str	r3, [r4, r3]
   83eec:	e7b3      	b.n	83e56 <_free_r+0x5a>
   83eee:	07ff      	lsls	r7, r7, #31
   83ef0:	4403      	add	r3, r0
   83ef2:	d407      	bmi.n	83f04 <_free_r+0x108>
   83ef4:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83ef8:	1b64      	subs	r4, r4, r5
   83efa:	68e2      	ldr	r2, [r4, #12]
   83efc:	68a0      	ldr	r0, [r4, #8]
   83efe:	442b      	add	r3, r5
   83f00:	60c2      	str	r2, [r0, #12]
   83f02:	6090      	str	r0, [r2, #8]
   83f04:	4a2f      	ldr	r2, [pc, #188]	; (83fc4 <_free_r+0x1c8>)
   83f06:	f043 0001 	orr.w	r0, r3, #1
   83f0a:	6812      	ldr	r2, [r2, #0]
   83f0c:	6060      	str	r0, [r4, #4]
   83f0e:	4293      	cmp	r3, r2
   83f10:	608c      	str	r4, [r1, #8]
   83f12:	d3b6      	bcc.n	83e82 <_free_r+0x86>
   83f14:	4b2c      	ldr	r3, [pc, #176]	; (83fc8 <_free_r+0x1cc>)
   83f16:	4640      	mov	r0, r8
   83f18:	6819      	ldr	r1, [r3, #0]
   83f1a:	f7ff ff21 	bl	83d60 <_malloc_trim_r>
   83f1e:	e7b0      	b.n	83e82 <_free_r+0x86>
   83f20:	1811      	adds	r1, r2, r0
   83f22:	6849      	ldr	r1, [r1, #4]
   83f24:	07c9      	lsls	r1, r1, #31
   83f26:	d444      	bmi.n	83fb2 <_free_r+0x1b6>
   83f28:	6891      	ldr	r1, [r2, #8]
   83f2a:	4403      	add	r3, r0
   83f2c:	68d2      	ldr	r2, [r2, #12]
   83f2e:	f043 0001 	orr.w	r0, r3, #1
   83f32:	60ca      	str	r2, [r1, #12]
   83f34:	6091      	str	r1, [r2, #8]
   83f36:	6060      	str	r0, [r4, #4]
   83f38:	50e3      	str	r3, [r4, r3]
   83f3a:	e7a2      	b.n	83e82 <_free_r+0x86>
   83f3c:	2a14      	cmp	r2, #20
   83f3e:	d817      	bhi.n	83f70 <_free_r+0x174>
   83f40:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   83f44:	007f      	lsls	r7, r7, #1
   83f46:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   83f4a:	e7a9      	b.n	83ea0 <_free_r+0xa4>
   83f4c:	10aa      	asrs	r2, r5, #2
   83f4e:	684b      	ldr	r3, [r1, #4]
   83f50:	2501      	movs	r5, #1
   83f52:	fa05 f202 	lsl.w	r2, r5, r2
   83f56:	4313      	orrs	r3, r2
   83f58:	604b      	str	r3, [r1, #4]
   83f5a:	4602      	mov	r2, r0
   83f5c:	e7b1      	b.n	83ec2 <_free_r+0xc6>
   83f5e:	f043 0201 	orr.w	r2, r3, #1
   83f62:	614c      	str	r4, [r1, #20]
   83f64:	610c      	str	r4, [r1, #16]
   83f66:	60e5      	str	r5, [r4, #12]
   83f68:	60a5      	str	r5, [r4, #8]
   83f6a:	6062      	str	r2, [r4, #4]
   83f6c:	50e3      	str	r3, [r4, r3]
   83f6e:	e788      	b.n	83e82 <_free_r+0x86>
   83f70:	2a54      	cmp	r2, #84	; 0x54
   83f72:	d806      	bhi.n	83f82 <_free_r+0x186>
   83f74:	0b1a      	lsrs	r2, r3, #12
   83f76:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   83f7a:	007f      	lsls	r7, r7, #1
   83f7c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   83f80:	e78e      	b.n	83ea0 <_free_r+0xa4>
   83f82:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83f86:	d806      	bhi.n	83f96 <_free_r+0x19a>
   83f88:	0bda      	lsrs	r2, r3, #15
   83f8a:	f102 0778 	add.w	r7, r2, #120	; 0x78
   83f8e:	007f      	lsls	r7, r7, #1
   83f90:	f102 0577 	add.w	r5, r2, #119	; 0x77
   83f94:	e784      	b.n	83ea0 <_free_r+0xa4>
   83f96:	f240 5054 	movw	r0, #1364	; 0x554
   83f9a:	4282      	cmp	r2, r0
   83f9c:	d806      	bhi.n	83fac <_free_r+0x1b0>
   83f9e:	0c9a      	lsrs	r2, r3, #18
   83fa0:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   83fa4:	007f      	lsls	r7, r7, #1
   83fa6:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   83faa:	e779      	b.n	83ea0 <_free_r+0xa4>
   83fac:	27fe      	movs	r7, #254	; 0xfe
   83fae:	257e      	movs	r5, #126	; 0x7e
   83fb0:	e776      	b.n	83ea0 <_free_r+0xa4>
   83fb2:	f043 0201 	orr.w	r2, r3, #1
   83fb6:	6062      	str	r2, [r4, #4]
   83fb8:	50e3      	str	r3, [r4, r3]
   83fba:	e762      	b.n	83e82 <_free_r+0x86>
   83fbc:	20070574 	.word	0x20070574
   83fc0:	2007057c 	.word	0x2007057c
   83fc4:	2007097c 	.word	0x2007097c
   83fc8:	2007ac38 	.word	0x2007ac38

00083fcc <__sfvwrite_r>:
   83fcc:	6893      	ldr	r3, [r2, #8]
   83fce:	2b00      	cmp	r3, #0
   83fd0:	f000 80ab 	beq.w	8412a <__sfvwrite_r+0x15e>
   83fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83fd8:	898b      	ldrh	r3, [r1, #12]
   83fda:	b085      	sub	sp, #20
   83fdc:	460c      	mov	r4, r1
   83fde:	0719      	lsls	r1, r3, #28
   83fe0:	9002      	str	r0, [sp, #8]
   83fe2:	4616      	mov	r6, r2
   83fe4:	d528      	bpl.n	84038 <__sfvwrite_r+0x6c>
   83fe6:	6922      	ldr	r2, [r4, #16]
   83fe8:	b332      	cbz	r2, 84038 <__sfvwrite_r+0x6c>
   83fea:	f003 0802 	and.w	r8, r3, #2
   83fee:	fa1f f088 	uxth.w	r0, r8
   83ff2:	6835      	ldr	r5, [r6, #0]
   83ff4:	b378      	cbz	r0, 84056 <__sfvwrite_r+0x8a>
   83ff6:	f04f 0900 	mov.w	r9, #0
   83ffa:	46c8      	mov	r8, r9
   83ffc:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 842d0 <__sfvwrite_r+0x304>
   84000:	f1b8 0f00 	cmp.w	r8, #0
   84004:	f000 808b 	beq.w	8411e <__sfvwrite_r+0x152>
   84008:	45d0      	cmp	r8, sl
   8400a:	4643      	mov	r3, r8
   8400c:	464a      	mov	r2, r9
   8400e:	bf28      	it	cs
   84010:	4653      	movcs	r3, sl
   84012:	69e1      	ldr	r1, [r4, #28]
   84014:	9802      	ldr	r0, [sp, #8]
   84016:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84018:	47b8      	blx	r7
   8401a:	2800      	cmp	r0, #0
   8401c:	f340 80a5 	ble.w	8416a <__sfvwrite_r+0x19e>
   84020:	68b3      	ldr	r3, [r6, #8]
   84022:	4481      	add	r9, r0
   84024:	1a1b      	subs	r3, r3, r0
   84026:	ebc0 0808 	rsb	r8, r0, r8
   8402a:	60b3      	str	r3, [r6, #8]
   8402c:	2b00      	cmp	r3, #0
   8402e:	d1e7      	bne.n	84000 <__sfvwrite_r+0x34>
   84030:	2000      	movs	r0, #0
   84032:	b005      	add	sp, #20
   84034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84038:	4621      	mov	r1, r4
   8403a:	9802      	ldr	r0, [sp, #8]
   8403c:	f000 ff9e 	bl	84f7c <__swsetup_r>
   84040:	2800      	cmp	r0, #0
   84042:	f040 813c 	bne.w	842be <__sfvwrite_r+0x2f2>
   84046:	89a3      	ldrh	r3, [r4, #12]
   84048:	6835      	ldr	r5, [r6, #0]
   8404a:	f003 0802 	and.w	r8, r3, #2
   8404e:	fa1f f088 	uxth.w	r0, r8
   84052:	2800      	cmp	r0, #0
   84054:	d1cf      	bne.n	83ff6 <__sfvwrite_r+0x2a>
   84056:	f013 0901 	ands.w	r9, r3, #1
   8405a:	f040 8090 	bne.w	8417e <__sfvwrite_r+0x1b2>
   8405e:	464f      	mov	r7, r9
   84060:	9601      	str	r6, [sp, #4]
   84062:	2f00      	cmp	r7, #0
   84064:	d056      	beq.n	84114 <__sfvwrite_r+0x148>
   84066:	059a      	lsls	r2, r3, #22
   84068:	f8d4 8008 	ldr.w	r8, [r4, #8]
   8406c:	d55f      	bpl.n	8412e <__sfvwrite_r+0x162>
   8406e:	4547      	cmp	r7, r8
   84070:	46c2      	mov	sl, r8
   84072:	f0c0 80bf 	bcc.w	841f4 <__sfvwrite_r+0x228>
   84076:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8407a:	f000 80bd 	beq.w	841f8 <__sfvwrite_r+0x22c>
   8407e:	6962      	ldr	r2, [r4, #20]
   84080:	6820      	ldr	r0, [r4, #0]
   84082:	6921      	ldr	r1, [r4, #16]
   84084:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   84088:	ebc1 0a00 	rsb	sl, r1, r0
   8408c:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   84090:	f10a 0001 	add.w	r0, sl, #1
   84094:	ea4f 0868 	mov.w	r8, r8, asr #1
   84098:	4438      	add	r0, r7
   8409a:	4540      	cmp	r0, r8
   8409c:	4642      	mov	r2, r8
   8409e:	bf84      	itt	hi
   840a0:	4680      	movhi	r8, r0
   840a2:	4642      	movhi	r2, r8
   840a4:	055b      	lsls	r3, r3, #21
   840a6:	f140 80f2 	bpl.w	8428e <__sfvwrite_r+0x2c2>
   840aa:	4611      	mov	r1, r2
   840ac:	9802      	ldr	r0, [sp, #8]
   840ae:	f000 f9b5 	bl	8441c <_malloc_r>
   840b2:	4683      	mov	fp, r0
   840b4:	2800      	cmp	r0, #0
   840b6:	f000 8105 	beq.w	842c4 <__sfvwrite_r+0x2f8>
   840ba:	4652      	mov	r2, sl
   840bc:	6921      	ldr	r1, [r4, #16]
   840be:	f7ff fad7 	bl	83670 <memcpy>
   840c2:	89a3      	ldrh	r3, [r4, #12]
   840c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   840c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   840cc:	81a3      	strh	r3, [r4, #12]
   840ce:	ebca 0308 	rsb	r3, sl, r8
   840d2:	eb0b 000a 	add.w	r0, fp, sl
   840d6:	f8c4 8014 	str.w	r8, [r4, #20]
   840da:	46ba      	mov	sl, r7
   840dc:	46b8      	mov	r8, r7
   840de:	f8c4 b010 	str.w	fp, [r4, #16]
   840e2:	6020      	str	r0, [r4, #0]
   840e4:	60a3      	str	r3, [r4, #8]
   840e6:	4652      	mov	r2, sl
   840e8:	4649      	mov	r1, r9
   840ea:	f000 fc89 	bl	84a00 <memmove>
   840ee:	68a0      	ldr	r0, [r4, #8]
   840f0:	6823      	ldr	r3, [r4, #0]
   840f2:	ebc8 0000 	rsb	r0, r8, r0
   840f6:	60a0      	str	r0, [r4, #8]
   840f8:	4638      	mov	r0, r7
   840fa:	4453      	add	r3, sl
   840fc:	6023      	str	r3, [r4, #0]
   840fe:	9a01      	ldr	r2, [sp, #4]
   84100:	4481      	add	r9, r0
   84102:	6893      	ldr	r3, [r2, #8]
   84104:	1a3f      	subs	r7, r7, r0
   84106:	1a1b      	subs	r3, r3, r0
   84108:	6093      	str	r3, [r2, #8]
   8410a:	2b00      	cmp	r3, #0
   8410c:	d090      	beq.n	84030 <__sfvwrite_r+0x64>
   8410e:	89a3      	ldrh	r3, [r4, #12]
   84110:	2f00      	cmp	r7, #0
   84112:	d1a8      	bne.n	84066 <__sfvwrite_r+0x9a>
   84114:	f8d5 9000 	ldr.w	r9, [r5]
   84118:	686f      	ldr	r7, [r5, #4]
   8411a:	3508      	adds	r5, #8
   8411c:	e7a1      	b.n	84062 <__sfvwrite_r+0x96>
   8411e:	f8d5 9000 	ldr.w	r9, [r5]
   84122:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84126:	3508      	adds	r5, #8
   84128:	e76a      	b.n	84000 <__sfvwrite_r+0x34>
   8412a:	2000      	movs	r0, #0
   8412c:	4770      	bx	lr
   8412e:	6820      	ldr	r0, [r4, #0]
   84130:	6923      	ldr	r3, [r4, #16]
   84132:	4298      	cmp	r0, r3
   84134:	d803      	bhi.n	8413e <__sfvwrite_r+0x172>
   84136:	6962      	ldr	r2, [r4, #20]
   84138:	4297      	cmp	r7, r2
   8413a:	f080 8083 	bcs.w	84244 <__sfvwrite_r+0x278>
   8413e:	45b8      	cmp	r8, r7
   84140:	bf28      	it	cs
   84142:	46b8      	movcs	r8, r7
   84144:	4649      	mov	r1, r9
   84146:	4642      	mov	r2, r8
   84148:	f000 fc5a 	bl	84a00 <memmove>
   8414c:	68a3      	ldr	r3, [r4, #8]
   8414e:	6822      	ldr	r2, [r4, #0]
   84150:	ebc8 0303 	rsb	r3, r8, r3
   84154:	4442      	add	r2, r8
   84156:	60a3      	str	r3, [r4, #8]
   84158:	6022      	str	r2, [r4, #0]
   8415a:	2b00      	cmp	r3, #0
   8415c:	d148      	bne.n	841f0 <__sfvwrite_r+0x224>
   8415e:	4621      	mov	r1, r4
   84160:	9802      	ldr	r0, [sp, #8]
   84162:	f7ff fd4b 	bl	83bfc <_fflush_r>
   84166:	2800      	cmp	r0, #0
   84168:	d042      	beq.n	841f0 <__sfvwrite_r+0x224>
   8416a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8416e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84172:	f04f 30ff 	mov.w	r0, #4294967295
   84176:	81a3      	strh	r3, [r4, #12]
   84178:	b005      	add	sp, #20
   8417a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8417e:	4680      	mov	r8, r0
   84180:	4682      	mov	sl, r0
   84182:	4681      	mov	r9, r0
   84184:	9001      	str	r0, [sp, #4]
   84186:	f1b9 0f00 	cmp.w	r9, #0
   8418a:	d029      	beq.n	841e0 <__sfvwrite_r+0x214>
   8418c:	9b01      	ldr	r3, [sp, #4]
   8418e:	2b00      	cmp	r3, #0
   84190:	d04b      	beq.n	8422a <__sfvwrite_r+0x25e>
   84192:	45c8      	cmp	r8, r9
   84194:	46c3      	mov	fp, r8
   84196:	bf28      	it	cs
   84198:	46cb      	movcs	fp, r9
   8419a:	6820      	ldr	r0, [r4, #0]
   8419c:	6923      	ldr	r3, [r4, #16]
   8419e:	465f      	mov	r7, fp
   841a0:	4298      	cmp	r0, r3
   841a2:	6962      	ldr	r2, [r4, #20]
   841a4:	d903      	bls.n	841ae <__sfvwrite_r+0x1e2>
   841a6:	68a3      	ldr	r3, [r4, #8]
   841a8:	4413      	add	r3, r2
   841aa:	459b      	cmp	fp, r3
   841ac:	dc5c      	bgt.n	84268 <__sfvwrite_r+0x29c>
   841ae:	4593      	cmp	fp, r2
   841b0:	db24      	blt.n	841fc <__sfvwrite_r+0x230>
   841b2:	4613      	mov	r3, r2
   841b4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   841b6:	4652      	mov	r2, sl
   841b8:	69e1      	ldr	r1, [r4, #28]
   841ba:	9802      	ldr	r0, [sp, #8]
   841bc:	47b8      	blx	r7
   841be:	1e07      	subs	r7, r0, #0
   841c0:	ddd3      	ble.n	8416a <__sfvwrite_r+0x19e>
   841c2:	ebb8 0807 	subs.w	r8, r8, r7
   841c6:	d027      	beq.n	84218 <__sfvwrite_r+0x24c>
   841c8:	68b3      	ldr	r3, [r6, #8]
   841ca:	44ba      	add	sl, r7
   841cc:	1bdb      	subs	r3, r3, r7
   841ce:	ebc7 0909 	rsb	r9, r7, r9
   841d2:	60b3      	str	r3, [r6, #8]
   841d4:	2b00      	cmp	r3, #0
   841d6:	f43f af2b 	beq.w	84030 <__sfvwrite_r+0x64>
   841da:	f1b9 0f00 	cmp.w	r9, #0
   841de:	d1d5      	bne.n	8418c <__sfvwrite_r+0x1c0>
   841e0:	2300      	movs	r3, #0
   841e2:	f8d5 a000 	ldr.w	sl, [r5]
   841e6:	f8d5 9004 	ldr.w	r9, [r5, #4]
   841ea:	9301      	str	r3, [sp, #4]
   841ec:	3508      	adds	r5, #8
   841ee:	e7ca      	b.n	84186 <__sfvwrite_r+0x1ba>
   841f0:	4640      	mov	r0, r8
   841f2:	e784      	b.n	840fe <__sfvwrite_r+0x132>
   841f4:	46b8      	mov	r8, r7
   841f6:	46ba      	mov	sl, r7
   841f8:	6820      	ldr	r0, [r4, #0]
   841fa:	e774      	b.n	840e6 <__sfvwrite_r+0x11a>
   841fc:	465a      	mov	r2, fp
   841fe:	4651      	mov	r1, sl
   84200:	f000 fbfe 	bl	84a00 <memmove>
   84204:	68a2      	ldr	r2, [r4, #8]
   84206:	6823      	ldr	r3, [r4, #0]
   84208:	ebcb 0202 	rsb	r2, fp, r2
   8420c:	445b      	add	r3, fp
   8420e:	ebb8 0807 	subs.w	r8, r8, r7
   84212:	60a2      	str	r2, [r4, #8]
   84214:	6023      	str	r3, [r4, #0]
   84216:	d1d7      	bne.n	841c8 <__sfvwrite_r+0x1fc>
   84218:	4621      	mov	r1, r4
   8421a:	9802      	ldr	r0, [sp, #8]
   8421c:	f7ff fcee 	bl	83bfc <_fflush_r>
   84220:	2800      	cmp	r0, #0
   84222:	d1a2      	bne.n	8416a <__sfvwrite_r+0x19e>
   84224:	f8cd 8004 	str.w	r8, [sp, #4]
   84228:	e7ce      	b.n	841c8 <__sfvwrite_r+0x1fc>
   8422a:	464a      	mov	r2, r9
   8422c:	210a      	movs	r1, #10
   8422e:	4650      	mov	r0, sl
   84230:	f000 fba0 	bl	84974 <memchr>
   84234:	2800      	cmp	r0, #0
   84236:	d03d      	beq.n	842b4 <__sfvwrite_r+0x2e8>
   84238:	3001      	adds	r0, #1
   8423a:	2301      	movs	r3, #1
   8423c:	ebca 0800 	rsb	r8, sl, r0
   84240:	9301      	str	r3, [sp, #4]
   84242:	e7a6      	b.n	84192 <__sfvwrite_r+0x1c6>
   84244:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   84248:	42bb      	cmp	r3, r7
   8424a:	bf28      	it	cs
   8424c:	463b      	movcs	r3, r7
   8424e:	fb93 f3f2 	sdiv	r3, r3, r2
   84252:	69e1      	ldr	r1, [r4, #28]
   84254:	fb02 f303 	mul.w	r3, r2, r3
   84258:	9802      	ldr	r0, [sp, #8]
   8425a:	464a      	mov	r2, r9
   8425c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8425e:	47b0      	blx	r6
   84260:	2800      	cmp	r0, #0
   84262:	f73f af4c 	bgt.w	840fe <__sfvwrite_r+0x132>
   84266:	e780      	b.n	8416a <__sfvwrite_r+0x19e>
   84268:	461a      	mov	r2, r3
   8426a:	4651      	mov	r1, sl
   8426c:	9303      	str	r3, [sp, #12]
   8426e:	f000 fbc7 	bl	84a00 <memmove>
   84272:	6822      	ldr	r2, [r4, #0]
   84274:	9b03      	ldr	r3, [sp, #12]
   84276:	4621      	mov	r1, r4
   84278:	441a      	add	r2, r3
   8427a:	6022      	str	r2, [r4, #0]
   8427c:	9802      	ldr	r0, [sp, #8]
   8427e:	f7ff fcbd 	bl	83bfc <_fflush_r>
   84282:	9b03      	ldr	r3, [sp, #12]
   84284:	2800      	cmp	r0, #0
   84286:	f47f af70 	bne.w	8416a <__sfvwrite_r+0x19e>
   8428a:	461f      	mov	r7, r3
   8428c:	e799      	b.n	841c2 <__sfvwrite_r+0x1f6>
   8428e:	9802      	ldr	r0, [sp, #8]
   84290:	f000 fc1e 	bl	84ad0 <_realloc_r>
   84294:	4683      	mov	fp, r0
   84296:	2800      	cmp	r0, #0
   84298:	f47f af19 	bne.w	840ce <__sfvwrite_r+0x102>
   8429c:	9d02      	ldr	r5, [sp, #8]
   8429e:	6921      	ldr	r1, [r4, #16]
   842a0:	4628      	mov	r0, r5
   842a2:	f7ff fdab 	bl	83dfc <_free_r>
   842a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   842aa:	220c      	movs	r2, #12
   842ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   842b0:	602a      	str	r2, [r5, #0]
   842b2:	e75c      	b.n	8416e <__sfvwrite_r+0x1a2>
   842b4:	2301      	movs	r3, #1
   842b6:	f109 0801 	add.w	r8, r9, #1
   842ba:	9301      	str	r3, [sp, #4]
   842bc:	e769      	b.n	84192 <__sfvwrite_r+0x1c6>
   842be:	f04f 30ff 	mov.w	r0, #4294967295
   842c2:	e6b6      	b.n	84032 <__sfvwrite_r+0x66>
   842c4:	9a02      	ldr	r2, [sp, #8]
   842c6:	230c      	movs	r3, #12
   842c8:	6013      	str	r3, [r2, #0]
   842ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   842ce:	e74e      	b.n	8416e <__sfvwrite_r+0x1a2>
   842d0:	7ffffc00 	.word	0x7ffffc00

000842d4 <_fwalk_reent>:
   842d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   842d8:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   842dc:	d01e      	beq.n	8431c <_fwalk_reent+0x48>
   842de:	4688      	mov	r8, r1
   842e0:	4607      	mov	r7, r0
   842e2:	f04f 0900 	mov.w	r9, #0
   842e6:	6875      	ldr	r5, [r6, #4]
   842e8:	68b4      	ldr	r4, [r6, #8]
   842ea:	3d01      	subs	r5, #1
   842ec:	d410      	bmi.n	84310 <_fwalk_reent+0x3c>
   842ee:	89a3      	ldrh	r3, [r4, #12]
   842f0:	3d01      	subs	r5, #1
   842f2:	2b01      	cmp	r3, #1
   842f4:	d908      	bls.n	84308 <_fwalk_reent+0x34>
   842f6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   842fa:	3301      	adds	r3, #1
   842fc:	d004      	beq.n	84308 <_fwalk_reent+0x34>
   842fe:	4621      	mov	r1, r4
   84300:	4638      	mov	r0, r7
   84302:	47c0      	blx	r8
   84304:	ea49 0900 	orr.w	r9, r9, r0
   84308:	1c6b      	adds	r3, r5, #1
   8430a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8430e:	d1ee      	bne.n	842ee <_fwalk_reent+0x1a>
   84310:	6836      	ldr	r6, [r6, #0]
   84312:	2e00      	cmp	r6, #0
   84314:	d1e7      	bne.n	842e6 <_fwalk_reent+0x12>
   84316:	4648      	mov	r0, r9
   84318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8431c:	46b1      	mov	r9, r6
   8431e:	4648      	mov	r0, r9
   84320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00084324 <__swhatbuf_r>:
   84324:	b570      	push	{r4, r5, r6, lr}
   84326:	460e      	mov	r6, r1
   84328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8432c:	b090      	sub	sp, #64	; 0x40
   8432e:	2900      	cmp	r1, #0
   84330:	4614      	mov	r4, r2
   84332:	461d      	mov	r5, r3
   84334:	db14      	blt.n	84360 <__swhatbuf_r+0x3c>
   84336:	aa01      	add	r2, sp, #4
   84338:	f000 ff2a 	bl	85190 <_fstat_r>
   8433c:	2800      	cmp	r0, #0
   8433e:	db0f      	blt.n	84360 <__swhatbuf_r+0x3c>
   84340:	9a02      	ldr	r2, [sp, #8]
   84342:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84346:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8434a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8434e:	fab2 f282 	clz	r2, r2
   84352:	f44f 6000 	mov.w	r0, #2048	; 0x800
   84356:	0952      	lsrs	r2, r2, #5
   84358:	602a      	str	r2, [r5, #0]
   8435a:	6023      	str	r3, [r4, #0]
   8435c:	b010      	add	sp, #64	; 0x40
   8435e:	bd70      	pop	{r4, r5, r6, pc}
   84360:	89b2      	ldrh	r2, [r6, #12]
   84362:	2000      	movs	r0, #0
   84364:	f002 0280 	and.w	r2, r2, #128	; 0x80
   84368:	b292      	uxth	r2, r2
   8436a:	6028      	str	r0, [r5, #0]
   8436c:	b11a      	cbz	r2, 84376 <__swhatbuf_r+0x52>
   8436e:	2340      	movs	r3, #64	; 0x40
   84370:	6023      	str	r3, [r4, #0]
   84372:	b010      	add	sp, #64	; 0x40
   84374:	bd70      	pop	{r4, r5, r6, pc}
   84376:	4610      	mov	r0, r2
   84378:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8437c:	6023      	str	r3, [r4, #0]
   8437e:	b010      	add	sp, #64	; 0x40
   84380:	bd70      	pop	{r4, r5, r6, pc}
   84382:	bf00      	nop

00084384 <__smakebuf_r>:
   84384:	898a      	ldrh	r2, [r1, #12]
   84386:	460b      	mov	r3, r1
   84388:	0792      	lsls	r2, r2, #30
   8438a:	d506      	bpl.n	8439a <__smakebuf_r+0x16>
   8438c:	f101 0243 	add.w	r2, r1, #67	; 0x43
   84390:	2101      	movs	r1, #1
   84392:	601a      	str	r2, [r3, #0]
   84394:	611a      	str	r2, [r3, #16]
   84396:	6159      	str	r1, [r3, #20]
   84398:	4770      	bx	lr
   8439a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8439c:	b083      	sub	sp, #12
   8439e:	ab01      	add	r3, sp, #4
   843a0:	466a      	mov	r2, sp
   843a2:	460c      	mov	r4, r1
   843a4:	4605      	mov	r5, r0
   843a6:	f7ff ffbd 	bl	84324 <__swhatbuf_r>
   843aa:	9900      	ldr	r1, [sp, #0]
   843ac:	4606      	mov	r6, r0
   843ae:	4628      	mov	r0, r5
   843b0:	f000 f834 	bl	8441c <_malloc_r>
   843b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   843b8:	b1d0      	cbz	r0, 843f0 <__smakebuf_r+0x6c>
   843ba:	e89d 0006 	ldmia.w	sp, {r1, r2}
   843be:	4f12      	ldr	r7, [pc, #72]	; (84408 <__smakebuf_r+0x84>)
   843c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   843c4:	63ef      	str	r7, [r5, #60]	; 0x3c
   843c6:	81a3      	strh	r3, [r4, #12]
   843c8:	6020      	str	r0, [r4, #0]
   843ca:	6120      	str	r0, [r4, #16]
   843cc:	6161      	str	r1, [r4, #20]
   843ce:	b91a      	cbnz	r2, 843d8 <__smakebuf_r+0x54>
   843d0:	4333      	orrs	r3, r6
   843d2:	81a3      	strh	r3, [r4, #12]
   843d4:	b003      	add	sp, #12
   843d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   843d8:	4628      	mov	r0, r5
   843da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   843de:	f000 feeb 	bl	851b8 <_isatty_r>
   843e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   843e6:	2800      	cmp	r0, #0
   843e8:	d0f2      	beq.n	843d0 <__smakebuf_r+0x4c>
   843ea:	f043 0301 	orr.w	r3, r3, #1
   843ee:	e7ef      	b.n	843d0 <__smakebuf_r+0x4c>
   843f0:	059a      	lsls	r2, r3, #22
   843f2:	d4ef      	bmi.n	843d4 <__smakebuf_r+0x50>
   843f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   843f8:	f043 0302 	orr.w	r3, r3, #2
   843fc:	2101      	movs	r1, #1
   843fe:	81a3      	strh	r3, [r4, #12]
   84400:	6022      	str	r2, [r4, #0]
   84402:	6122      	str	r2, [r4, #16]
   84404:	6161      	str	r1, [r4, #20]
   84406:	e7e5      	b.n	843d4 <__smakebuf_r+0x50>
   84408:	00083c29 	.word	0x00083c29

0008440c <malloc>:
   8440c:	4b02      	ldr	r3, [pc, #8]	; (84418 <malloc+0xc>)
   8440e:	4601      	mov	r1, r0
   84410:	6818      	ldr	r0, [r3, #0]
   84412:	f000 b803 	b.w	8441c <_malloc_r>
   84416:	bf00      	nop
   84418:	20070570 	.word	0x20070570

0008441c <_malloc_r>:
   8441c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84420:	f101 050b 	add.w	r5, r1, #11
   84424:	2d16      	cmp	r5, #22
   84426:	b083      	sub	sp, #12
   84428:	4606      	mov	r6, r0
   8442a:	f240 80a0 	bls.w	8456e <_malloc_r+0x152>
   8442e:	f035 0507 	bics.w	r5, r5, #7
   84432:	f100 80c0 	bmi.w	845b6 <_malloc_r+0x19a>
   84436:	42a9      	cmp	r1, r5
   84438:	f200 80bd 	bhi.w	845b6 <_malloc_r+0x19a>
   8443c:	f000 fb44 	bl	84ac8 <__malloc_lock>
   84440:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   84444:	f0c0 8290 	bcc.w	84968 <_malloc_r+0x54c>
   84448:	0a6b      	lsrs	r3, r5, #9
   8444a:	f000 80bb 	beq.w	845c4 <_malloc_r+0x1a8>
   8444e:	2b04      	cmp	r3, #4
   84450:	f200 8177 	bhi.w	84742 <_malloc_r+0x326>
   84454:	09a8      	lsrs	r0, r5, #6
   84456:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   8445a:	ea4f 014e 	mov.w	r1, lr, lsl #1
   8445e:	3038      	adds	r0, #56	; 0x38
   84460:	4fbe      	ldr	r7, [pc, #760]	; (8475c <_malloc_r+0x340>)
   84462:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   84466:	684c      	ldr	r4, [r1, #4]
   84468:	3908      	subs	r1, #8
   8446a:	42a1      	cmp	r1, r4
   8446c:	d107      	bne.n	8447e <_malloc_r+0x62>
   8446e:	e0ae      	b.n	845ce <_malloc_r+0x1b2>
   84470:	2a00      	cmp	r2, #0
   84472:	f280 80ae 	bge.w	845d2 <_malloc_r+0x1b6>
   84476:	68e4      	ldr	r4, [r4, #12]
   84478:	42a1      	cmp	r1, r4
   8447a:	f000 80a8 	beq.w	845ce <_malloc_r+0x1b2>
   8447e:	6863      	ldr	r3, [r4, #4]
   84480:	f023 0303 	bic.w	r3, r3, #3
   84484:	1b5a      	subs	r2, r3, r5
   84486:	2a0f      	cmp	r2, #15
   84488:	ddf2      	ble.n	84470 <_malloc_r+0x54>
   8448a:	49b4      	ldr	r1, [pc, #720]	; (8475c <_malloc_r+0x340>)
   8448c:	693c      	ldr	r4, [r7, #16]
   8448e:	f101 0e08 	add.w	lr, r1, #8
   84492:	4574      	cmp	r4, lr
   84494:	f000 81a8 	beq.w	847e8 <_malloc_r+0x3cc>
   84498:	6863      	ldr	r3, [r4, #4]
   8449a:	f023 0303 	bic.w	r3, r3, #3
   8449e:	1b5a      	subs	r2, r3, r5
   844a0:	2a0f      	cmp	r2, #15
   844a2:	f300 818e 	bgt.w	847c2 <_malloc_r+0x3a6>
   844a6:	2a00      	cmp	r2, #0
   844a8:	f8c1 e014 	str.w	lr, [r1, #20]
   844ac:	f8c1 e010 	str.w	lr, [r1, #16]
   844b0:	f280 8093 	bge.w	845da <_malloc_r+0x1be>
   844b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   844b8:	f080 815c 	bcs.w	84774 <_malloc_r+0x358>
   844bc:	08db      	lsrs	r3, r3, #3
   844be:	684a      	ldr	r2, [r1, #4]
   844c0:	ea4f 09a3 	mov.w	r9, r3, asr #2
   844c4:	f04f 0c01 	mov.w	ip, #1
   844c8:	3301      	adds	r3, #1
   844ca:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   844ce:	fa0c f909 	lsl.w	r9, ip, r9
   844d2:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   844d6:	ea49 0202 	orr.w	r2, r9, r2
   844da:	f1ac 0c08 	sub.w	ip, ip, #8
   844de:	f8c4 c00c 	str.w	ip, [r4, #12]
   844e2:	f8c4 8008 	str.w	r8, [r4, #8]
   844e6:	604a      	str	r2, [r1, #4]
   844e8:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   844ec:	f8c8 400c 	str.w	r4, [r8, #12]
   844f0:	1083      	asrs	r3, r0, #2
   844f2:	2401      	movs	r4, #1
   844f4:	409c      	lsls	r4, r3
   844f6:	4294      	cmp	r4, r2
   844f8:	d87c      	bhi.n	845f4 <_malloc_r+0x1d8>
   844fa:	4214      	tst	r4, r2
   844fc:	d106      	bne.n	8450c <_malloc_r+0xf0>
   844fe:	f020 0003 	bic.w	r0, r0, #3
   84502:	0064      	lsls	r4, r4, #1
   84504:	4214      	tst	r4, r2
   84506:	f100 0004 	add.w	r0, r0, #4
   8450a:	d0fa      	beq.n	84502 <_malloc_r+0xe6>
   8450c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   84510:	46cc      	mov	ip, r9
   84512:	4680      	mov	r8, r0
   84514:	f8dc 100c 	ldr.w	r1, [ip, #12]
   84518:	458c      	cmp	ip, r1
   8451a:	d107      	bne.n	8452c <_malloc_r+0x110>
   8451c:	e166      	b.n	847ec <_malloc_r+0x3d0>
   8451e:	2a00      	cmp	r2, #0
   84520:	f280 8174 	bge.w	8480c <_malloc_r+0x3f0>
   84524:	68c9      	ldr	r1, [r1, #12]
   84526:	458c      	cmp	ip, r1
   84528:	f000 8160 	beq.w	847ec <_malloc_r+0x3d0>
   8452c:	684b      	ldr	r3, [r1, #4]
   8452e:	f023 0303 	bic.w	r3, r3, #3
   84532:	1b5a      	subs	r2, r3, r5
   84534:	2a0f      	cmp	r2, #15
   84536:	ddf2      	ble.n	8451e <_malloc_r+0x102>
   84538:	460c      	mov	r4, r1
   8453a:	68cb      	ldr	r3, [r1, #12]
   8453c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   84540:	f045 0801 	orr.w	r8, r5, #1
   84544:	f8c1 8004 	str.w	r8, [r1, #4]
   84548:	440d      	add	r5, r1
   8454a:	f042 0101 	orr.w	r1, r2, #1
   8454e:	f8cc 300c 	str.w	r3, [ip, #12]
   84552:	4630      	mov	r0, r6
   84554:	f8c3 c008 	str.w	ip, [r3, #8]
   84558:	617d      	str	r5, [r7, #20]
   8455a:	613d      	str	r5, [r7, #16]
   8455c:	f8c5 e00c 	str.w	lr, [r5, #12]
   84560:	f8c5 e008 	str.w	lr, [r5, #8]
   84564:	6069      	str	r1, [r5, #4]
   84566:	50aa      	str	r2, [r5, r2]
   84568:	f000 fab0 	bl	84acc <__malloc_unlock>
   8456c:	e01f      	b.n	845ae <_malloc_r+0x192>
   8456e:	2910      	cmp	r1, #16
   84570:	d821      	bhi.n	845b6 <_malloc_r+0x19a>
   84572:	f000 faa9 	bl	84ac8 <__malloc_lock>
   84576:	2510      	movs	r5, #16
   84578:	2306      	movs	r3, #6
   8457a:	2002      	movs	r0, #2
   8457c:	4f77      	ldr	r7, [pc, #476]	; (8475c <_malloc_r+0x340>)
   8457e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   84582:	685c      	ldr	r4, [r3, #4]
   84584:	f1a3 0208 	sub.w	r2, r3, #8
   84588:	4294      	cmp	r4, r2
   8458a:	f000 8138 	beq.w	847fe <_malloc_r+0x3e2>
   8458e:	6863      	ldr	r3, [r4, #4]
   84590:	68e1      	ldr	r1, [r4, #12]
   84592:	f023 0303 	bic.w	r3, r3, #3
   84596:	4423      	add	r3, r4
   84598:	685a      	ldr	r2, [r3, #4]
   8459a:	68a5      	ldr	r5, [r4, #8]
   8459c:	f042 0201 	orr.w	r2, r2, #1
   845a0:	60e9      	str	r1, [r5, #12]
   845a2:	4630      	mov	r0, r6
   845a4:	608d      	str	r5, [r1, #8]
   845a6:	605a      	str	r2, [r3, #4]
   845a8:	f000 fa90 	bl	84acc <__malloc_unlock>
   845ac:	3408      	adds	r4, #8
   845ae:	4620      	mov	r0, r4
   845b0:	b003      	add	sp, #12
   845b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   845b6:	2400      	movs	r4, #0
   845b8:	4620      	mov	r0, r4
   845ba:	230c      	movs	r3, #12
   845bc:	6033      	str	r3, [r6, #0]
   845be:	b003      	add	sp, #12
   845c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   845c4:	2180      	movs	r1, #128	; 0x80
   845c6:	f04f 0e40 	mov.w	lr, #64	; 0x40
   845ca:	203f      	movs	r0, #63	; 0x3f
   845cc:	e748      	b.n	84460 <_malloc_r+0x44>
   845ce:	4670      	mov	r0, lr
   845d0:	e75b      	b.n	8448a <_malloc_r+0x6e>
   845d2:	4423      	add	r3, r4
   845d4:	685a      	ldr	r2, [r3, #4]
   845d6:	68e1      	ldr	r1, [r4, #12]
   845d8:	e7df      	b.n	8459a <_malloc_r+0x17e>
   845da:	4423      	add	r3, r4
   845dc:	685a      	ldr	r2, [r3, #4]
   845de:	4630      	mov	r0, r6
   845e0:	f042 0201 	orr.w	r2, r2, #1
   845e4:	605a      	str	r2, [r3, #4]
   845e6:	3408      	adds	r4, #8
   845e8:	f000 fa70 	bl	84acc <__malloc_unlock>
   845ec:	4620      	mov	r0, r4
   845ee:	b003      	add	sp, #12
   845f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   845f4:	68bc      	ldr	r4, [r7, #8]
   845f6:	6863      	ldr	r3, [r4, #4]
   845f8:	f023 0803 	bic.w	r8, r3, #3
   845fc:	45a8      	cmp	r8, r5
   845fe:	d304      	bcc.n	8460a <_malloc_r+0x1ee>
   84600:	ebc5 0308 	rsb	r3, r5, r8
   84604:	2b0f      	cmp	r3, #15
   84606:	f300 808c 	bgt.w	84722 <_malloc_r+0x306>
   8460a:	4b55      	ldr	r3, [pc, #340]	; (84760 <_malloc_r+0x344>)
   8460c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 84770 <_malloc_r+0x354>
   84610:	681a      	ldr	r2, [r3, #0]
   84612:	f8d9 3000 	ldr.w	r3, [r9]
   84616:	442a      	add	r2, r5
   84618:	3301      	adds	r3, #1
   8461a:	eb04 0a08 	add.w	sl, r4, r8
   8461e:	f000 8160 	beq.w	848e2 <_malloc_r+0x4c6>
   84622:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   84626:	320f      	adds	r2, #15
   84628:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   8462c:	f022 020f 	bic.w	r2, r2, #15
   84630:	4611      	mov	r1, r2
   84632:	4630      	mov	r0, r6
   84634:	9201      	str	r2, [sp, #4]
   84636:	f000 fc35 	bl	84ea4 <_sbrk_r>
   8463a:	f1b0 3fff 	cmp.w	r0, #4294967295
   8463e:	4683      	mov	fp, r0
   84640:	9a01      	ldr	r2, [sp, #4]
   84642:	f000 8158 	beq.w	848f6 <_malloc_r+0x4da>
   84646:	4582      	cmp	sl, r0
   84648:	f200 80fc 	bhi.w	84844 <_malloc_r+0x428>
   8464c:	4b45      	ldr	r3, [pc, #276]	; (84764 <_malloc_r+0x348>)
   8464e:	45da      	cmp	sl, fp
   84650:	6819      	ldr	r1, [r3, #0]
   84652:	4411      	add	r1, r2
   84654:	6019      	str	r1, [r3, #0]
   84656:	f000 8153 	beq.w	84900 <_malloc_r+0x4e4>
   8465a:	f8d9 0000 	ldr.w	r0, [r9]
   8465e:	f8df e110 	ldr.w	lr, [pc, #272]	; 84770 <_malloc_r+0x354>
   84662:	3001      	adds	r0, #1
   84664:	bf1b      	ittet	ne
   84666:	ebca 0a0b 	rsbne	sl, sl, fp
   8466a:	4451      	addne	r1, sl
   8466c:	f8ce b000 	streq.w	fp, [lr]
   84670:	6019      	strne	r1, [r3, #0]
   84672:	f01b 0107 	ands.w	r1, fp, #7
   84676:	f000 8117 	beq.w	848a8 <_malloc_r+0x48c>
   8467a:	f1c1 0008 	rsb	r0, r1, #8
   8467e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   84682:	4483      	add	fp, r0
   84684:	3108      	adds	r1, #8
   84686:	445a      	add	r2, fp
   84688:	f3c2 020b 	ubfx	r2, r2, #0, #12
   8468c:	ebc2 0901 	rsb	r9, r2, r1
   84690:	4649      	mov	r1, r9
   84692:	4630      	mov	r0, r6
   84694:	9301      	str	r3, [sp, #4]
   84696:	f000 fc05 	bl	84ea4 <_sbrk_r>
   8469a:	1c43      	adds	r3, r0, #1
   8469c:	9b01      	ldr	r3, [sp, #4]
   8469e:	f000 813f 	beq.w	84920 <_malloc_r+0x504>
   846a2:	ebcb 0200 	rsb	r2, fp, r0
   846a6:	444a      	add	r2, r9
   846a8:	f042 0201 	orr.w	r2, r2, #1
   846ac:	6819      	ldr	r1, [r3, #0]
   846ae:	42bc      	cmp	r4, r7
   846b0:	4449      	add	r1, r9
   846b2:	f8c7 b008 	str.w	fp, [r7, #8]
   846b6:	6019      	str	r1, [r3, #0]
   846b8:	f8cb 2004 	str.w	r2, [fp, #4]
   846bc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 84764 <_malloc_r+0x348>
   846c0:	d016      	beq.n	846f0 <_malloc_r+0x2d4>
   846c2:	f1b8 0f0f 	cmp.w	r8, #15
   846c6:	f240 80fd 	bls.w	848c4 <_malloc_r+0x4a8>
   846ca:	6862      	ldr	r2, [r4, #4]
   846cc:	f1a8 030c 	sub.w	r3, r8, #12
   846d0:	f023 0307 	bic.w	r3, r3, #7
   846d4:	f002 0201 	and.w	r2, r2, #1
   846d8:	18e0      	adds	r0, r4, r3
   846da:	f04f 0e05 	mov.w	lr, #5
   846de:	431a      	orrs	r2, r3
   846e0:	2b0f      	cmp	r3, #15
   846e2:	6062      	str	r2, [r4, #4]
   846e4:	f8c0 e004 	str.w	lr, [r0, #4]
   846e8:	f8c0 e008 	str.w	lr, [r0, #8]
   846ec:	f200 811c 	bhi.w	84928 <_malloc_r+0x50c>
   846f0:	4b1d      	ldr	r3, [pc, #116]	; (84768 <_malloc_r+0x34c>)
   846f2:	68bc      	ldr	r4, [r7, #8]
   846f4:	681a      	ldr	r2, [r3, #0]
   846f6:	4291      	cmp	r1, r2
   846f8:	bf88      	it	hi
   846fa:	6019      	strhi	r1, [r3, #0]
   846fc:	4b1b      	ldr	r3, [pc, #108]	; (8476c <_malloc_r+0x350>)
   846fe:	681a      	ldr	r2, [r3, #0]
   84700:	4291      	cmp	r1, r2
   84702:	6862      	ldr	r2, [r4, #4]
   84704:	bf88      	it	hi
   84706:	6019      	strhi	r1, [r3, #0]
   84708:	f022 0203 	bic.w	r2, r2, #3
   8470c:	4295      	cmp	r5, r2
   8470e:	eba2 0305 	sub.w	r3, r2, r5
   84712:	d801      	bhi.n	84718 <_malloc_r+0x2fc>
   84714:	2b0f      	cmp	r3, #15
   84716:	dc04      	bgt.n	84722 <_malloc_r+0x306>
   84718:	4630      	mov	r0, r6
   8471a:	f000 f9d7 	bl	84acc <__malloc_unlock>
   8471e:	2400      	movs	r4, #0
   84720:	e745      	b.n	845ae <_malloc_r+0x192>
   84722:	f045 0201 	orr.w	r2, r5, #1
   84726:	f043 0301 	orr.w	r3, r3, #1
   8472a:	4425      	add	r5, r4
   8472c:	6062      	str	r2, [r4, #4]
   8472e:	4630      	mov	r0, r6
   84730:	60bd      	str	r5, [r7, #8]
   84732:	3408      	adds	r4, #8
   84734:	606b      	str	r3, [r5, #4]
   84736:	f000 f9c9 	bl	84acc <__malloc_unlock>
   8473a:	4620      	mov	r0, r4
   8473c:	b003      	add	sp, #12
   8473e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84742:	2b14      	cmp	r3, #20
   84744:	d971      	bls.n	8482a <_malloc_r+0x40e>
   84746:	2b54      	cmp	r3, #84	; 0x54
   84748:	f200 80a4 	bhi.w	84894 <_malloc_r+0x478>
   8474c:	0b28      	lsrs	r0, r5, #12
   8474e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   84752:	ea4f 014e 	mov.w	r1, lr, lsl #1
   84756:	306e      	adds	r0, #110	; 0x6e
   84758:	e682      	b.n	84460 <_malloc_r+0x44>
   8475a:	bf00      	nop
   8475c:	20070574 	.word	0x20070574
   84760:	2007ac38 	.word	0x2007ac38
   84764:	2007ac3c 	.word	0x2007ac3c
   84768:	2007ac34 	.word	0x2007ac34
   8476c:	2007ac30 	.word	0x2007ac30
   84770:	20070980 	.word	0x20070980
   84774:	0a5a      	lsrs	r2, r3, #9
   84776:	2a04      	cmp	r2, #4
   84778:	d95e      	bls.n	84838 <_malloc_r+0x41c>
   8477a:	2a14      	cmp	r2, #20
   8477c:	f200 80b3 	bhi.w	848e6 <_malloc_r+0x4ca>
   84780:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   84784:	0049      	lsls	r1, r1, #1
   84786:	325b      	adds	r2, #91	; 0x5b
   84788:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   8478c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   84790:	f1ac 0c08 	sub.w	ip, ip, #8
   84794:	458c      	cmp	ip, r1
   84796:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 84970 <_malloc_r+0x554>
   8479a:	f000 8088 	beq.w	848ae <_malloc_r+0x492>
   8479e:	684a      	ldr	r2, [r1, #4]
   847a0:	f022 0203 	bic.w	r2, r2, #3
   847a4:	4293      	cmp	r3, r2
   847a6:	d202      	bcs.n	847ae <_malloc_r+0x392>
   847a8:	6889      	ldr	r1, [r1, #8]
   847aa:	458c      	cmp	ip, r1
   847ac:	d1f7      	bne.n	8479e <_malloc_r+0x382>
   847ae:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   847b2:	687a      	ldr	r2, [r7, #4]
   847b4:	f8c4 c00c 	str.w	ip, [r4, #12]
   847b8:	60a1      	str	r1, [r4, #8]
   847ba:	f8cc 4008 	str.w	r4, [ip, #8]
   847be:	60cc      	str	r4, [r1, #12]
   847c0:	e696      	b.n	844f0 <_malloc_r+0xd4>
   847c2:	f045 0701 	orr.w	r7, r5, #1
   847c6:	f042 0301 	orr.w	r3, r2, #1
   847ca:	4425      	add	r5, r4
   847cc:	6067      	str	r7, [r4, #4]
   847ce:	4630      	mov	r0, r6
   847d0:	614d      	str	r5, [r1, #20]
   847d2:	610d      	str	r5, [r1, #16]
   847d4:	f8c5 e00c 	str.w	lr, [r5, #12]
   847d8:	f8c5 e008 	str.w	lr, [r5, #8]
   847dc:	606b      	str	r3, [r5, #4]
   847de:	50aa      	str	r2, [r5, r2]
   847e0:	3408      	adds	r4, #8
   847e2:	f000 f973 	bl	84acc <__malloc_unlock>
   847e6:	e6e2      	b.n	845ae <_malloc_r+0x192>
   847e8:	684a      	ldr	r2, [r1, #4]
   847ea:	e681      	b.n	844f0 <_malloc_r+0xd4>
   847ec:	f108 0801 	add.w	r8, r8, #1
   847f0:	f018 0f03 	tst.w	r8, #3
   847f4:	f10c 0c08 	add.w	ip, ip, #8
   847f8:	f47f ae8c 	bne.w	84514 <_malloc_r+0xf8>
   847fc:	e030      	b.n	84860 <_malloc_r+0x444>
   847fe:	68dc      	ldr	r4, [r3, #12]
   84800:	42a3      	cmp	r3, r4
   84802:	bf08      	it	eq
   84804:	3002      	addeq	r0, #2
   84806:	f43f ae40 	beq.w	8448a <_malloc_r+0x6e>
   8480a:	e6c0      	b.n	8458e <_malloc_r+0x172>
   8480c:	460c      	mov	r4, r1
   8480e:	440b      	add	r3, r1
   84810:	685a      	ldr	r2, [r3, #4]
   84812:	68c9      	ldr	r1, [r1, #12]
   84814:	f854 5f08 	ldr.w	r5, [r4, #8]!
   84818:	f042 0201 	orr.w	r2, r2, #1
   8481c:	605a      	str	r2, [r3, #4]
   8481e:	4630      	mov	r0, r6
   84820:	60e9      	str	r1, [r5, #12]
   84822:	608d      	str	r5, [r1, #8]
   84824:	f000 f952 	bl	84acc <__malloc_unlock>
   84828:	e6c1      	b.n	845ae <_malloc_r+0x192>
   8482a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   8482e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   84832:	ea4f 014e 	mov.w	r1, lr, lsl #1
   84836:	e613      	b.n	84460 <_malloc_r+0x44>
   84838:	099a      	lsrs	r2, r3, #6
   8483a:	f102 0139 	add.w	r1, r2, #57	; 0x39
   8483e:	0049      	lsls	r1, r1, #1
   84840:	3238      	adds	r2, #56	; 0x38
   84842:	e7a1      	b.n	84788 <_malloc_r+0x36c>
   84844:	42bc      	cmp	r4, r7
   84846:	4b4a      	ldr	r3, [pc, #296]	; (84970 <_malloc_r+0x554>)
   84848:	f43f af00 	beq.w	8464c <_malloc_r+0x230>
   8484c:	689c      	ldr	r4, [r3, #8]
   8484e:	6862      	ldr	r2, [r4, #4]
   84850:	f022 0203 	bic.w	r2, r2, #3
   84854:	e75a      	b.n	8470c <_malloc_r+0x2f0>
   84856:	f859 3908 	ldr.w	r3, [r9], #-8
   8485a:	4599      	cmp	r9, r3
   8485c:	f040 8082 	bne.w	84964 <_malloc_r+0x548>
   84860:	f010 0f03 	tst.w	r0, #3
   84864:	f100 30ff 	add.w	r0, r0, #4294967295
   84868:	d1f5      	bne.n	84856 <_malloc_r+0x43a>
   8486a:	687b      	ldr	r3, [r7, #4]
   8486c:	ea23 0304 	bic.w	r3, r3, r4
   84870:	607b      	str	r3, [r7, #4]
   84872:	0064      	lsls	r4, r4, #1
   84874:	429c      	cmp	r4, r3
   84876:	f63f aebd 	bhi.w	845f4 <_malloc_r+0x1d8>
   8487a:	2c00      	cmp	r4, #0
   8487c:	f43f aeba 	beq.w	845f4 <_malloc_r+0x1d8>
   84880:	421c      	tst	r4, r3
   84882:	4640      	mov	r0, r8
   84884:	f47f ae42 	bne.w	8450c <_malloc_r+0xf0>
   84888:	0064      	lsls	r4, r4, #1
   8488a:	421c      	tst	r4, r3
   8488c:	f100 0004 	add.w	r0, r0, #4
   84890:	d0fa      	beq.n	84888 <_malloc_r+0x46c>
   84892:	e63b      	b.n	8450c <_malloc_r+0xf0>
   84894:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   84898:	d818      	bhi.n	848cc <_malloc_r+0x4b0>
   8489a:	0be8      	lsrs	r0, r5, #15
   8489c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   848a0:	ea4f 014e 	mov.w	r1, lr, lsl #1
   848a4:	3077      	adds	r0, #119	; 0x77
   848a6:	e5db      	b.n	84460 <_malloc_r+0x44>
   848a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   848ac:	e6eb      	b.n	84686 <_malloc_r+0x26a>
   848ae:	2101      	movs	r1, #1
   848b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   848b4:	1092      	asrs	r2, r2, #2
   848b6:	fa01 f202 	lsl.w	r2, r1, r2
   848ba:	431a      	orrs	r2, r3
   848bc:	f8c8 2004 	str.w	r2, [r8, #4]
   848c0:	4661      	mov	r1, ip
   848c2:	e777      	b.n	847b4 <_malloc_r+0x398>
   848c4:	2301      	movs	r3, #1
   848c6:	f8cb 3004 	str.w	r3, [fp, #4]
   848ca:	e725      	b.n	84718 <_malloc_r+0x2fc>
   848cc:	f240 5254 	movw	r2, #1364	; 0x554
   848d0:	4293      	cmp	r3, r2
   848d2:	d820      	bhi.n	84916 <_malloc_r+0x4fa>
   848d4:	0ca8      	lsrs	r0, r5, #18
   848d6:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   848da:	ea4f 014e 	mov.w	r1, lr, lsl #1
   848de:	307c      	adds	r0, #124	; 0x7c
   848e0:	e5be      	b.n	84460 <_malloc_r+0x44>
   848e2:	3210      	adds	r2, #16
   848e4:	e6a4      	b.n	84630 <_malloc_r+0x214>
   848e6:	2a54      	cmp	r2, #84	; 0x54
   848e8:	d826      	bhi.n	84938 <_malloc_r+0x51c>
   848ea:	0b1a      	lsrs	r2, r3, #12
   848ec:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   848f0:	0049      	lsls	r1, r1, #1
   848f2:	326e      	adds	r2, #110	; 0x6e
   848f4:	e748      	b.n	84788 <_malloc_r+0x36c>
   848f6:	68bc      	ldr	r4, [r7, #8]
   848f8:	6862      	ldr	r2, [r4, #4]
   848fa:	f022 0203 	bic.w	r2, r2, #3
   848fe:	e705      	b.n	8470c <_malloc_r+0x2f0>
   84900:	f3ca 000b 	ubfx	r0, sl, #0, #12
   84904:	2800      	cmp	r0, #0
   84906:	f47f aea8 	bne.w	8465a <_malloc_r+0x23e>
   8490a:	4442      	add	r2, r8
   8490c:	68bb      	ldr	r3, [r7, #8]
   8490e:	f042 0201 	orr.w	r2, r2, #1
   84912:	605a      	str	r2, [r3, #4]
   84914:	e6ec      	b.n	846f0 <_malloc_r+0x2d4>
   84916:	21fe      	movs	r1, #254	; 0xfe
   84918:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   8491c:	207e      	movs	r0, #126	; 0x7e
   8491e:	e59f      	b.n	84460 <_malloc_r+0x44>
   84920:	2201      	movs	r2, #1
   84922:	f04f 0900 	mov.w	r9, #0
   84926:	e6c1      	b.n	846ac <_malloc_r+0x290>
   84928:	f104 0108 	add.w	r1, r4, #8
   8492c:	4630      	mov	r0, r6
   8492e:	f7ff fa65 	bl	83dfc <_free_r>
   84932:	f8d9 1000 	ldr.w	r1, [r9]
   84936:	e6db      	b.n	846f0 <_malloc_r+0x2d4>
   84938:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8493c:	d805      	bhi.n	8494a <_malloc_r+0x52e>
   8493e:	0bda      	lsrs	r2, r3, #15
   84940:	f102 0178 	add.w	r1, r2, #120	; 0x78
   84944:	0049      	lsls	r1, r1, #1
   84946:	3277      	adds	r2, #119	; 0x77
   84948:	e71e      	b.n	84788 <_malloc_r+0x36c>
   8494a:	f240 5154 	movw	r1, #1364	; 0x554
   8494e:	428a      	cmp	r2, r1
   84950:	d805      	bhi.n	8495e <_malloc_r+0x542>
   84952:	0c9a      	lsrs	r2, r3, #18
   84954:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   84958:	0049      	lsls	r1, r1, #1
   8495a:	327c      	adds	r2, #124	; 0x7c
   8495c:	e714      	b.n	84788 <_malloc_r+0x36c>
   8495e:	21fe      	movs	r1, #254	; 0xfe
   84960:	227e      	movs	r2, #126	; 0x7e
   84962:	e711      	b.n	84788 <_malloc_r+0x36c>
   84964:	687b      	ldr	r3, [r7, #4]
   84966:	e784      	b.n	84872 <_malloc_r+0x456>
   84968:	08e8      	lsrs	r0, r5, #3
   8496a:	1c43      	adds	r3, r0, #1
   8496c:	005b      	lsls	r3, r3, #1
   8496e:	e605      	b.n	8457c <_malloc_r+0x160>
   84970:	20070574 	.word	0x20070574

00084974 <memchr>:
   84974:	0783      	lsls	r3, r0, #30
   84976:	b470      	push	{r4, r5, r6}
   84978:	b2cd      	uxtb	r5, r1
   8497a:	d03d      	beq.n	849f8 <memchr+0x84>
   8497c:	1e53      	subs	r3, r2, #1
   8497e:	b302      	cbz	r2, 849c2 <memchr+0x4e>
   84980:	7802      	ldrb	r2, [r0, #0]
   84982:	42aa      	cmp	r2, r5
   84984:	d01e      	beq.n	849c4 <memchr+0x50>
   84986:	1c42      	adds	r2, r0, #1
   84988:	e004      	b.n	84994 <memchr+0x20>
   8498a:	b1d3      	cbz	r3, 849c2 <memchr+0x4e>
   8498c:	7804      	ldrb	r4, [r0, #0]
   8498e:	3b01      	subs	r3, #1
   84990:	42ac      	cmp	r4, r5
   84992:	d017      	beq.n	849c4 <memchr+0x50>
   84994:	f012 0f03 	tst.w	r2, #3
   84998:	4610      	mov	r0, r2
   8499a:	f102 0201 	add.w	r2, r2, #1
   8499e:	d1f4      	bne.n	8498a <memchr+0x16>
   849a0:	2b03      	cmp	r3, #3
   849a2:	d811      	bhi.n	849c8 <memchr+0x54>
   849a4:	b353      	cbz	r3, 849fc <memchr+0x88>
   849a6:	7802      	ldrb	r2, [r0, #0]
   849a8:	42aa      	cmp	r2, r5
   849aa:	d00b      	beq.n	849c4 <memchr+0x50>
   849ac:	4403      	add	r3, r0
   849ae:	1c42      	adds	r2, r0, #1
   849b0:	e002      	b.n	849b8 <memchr+0x44>
   849b2:	7801      	ldrb	r1, [r0, #0]
   849b4:	42a9      	cmp	r1, r5
   849b6:	d005      	beq.n	849c4 <memchr+0x50>
   849b8:	4293      	cmp	r3, r2
   849ba:	4610      	mov	r0, r2
   849bc:	f102 0201 	add.w	r2, r2, #1
   849c0:	d1f7      	bne.n	849b2 <memchr+0x3e>
   849c2:	2000      	movs	r0, #0
   849c4:	bc70      	pop	{r4, r5, r6}
   849c6:	4770      	bx	lr
   849c8:	4604      	mov	r4, r0
   849ca:	020e      	lsls	r6, r1, #8
   849cc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   849d0:	432e      	orrs	r6, r5
   849d2:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   849d6:	6822      	ldr	r2, [r4, #0]
   849d8:	4620      	mov	r0, r4
   849da:	4072      	eors	r2, r6
   849dc:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   849e0:	ea21 0202 	bic.w	r2, r1, r2
   849e4:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   849e8:	f104 0404 	add.w	r4, r4, #4
   849ec:	d1db      	bne.n	849a6 <memchr+0x32>
   849ee:	3b04      	subs	r3, #4
   849f0:	2b03      	cmp	r3, #3
   849f2:	4620      	mov	r0, r4
   849f4:	d8ef      	bhi.n	849d6 <memchr+0x62>
   849f6:	e7d5      	b.n	849a4 <memchr+0x30>
   849f8:	4613      	mov	r3, r2
   849fa:	e7d1      	b.n	849a0 <memchr+0x2c>
   849fc:	4618      	mov	r0, r3
   849fe:	e7e1      	b.n	849c4 <memchr+0x50>

00084a00 <memmove>:
   84a00:	4288      	cmp	r0, r1
   84a02:	b5f0      	push	{r4, r5, r6, r7, lr}
   84a04:	d90d      	bls.n	84a22 <memmove+0x22>
   84a06:	188b      	adds	r3, r1, r2
   84a08:	4298      	cmp	r0, r3
   84a0a:	d20a      	bcs.n	84a22 <memmove+0x22>
   84a0c:	1881      	adds	r1, r0, r2
   84a0e:	2a00      	cmp	r2, #0
   84a10:	d051      	beq.n	84ab6 <memmove+0xb6>
   84a12:	1a9a      	subs	r2, r3, r2
   84a14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   84a18:	4293      	cmp	r3, r2
   84a1a:	f801 4d01 	strb.w	r4, [r1, #-1]!
   84a1e:	d1f9      	bne.n	84a14 <memmove+0x14>
   84a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84a22:	2a0f      	cmp	r2, #15
   84a24:	d948      	bls.n	84ab8 <memmove+0xb8>
   84a26:	ea41 0300 	orr.w	r3, r1, r0
   84a2a:	079b      	lsls	r3, r3, #30
   84a2c:	d146      	bne.n	84abc <memmove+0xbc>
   84a2e:	4615      	mov	r5, r2
   84a30:	f100 0410 	add.w	r4, r0, #16
   84a34:	f101 0310 	add.w	r3, r1, #16
   84a38:	f853 6c10 	ldr.w	r6, [r3, #-16]
   84a3c:	3d10      	subs	r5, #16
   84a3e:	f844 6c10 	str.w	r6, [r4, #-16]
   84a42:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   84a46:	2d0f      	cmp	r5, #15
   84a48:	f844 6c0c 	str.w	r6, [r4, #-12]
   84a4c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   84a50:	f104 0410 	add.w	r4, r4, #16
   84a54:	f844 6c18 	str.w	r6, [r4, #-24]
   84a58:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84a5c:	f103 0310 	add.w	r3, r3, #16
   84a60:	f844 6c14 	str.w	r6, [r4, #-20]
   84a64:	d8e8      	bhi.n	84a38 <memmove+0x38>
   84a66:	f1a2 0310 	sub.w	r3, r2, #16
   84a6a:	f023 030f 	bic.w	r3, r3, #15
   84a6e:	f002 0e0f 	and.w	lr, r2, #15
   84a72:	3310      	adds	r3, #16
   84a74:	f1be 0f03 	cmp.w	lr, #3
   84a78:	4419      	add	r1, r3
   84a7a:	4403      	add	r3, r0
   84a7c:	d921      	bls.n	84ac2 <memmove+0xc2>
   84a7e:	460e      	mov	r6, r1
   84a80:	4674      	mov	r4, lr
   84a82:	1f1d      	subs	r5, r3, #4
   84a84:	f856 7b04 	ldr.w	r7, [r6], #4
   84a88:	3c04      	subs	r4, #4
   84a8a:	2c03      	cmp	r4, #3
   84a8c:	f845 7f04 	str.w	r7, [r5, #4]!
   84a90:	d8f8      	bhi.n	84a84 <memmove+0x84>
   84a92:	f1ae 0404 	sub.w	r4, lr, #4
   84a96:	f024 0403 	bic.w	r4, r4, #3
   84a9a:	3404      	adds	r4, #4
   84a9c:	4423      	add	r3, r4
   84a9e:	4421      	add	r1, r4
   84aa0:	f002 0203 	and.w	r2, r2, #3
   84aa4:	b162      	cbz	r2, 84ac0 <memmove+0xc0>
   84aa6:	3b01      	subs	r3, #1
   84aa8:	440a      	add	r2, r1
   84aaa:	f811 4b01 	ldrb.w	r4, [r1], #1
   84aae:	428a      	cmp	r2, r1
   84ab0:	f803 4f01 	strb.w	r4, [r3, #1]!
   84ab4:	d1f9      	bne.n	84aaa <memmove+0xaa>
   84ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84ab8:	4603      	mov	r3, r0
   84aba:	e7f3      	b.n	84aa4 <memmove+0xa4>
   84abc:	4603      	mov	r3, r0
   84abe:	e7f2      	b.n	84aa6 <memmove+0xa6>
   84ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84ac2:	4672      	mov	r2, lr
   84ac4:	e7ee      	b.n	84aa4 <memmove+0xa4>
   84ac6:	bf00      	nop

00084ac8 <__malloc_lock>:
   84ac8:	4770      	bx	lr
   84aca:	bf00      	nop

00084acc <__malloc_unlock>:
   84acc:	4770      	bx	lr
   84ace:	bf00      	nop

00084ad0 <_realloc_r>:
   84ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84ad4:	4617      	mov	r7, r2
   84ad6:	b083      	sub	sp, #12
   84ad8:	2900      	cmp	r1, #0
   84ada:	f000 808f 	beq.w	84bfc <_realloc_r+0x12c>
   84ade:	460d      	mov	r5, r1
   84ae0:	4681      	mov	r9, r0
   84ae2:	f107 040b 	add.w	r4, r7, #11
   84ae6:	f7ff ffef 	bl	84ac8 <__malloc_lock>
   84aea:	f855 ec04 	ldr.w	lr, [r5, #-4]
   84aee:	2c16      	cmp	r4, #22
   84af0:	f02e 0603 	bic.w	r6, lr, #3
   84af4:	f1a5 0808 	sub.w	r8, r5, #8
   84af8:	d83c      	bhi.n	84b74 <_realloc_r+0xa4>
   84afa:	2210      	movs	r2, #16
   84afc:	4614      	mov	r4, r2
   84afe:	42a7      	cmp	r7, r4
   84b00:	d83d      	bhi.n	84b7e <_realloc_r+0xae>
   84b02:	4296      	cmp	r6, r2
   84b04:	da42      	bge.n	84b8c <_realloc_r+0xbc>
   84b06:	4bc6      	ldr	r3, [pc, #792]	; (84e20 <_realloc_r+0x350>)
   84b08:	eb08 0006 	add.w	r0, r8, r6
   84b0c:	6899      	ldr	r1, [r3, #8]
   84b0e:	4288      	cmp	r0, r1
   84b10:	6841      	ldr	r1, [r0, #4]
   84b12:	f000 80d7 	beq.w	84cc4 <_realloc_r+0x1f4>
   84b16:	f021 0301 	bic.w	r3, r1, #1
   84b1a:	4403      	add	r3, r0
   84b1c:	685b      	ldr	r3, [r3, #4]
   84b1e:	07db      	lsls	r3, r3, #31
   84b20:	d54c      	bpl.n	84bbc <_realloc_r+0xec>
   84b22:	f01e 0f01 	tst.w	lr, #1
   84b26:	f000 809d 	beq.w	84c64 <_realloc_r+0x194>
   84b2a:	4639      	mov	r1, r7
   84b2c:	4648      	mov	r0, r9
   84b2e:	f7ff fc75 	bl	8441c <_malloc_r>
   84b32:	4607      	mov	r7, r0
   84b34:	2800      	cmp	r0, #0
   84b36:	d03a      	beq.n	84bae <_realloc_r+0xde>
   84b38:	f855 3c04 	ldr.w	r3, [r5, #-4]
   84b3c:	f1a0 0208 	sub.w	r2, r0, #8
   84b40:	f023 0301 	bic.w	r3, r3, #1
   84b44:	4443      	add	r3, r8
   84b46:	429a      	cmp	r2, r3
   84b48:	f000 813e 	beq.w	84dc8 <_realloc_r+0x2f8>
   84b4c:	1f32      	subs	r2, r6, #4
   84b4e:	2a24      	cmp	r2, #36	; 0x24
   84b50:	f200 812b 	bhi.w	84daa <_realloc_r+0x2da>
   84b54:	2a13      	cmp	r2, #19
   84b56:	f200 80ff 	bhi.w	84d58 <_realloc_r+0x288>
   84b5a:	4603      	mov	r3, r0
   84b5c:	462a      	mov	r2, r5
   84b5e:	6811      	ldr	r1, [r2, #0]
   84b60:	6019      	str	r1, [r3, #0]
   84b62:	6851      	ldr	r1, [r2, #4]
   84b64:	6059      	str	r1, [r3, #4]
   84b66:	6892      	ldr	r2, [r2, #8]
   84b68:	609a      	str	r2, [r3, #8]
   84b6a:	4629      	mov	r1, r5
   84b6c:	4648      	mov	r0, r9
   84b6e:	f7ff f945 	bl	83dfc <_free_r>
   84b72:	e01c      	b.n	84bae <_realloc_r+0xde>
   84b74:	f024 0407 	bic.w	r4, r4, #7
   84b78:	2c00      	cmp	r4, #0
   84b7a:	4622      	mov	r2, r4
   84b7c:	dabf      	bge.n	84afe <_realloc_r+0x2e>
   84b7e:	230c      	movs	r3, #12
   84b80:	2000      	movs	r0, #0
   84b82:	f8c9 3000 	str.w	r3, [r9]
   84b86:	b003      	add	sp, #12
   84b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84b8c:	462f      	mov	r7, r5
   84b8e:	1b33      	subs	r3, r6, r4
   84b90:	2b0f      	cmp	r3, #15
   84b92:	f8d8 2004 	ldr.w	r2, [r8, #4]
   84b96:	d81d      	bhi.n	84bd4 <_realloc_r+0x104>
   84b98:	f002 0201 	and.w	r2, r2, #1
   84b9c:	4332      	orrs	r2, r6
   84b9e:	eb08 0106 	add.w	r1, r8, r6
   84ba2:	f8c8 2004 	str.w	r2, [r8, #4]
   84ba6:	684b      	ldr	r3, [r1, #4]
   84ba8:	f043 0301 	orr.w	r3, r3, #1
   84bac:	604b      	str	r3, [r1, #4]
   84bae:	4648      	mov	r0, r9
   84bb0:	f7ff ff8c 	bl	84acc <__malloc_unlock>
   84bb4:	4638      	mov	r0, r7
   84bb6:	b003      	add	sp, #12
   84bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84bbc:	f021 0103 	bic.w	r1, r1, #3
   84bc0:	4431      	add	r1, r6
   84bc2:	4291      	cmp	r1, r2
   84bc4:	db20      	blt.n	84c08 <_realloc_r+0x138>
   84bc6:	68c3      	ldr	r3, [r0, #12]
   84bc8:	6882      	ldr	r2, [r0, #8]
   84bca:	462f      	mov	r7, r5
   84bcc:	60d3      	str	r3, [r2, #12]
   84bce:	460e      	mov	r6, r1
   84bd0:	609a      	str	r2, [r3, #8]
   84bd2:	e7dc      	b.n	84b8e <_realloc_r+0xbe>
   84bd4:	f002 0201 	and.w	r2, r2, #1
   84bd8:	eb08 0104 	add.w	r1, r8, r4
   84bdc:	4314      	orrs	r4, r2
   84bde:	f043 0201 	orr.w	r2, r3, #1
   84be2:	f8c8 4004 	str.w	r4, [r8, #4]
   84be6:	440b      	add	r3, r1
   84be8:	604a      	str	r2, [r1, #4]
   84bea:	685a      	ldr	r2, [r3, #4]
   84bec:	3108      	adds	r1, #8
   84bee:	f042 0201 	orr.w	r2, r2, #1
   84bf2:	605a      	str	r2, [r3, #4]
   84bf4:	4648      	mov	r0, r9
   84bf6:	f7ff f901 	bl	83dfc <_free_r>
   84bfa:	e7d8      	b.n	84bae <_realloc_r+0xde>
   84bfc:	4611      	mov	r1, r2
   84bfe:	b003      	add	sp, #12
   84c00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84c04:	f7ff bc0a 	b.w	8441c <_malloc_r>
   84c08:	f01e 0f01 	tst.w	lr, #1
   84c0c:	d18d      	bne.n	84b2a <_realloc_r+0x5a>
   84c0e:	f855 3c08 	ldr.w	r3, [r5, #-8]
   84c12:	ebc3 0a08 	rsb	sl, r3, r8
   84c16:	f8da 3004 	ldr.w	r3, [sl, #4]
   84c1a:	f023 0c03 	bic.w	ip, r3, #3
   84c1e:	eb01 0e0c 	add.w	lr, r1, ip
   84c22:	4596      	cmp	lr, r2
   84c24:	db26      	blt.n	84c74 <_realloc_r+0x1a4>
   84c26:	4657      	mov	r7, sl
   84c28:	68c3      	ldr	r3, [r0, #12]
   84c2a:	6881      	ldr	r1, [r0, #8]
   84c2c:	1f32      	subs	r2, r6, #4
   84c2e:	60cb      	str	r3, [r1, #12]
   84c30:	6099      	str	r1, [r3, #8]
   84c32:	f857 1f08 	ldr.w	r1, [r7, #8]!
   84c36:	f8da 300c 	ldr.w	r3, [sl, #12]
   84c3a:	2a24      	cmp	r2, #36	; 0x24
   84c3c:	60cb      	str	r3, [r1, #12]
   84c3e:	6099      	str	r1, [r3, #8]
   84c40:	f200 80c9 	bhi.w	84dd6 <_realloc_r+0x306>
   84c44:	2a13      	cmp	r2, #19
   84c46:	f240 8092 	bls.w	84d6e <_realloc_r+0x29e>
   84c4a:	682b      	ldr	r3, [r5, #0]
   84c4c:	2a1b      	cmp	r2, #27
   84c4e:	f8ca 3008 	str.w	r3, [sl, #8]
   84c52:	686b      	ldr	r3, [r5, #4]
   84c54:	f8ca 300c 	str.w	r3, [sl, #12]
   84c58:	f200 80cd 	bhi.w	84df6 <_realloc_r+0x326>
   84c5c:	3508      	adds	r5, #8
   84c5e:	f10a 0310 	add.w	r3, sl, #16
   84c62:	e085      	b.n	84d70 <_realloc_r+0x2a0>
   84c64:	f855 3c08 	ldr.w	r3, [r5, #-8]
   84c68:	ebc3 0a08 	rsb	sl, r3, r8
   84c6c:	f8da 3004 	ldr.w	r3, [sl, #4]
   84c70:	f023 0c03 	bic.w	ip, r3, #3
   84c74:	eb06 030c 	add.w	r3, r6, ip
   84c78:	4293      	cmp	r3, r2
   84c7a:	f6ff af56 	blt.w	84b2a <_realloc_r+0x5a>
   84c7e:	4657      	mov	r7, sl
   84c80:	f8da 100c 	ldr.w	r1, [sl, #12]
   84c84:	f857 0f08 	ldr.w	r0, [r7, #8]!
   84c88:	1f32      	subs	r2, r6, #4
   84c8a:	2a24      	cmp	r2, #36	; 0x24
   84c8c:	60c1      	str	r1, [r0, #12]
   84c8e:	6088      	str	r0, [r1, #8]
   84c90:	f200 80aa 	bhi.w	84de8 <_realloc_r+0x318>
   84c94:	2a13      	cmp	r2, #19
   84c96:	f240 80a5 	bls.w	84de4 <_realloc_r+0x314>
   84c9a:	6829      	ldr	r1, [r5, #0]
   84c9c:	2a1b      	cmp	r2, #27
   84c9e:	f8ca 1008 	str.w	r1, [sl, #8]
   84ca2:	6869      	ldr	r1, [r5, #4]
   84ca4:	f8ca 100c 	str.w	r1, [sl, #12]
   84ca8:	f200 80bc 	bhi.w	84e24 <_realloc_r+0x354>
   84cac:	3508      	adds	r5, #8
   84cae:	f10a 0210 	add.w	r2, sl, #16
   84cb2:	6829      	ldr	r1, [r5, #0]
   84cb4:	461e      	mov	r6, r3
   84cb6:	6011      	str	r1, [r2, #0]
   84cb8:	6869      	ldr	r1, [r5, #4]
   84cba:	46d0      	mov	r8, sl
   84cbc:	6051      	str	r1, [r2, #4]
   84cbe:	68ab      	ldr	r3, [r5, #8]
   84cc0:	6093      	str	r3, [r2, #8]
   84cc2:	e764      	b.n	84b8e <_realloc_r+0xbe>
   84cc4:	f021 0b03 	bic.w	fp, r1, #3
   84cc8:	f104 0010 	add.w	r0, r4, #16
   84ccc:	44b3      	add	fp, r6
   84cce:	4583      	cmp	fp, r0
   84cd0:	da57      	bge.n	84d82 <_realloc_r+0x2b2>
   84cd2:	f01e 0f01 	tst.w	lr, #1
   84cd6:	f47f af28 	bne.w	84b2a <_realloc_r+0x5a>
   84cda:	f855 1c08 	ldr.w	r1, [r5, #-8]
   84cde:	ebc1 0a08 	rsb	sl, r1, r8
   84ce2:	f8da 1004 	ldr.w	r1, [sl, #4]
   84ce6:	f021 0c03 	bic.w	ip, r1, #3
   84cea:	44e3      	add	fp, ip
   84cec:	4558      	cmp	r0, fp
   84cee:	dcc1      	bgt.n	84c74 <_realloc_r+0x1a4>
   84cf0:	4657      	mov	r7, sl
   84cf2:	f8da 100c 	ldr.w	r1, [sl, #12]
   84cf6:	f857 0f08 	ldr.w	r0, [r7, #8]!
   84cfa:	1f32      	subs	r2, r6, #4
   84cfc:	2a24      	cmp	r2, #36	; 0x24
   84cfe:	60c1      	str	r1, [r0, #12]
   84d00:	6088      	str	r0, [r1, #8]
   84d02:	f200 80b1 	bhi.w	84e68 <_realloc_r+0x398>
   84d06:	2a13      	cmp	r2, #19
   84d08:	f240 80a2 	bls.w	84e50 <_realloc_r+0x380>
   84d0c:	6829      	ldr	r1, [r5, #0]
   84d0e:	2a1b      	cmp	r2, #27
   84d10:	f8ca 1008 	str.w	r1, [sl, #8]
   84d14:	6869      	ldr	r1, [r5, #4]
   84d16:	f8ca 100c 	str.w	r1, [sl, #12]
   84d1a:	f200 80ac 	bhi.w	84e76 <_realloc_r+0x3a6>
   84d1e:	3508      	adds	r5, #8
   84d20:	f10a 0210 	add.w	r2, sl, #16
   84d24:	6829      	ldr	r1, [r5, #0]
   84d26:	6011      	str	r1, [r2, #0]
   84d28:	6869      	ldr	r1, [r5, #4]
   84d2a:	6051      	str	r1, [r2, #4]
   84d2c:	68a9      	ldr	r1, [r5, #8]
   84d2e:	6091      	str	r1, [r2, #8]
   84d30:	ebc4 020b 	rsb	r2, r4, fp
   84d34:	eb0a 0104 	add.w	r1, sl, r4
   84d38:	f042 0201 	orr.w	r2, r2, #1
   84d3c:	6099      	str	r1, [r3, #8]
   84d3e:	604a      	str	r2, [r1, #4]
   84d40:	f8da 3004 	ldr.w	r3, [sl, #4]
   84d44:	4648      	mov	r0, r9
   84d46:	f003 0301 	and.w	r3, r3, #1
   84d4a:	431c      	orrs	r4, r3
   84d4c:	f8ca 4004 	str.w	r4, [sl, #4]
   84d50:	f7ff febc 	bl	84acc <__malloc_unlock>
   84d54:	4638      	mov	r0, r7
   84d56:	e72e      	b.n	84bb6 <_realloc_r+0xe6>
   84d58:	682b      	ldr	r3, [r5, #0]
   84d5a:	2a1b      	cmp	r2, #27
   84d5c:	6003      	str	r3, [r0, #0]
   84d5e:	686b      	ldr	r3, [r5, #4]
   84d60:	6043      	str	r3, [r0, #4]
   84d62:	d826      	bhi.n	84db2 <_realloc_r+0x2e2>
   84d64:	f100 0308 	add.w	r3, r0, #8
   84d68:	f105 0208 	add.w	r2, r5, #8
   84d6c:	e6f7      	b.n	84b5e <_realloc_r+0x8e>
   84d6e:	463b      	mov	r3, r7
   84d70:	682a      	ldr	r2, [r5, #0]
   84d72:	4676      	mov	r6, lr
   84d74:	601a      	str	r2, [r3, #0]
   84d76:	686a      	ldr	r2, [r5, #4]
   84d78:	46d0      	mov	r8, sl
   84d7a:	605a      	str	r2, [r3, #4]
   84d7c:	68aa      	ldr	r2, [r5, #8]
   84d7e:	609a      	str	r2, [r3, #8]
   84d80:	e705      	b.n	84b8e <_realloc_r+0xbe>
   84d82:	ebc4 0b0b 	rsb	fp, r4, fp
   84d86:	eb08 0104 	add.w	r1, r8, r4
   84d8a:	f04b 0201 	orr.w	r2, fp, #1
   84d8e:	6099      	str	r1, [r3, #8]
   84d90:	604a      	str	r2, [r1, #4]
   84d92:	f855 3c04 	ldr.w	r3, [r5, #-4]
   84d96:	4648      	mov	r0, r9
   84d98:	f003 0301 	and.w	r3, r3, #1
   84d9c:	431c      	orrs	r4, r3
   84d9e:	f845 4c04 	str.w	r4, [r5, #-4]
   84da2:	f7ff fe93 	bl	84acc <__malloc_unlock>
   84da6:	4628      	mov	r0, r5
   84da8:	e705      	b.n	84bb6 <_realloc_r+0xe6>
   84daa:	4629      	mov	r1, r5
   84dac:	f7ff fe28 	bl	84a00 <memmove>
   84db0:	e6db      	b.n	84b6a <_realloc_r+0x9a>
   84db2:	68ab      	ldr	r3, [r5, #8]
   84db4:	2a24      	cmp	r2, #36	; 0x24
   84db6:	6083      	str	r3, [r0, #8]
   84db8:	68eb      	ldr	r3, [r5, #12]
   84dba:	60c3      	str	r3, [r0, #12]
   84dbc:	d027      	beq.n	84e0e <_realloc_r+0x33e>
   84dbe:	f100 0310 	add.w	r3, r0, #16
   84dc2:	f105 0210 	add.w	r2, r5, #16
   84dc6:	e6ca      	b.n	84b5e <_realloc_r+0x8e>
   84dc8:	f850 3c04 	ldr.w	r3, [r0, #-4]
   84dcc:	462f      	mov	r7, r5
   84dce:	f023 0303 	bic.w	r3, r3, #3
   84dd2:	441e      	add	r6, r3
   84dd4:	e6db      	b.n	84b8e <_realloc_r+0xbe>
   84dd6:	4629      	mov	r1, r5
   84dd8:	4638      	mov	r0, r7
   84dda:	4676      	mov	r6, lr
   84ddc:	46d0      	mov	r8, sl
   84dde:	f7ff fe0f 	bl	84a00 <memmove>
   84de2:	e6d4      	b.n	84b8e <_realloc_r+0xbe>
   84de4:	463a      	mov	r2, r7
   84de6:	e764      	b.n	84cb2 <_realloc_r+0x1e2>
   84de8:	4629      	mov	r1, r5
   84dea:	4638      	mov	r0, r7
   84dec:	461e      	mov	r6, r3
   84dee:	46d0      	mov	r8, sl
   84df0:	f7ff fe06 	bl	84a00 <memmove>
   84df4:	e6cb      	b.n	84b8e <_realloc_r+0xbe>
   84df6:	68ab      	ldr	r3, [r5, #8]
   84df8:	2a24      	cmp	r2, #36	; 0x24
   84dfa:	f8ca 3010 	str.w	r3, [sl, #16]
   84dfe:	68eb      	ldr	r3, [r5, #12]
   84e00:	f8ca 3014 	str.w	r3, [sl, #20]
   84e04:	d01a      	beq.n	84e3c <_realloc_r+0x36c>
   84e06:	3510      	adds	r5, #16
   84e08:	f10a 0318 	add.w	r3, sl, #24
   84e0c:	e7b0      	b.n	84d70 <_realloc_r+0x2a0>
   84e0e:	692a      	ldr	r2, [r5, #16]
   84e10:	f100 0318 	add.w	r3, r0, #24
   84e14:	6102      	str	r2, [r0, #16]
   84e16:	6969      	ldr	r1, [r5, #20]
   84e18:	f105 0218 	add.w	r2, r5, #24
   84e1c:	6141      	str	r1, [r0, #20]
   84e1e:	e69e      	b.n	84b5e <_realloc_r+0x8e>
   84e20:	20070574 	.word	0x20070574
   84e24:	68a9      	ldr	r1, [r5, #8]
   84e26:	2a24      	cmp	r2, #36	; 0x24
   84e28:	f8ca 1010 	str.w	r1, [sl, #16]
   84e2c:	68e9      	ldr	r1, [r5, #12]
   84e2e:	f8ca 1014 	str.w	r1, [sl, #20]
   84e32:	d00f      	beq.n	84e54 <_realloc_r+0x384>
   84e34:	3510      	adds	r5, #16
   84e36:	f10a 0218 	add.w	r2, sl, #24
   84e3a:	e73a      	b.n	84cb2 <_realloc_r+0x1e2>
   84e3c:	692a      	ldr	r2, [r5, #16]
   84e3e:	f10a 0320 	add.w	r3, sl, #32
   84e42:	f8ca 2018 	str.w	r2, [sl, #24]
   84e46:	696a      	ldr	r2, [r5, #20]
   84e48:	3518      	adds	r5, #24
   84e4a:	f8ca 201c 	str.w	r2, [sl, #28]
   84e4e:	e78f      	b.n	84d70 <_realloc_r+0x2a0>
   84e50:	463a      	mov	r2, r7
   84e52:	e767      	b.n	84d24 <_realloc_r+0x254>
   84e54:	6929      	ldr	r1, [r5, #16]
   84e56:	f10a 0220 	add.w	r2, sl, #32
   84e5a:	f8ca 1018 	str.w	r1, [sl, #24]
   84e5e:	6969      	ldr	r1, [r5, #20]
   84e60:	3518      	adds	r5, #24
   84e62:	f8ca 101c 	str.w	r1, [sl, #28]
   84e66:	e724      	b.n	84cb2 <_realloc_r+0x1e2>
   84e68:	4629      	mov	r1, r5
   84e6a:	4638      	mov	r0, r7
   84e6c:	9301      	str	r3, [sp, #4]
   84e6e:	f7ff fdc7 	bl	84a00 <memmove>
   84e72:	9b01      	ldr	r3, [sp, #4]
   84e74:	e75c      	b.n	84d30 <_realloc_r+0x260>
   84e76:	68a9      	ldr	r1, [r5, #8]
   84e78:	2a24      	cmp	r2, #36	; 0x24
   84e7a:	f8ca 1010 	str.w	r1, [sl, #16]
   84e7e:	68e9      	ldr	r1, [r5, #12]
   84e80:	f8ca 1014 	str.w	r1, [sl, #20]
   84e84:	d003      	beq.n	84e8e <_realloc_r+0x3be>
   84e86:	3510      	adds	r5, #16
   84e88:	f10a 0218 	add.w	r2, sl, #24
   84e8c:	e74a      	b.n	84d24 <_realloc_r+0x254>
   84e8e:	6929      	ldr	r1, [r5, #16]
   84e90:	f10a 0220 	add.w	r2, sl, #32
   84e94:	f8ca 1018 	str.w	r1, [sl, #24]
   84e98:	6969      	ldr	r1, [r5, #20]
   84e9a:	3518      	adds	r5, #24
   84e9c:	f8ca 101c 	str.w	r1, [sl, #28]
   84ea0:	e740      	b.n	84d24 <_realloc_r+0x254>
   84ea2:	bf00      	nop

00084ea4 <_sbrk_r>:
   84ea4:	b538      	push	{r3, r4, r5, lr}
   84ea6:	4c07      	ldr	r4, [pc, #28]	; (84ec4 <_sbrk_r+0x20>)
   84ea8:	2300      	movs	r3, #0
   84eaa:	4605      	mov	r5, r0
   84eac:	4608      	mov	r0, r1
   84eae:	6023      	str	r3, [r4, #0]
   84eb0:	f7fd fa3a 	bl	82328 <_sbrk>
   84eb4:	1c43      	adds	r3, r0, #1
   84eb6:	d000      	beq.n	84eba <_sbrk_r+0x16>
   84eb8:	bd38      	pop	{r3, r4, r5, pc}
   84eba:	6823      	ldr	r3, [r4, #0]
   84ebc:	2b00      	cmp	r3, #0
   84ebe:	d0fb      	beq.n	84eb8 <_sbrk_r+0x14>
   84ec0:	602b      	str	r3, [r5, #0]
   84ec2:	bd38      	pop	{r3, r4, r5, pc}
   84ec4:	2007c454 	.word	0x2007c454

00084ec8 <__sread>:
   84ec8:	b510      	push	{r4, lr}
   84eca:	460c      	mov	r4, r1
   84ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84ed0:	f000 f99a 	bl	85208 <_read_r>
   84ed4:	2800      	cmp	r0, #0
   84ed6:	db03      	blt.n	84ee0 <__sread+0x18>
   84ed8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84eda:	4403      	add	r3, r0
   84edc:	6523      	str	r3, [r4, #80]	; 0x50
   84ede:	bd10      	pop	{r4, pc}
   84ee0:	89a3      	ldrh	r3, [r4, #12]
   84ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84ee6:	81a3      	strh	r3, [r4, #12]
   84ee8:	bd10      	pop	{r4, pc}
   84eea:	bf00      	nop

00084eec <__swrite>:
   84eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84ef0:	460c      	mov	r4, r1
   84ef2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   84ef6:	461f      	mov	r7, r3
   84ef8:	05cb      	lsls	r3, r1, #23
   84efa:	4616      	mov	r6, r2
   84efc:	4605      	mov	r5, r0
   84efe:	d507      	bpl.n	84f10 <__swrite+0x24>
   84f00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84f04:	2302      	movs	r3, #2
   84f06:	2200      	movs	r2, #0
   84f08:	f000 f968 	bl	851dc <_lseek_r>
   84f0c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   84f10:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84f14:	81a1      	strh	r1, [r4, #12]
   84f16:	463b      	mov	r3, r7
   84f18:	4632      	mov	r2, r6
   84f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84f1e:	4628      	mov	r0, r5
   84f20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84f24:	f000 b814 	b.w	84f50 <_write_r>

00084f28 <__sseek>:
   84f28:	b510      	push	{r4, lr}
   84f2a:	460c      	mov	r4, r1
   84f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84f30:	f000 f954 	bl	851dc <_lseek_r>
   84f34:	89a3      	ldrh	r3, [r4, #12]
   84f36:	1c42      	adds	r2, r0, #1
   84f38:	bf0e      	itee	eq
   84f3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84f3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84f42:	6520      	strne	r0, [r4, #80]	; 0x50
   84f44:	81a3      	strh	r3, [r4, #12]
   84f46:	bd10      	pop	{r4, pc}

00084f48 <__sclose>:
   84f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84f4c:	f000 b8cc 	b.w	850e8 <_close_r>

00084f50 <_write_r>:
   84f50:	b570      	push	{r4, r5, r6, lr}
   84f52:	460d      	mov	r5, r1
   84f54:	4c08      	ldr	r4, [pc, #32]	; (84f78 <_write_r+0x28>)
   84f56:	4611      	mov	r1, r2
   84f58:	4606      	mov	r6, r0
   84f5a:	461a      	mov	r2, r3
   84f5c:	4628      	mov	r0, r5
   84f5e:	2300      	movs	r3, #0
   84f60:	6023      	str	r3, [r4, #0]
   84f62:	f7fb f929 	bl	801b8 <_write>
   84f66:	1c43      	adds	r3, r0, #1
   84f68:	d000      	beq.n	84f6c <_write_r+0x1c>
   84f6a:	bd70      	pop	{r4, r5, r6, pc}
   84f6c:	6823      	ldr	r3, [r4, #0]
   84f6e:	2b00      	cmp	r3, #0
   84f70:	d0fb      	beq.n	84f6a <_write_r+0x1a>
   84f72:	6033      	str	r3, [r6, #0]
   84f74:	bd70      	pop	{r4, r5, r6, pc}
   84f76:	bf00      	nop
   84f78:	2007c454 	.word	0x2007c454

00084f7c <__swsetup_r>:
   84f7c:	b538      	push	{r3, r4, r5, lr}
   84f7e:	4b30      	ldr	r3, [pc, #192]	; (85040 <__swsetup_r+0xc4>)
   84f80:	4605      	mov	r5, r0
   84f82:	6818      	ldr	r0, [r3, #0]
   84f84:	460c      	mov	r4, r1
   84f86:	b110      	cbz	r0, 84f8e <__swsetup_r+0x12>
   84f88:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84f8a:	2b00      	cmp	r3, #0
   84f8c:	d038      	beq.n	85000 <__swsetup_r+0x84>
   84f8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84f92:	b293      	uxth	r3, r2
   84f94:	0718      	lsls	r0, r3, #28
   84f96:	d50c      	bpl.n	84fb2 <__swsetup_r+0x36>
   84f98:	6920      	ldr	r0, [r4, #16]
   84f9a:	b1a8      	cbz	r0, 84fc8 <__swsetup_r+0x4c>
   84f9c:	f013 0201 	ands.w	r2, r3, #1
   84fa0:	d01e      	beq.n	84fe0 <__swsetup_r+0x64>
   84fa2:	6963      	ldr	r3, [r4, #20]
   84fa4:	2200      	movs	r2, #0
   84fa6:	425b      	negs	r3, r3
   84fa8:	61a3      	str	r3, [r4, #24]
   84faa:	60a2      	str	r2, [r4, #8]
   84fac:	b1f0      	cbz	r0, 84fec <__swsetup_r+0x70>
   84fae:	2000      	movs	r0, #0
   84fb0:	bd38      	pop	{r3, r4, r5, pc}
   84fb2:	06d9      	lsls	r1, r3, #27
   84fb4:	d53b      	bpl.n	8502e <__swsetup_r+0xb2>
   84fb6:	0758      	lsls	r0, r3, #29
   84fb8:	d425      	bmi.n	85006 <__swsetup_r+0x8a>
   84fba:	6920      	ldr	r0, [r4, #16]
   84fbc:	f042 0308 	orr.w	r3, r2, #8
   84fc0:	81a3      	strh	r3, [r4, #12]
   84fc2:	b29b      	uxth	r3, r3
   84fc4:	2800      	cmp	r0, #0
   84fc6:	d1e9      	bne.n	84f9c <__swsetup_r+0x20>
   84fc8:	f403 7220 	and.w	r2, r3, #640	; 0x280
   84fcc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   84fd0:	d0e4      	beq.n	84f9c <__swsetup_r+0x20>
   84fd2:	4628      	mov	r0, r5
   84fd4:	4621      	mov	r1, r4
   84fd6:	f7ff f9d5 	bl	84384 <__smakebuf_r>
   84fda:	89a3      	ldrh	r3, [r4, #12]
   84fdc:	6920      	ldr	r0, [r4, #16]
   84fde:	e7dd      	b.n	84f9c <__swsetup_r+0x20>
   84fe0:	0799      	lsls	r1, r3, #30
   84fe2:	bf58      	it	pl
   84fe4:	6962      	ldrpl	r2, [r4, #20]
   84fe6:	60a2      	str	r2, [r4, #8]
   84fe8:	2800      	cmp	r0, #0
   84fea:	d1e0      	bne.n	84fae <__swsetup_r+0x32>
   84fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84ff0:	061a      	lsls	r2, r3, #24
   84ff2:	d5dd      	bpl.n	84fb0 <__swsetup_r+0x34>
   84ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84ff8:	81a3      	strh	r3, [r4, #12]
   84ffa:	f04f 30ff 	mov.w	r0, #4294967295
   84ffe:	bd38      	pop	{r3, r4, r5, pc}
   85000:	f7fe fe90 	bl	83d24 <__sinit>
   85004:	e7c3      	b.n	84f8e <__swsetup_r+0x12>
   85006:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85008:	b151      	cbz	r1, 85020 <__swsetup_r+0xa4>
   8500a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8500e:	4299      	cmp	r1, r3
   85010:	d004      	beq.n	8501c <__swsetup_r+0xa0>
   85012:	4628      	mov	r0, r5
   85014:	f7fe fef2 	bl	83dfc <_free_r>
   85018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8501c:	2300      	movs	r3, #0
   8501e:	6323      	str	r3, [r4, #48]	; 0x30
   85020:	6920      	ldr	r0, [r4, #16]
   85022:	2300      	movs	r3, #0
   85024:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   85028:	e884 0009 	stmia.w	r4, {r0, r3}
   8502c:	e7c6      	b.n	84fbc <__swsetup_r+0x40>
   8502e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   85032:	2309      	movs	r3, #9
   85034:	602b      	str	r3, [r5, #0]
   85036:	f04f 30ff 	mov.w	r0, #4294967295
   8503a:	81a2      	strh	r2, [r4, #12]
   8503c:	bd38      	pop	{r3, r4, r5, pc}
   8503e:	bf00      	nop
   85040:	20070570 	.word	0x20070570

00085044 <__register_exitproc>:
   85044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85048:	4c25      	ldr	r4, [pc, #148]	; (850e0 <__register_exitproc+0x9c>)
   8504a:	4606      	mov	r6, r0
   8504c:	6825      	ldr	r5, [r4, #0]
   8504e:	4688      	mov	r8, r1
   85050:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   85054:	4692      	mov	sl, r2
   85056:	4699      	mov	r9, r3
   85058:	b3c4      	cbz	r4, 850cc <__register_exitproc+0x88>
   8505a:	6860      	ldr	r0, [r4, #4]
   8505c:	281f      	cmp	r0, #31
   8505e:	dc17      	bgt.n	85090 <__register_exitproc+0x4c>
   85060:	1c41      	adds	r1, r0, #1
   85062:	b176      	cbz	r6, 85082 <__register_exitproc+0x3e>
   85064:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   85068:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   8506c:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   85070:	2201      	movs	r2, #1
   85072:	4082      	lsls	r2, r0
   85074:	4315      	orrs	r5, r2
   85076:	2e02      	cmp	r6, #2
   85078:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   8507c:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   85080:	d01e      	beq.n	850c0 <__register_exitproc+0x7c>
   85082:	1c83      	adds	r3, r0, #2
   85084:	6061      	str	r1, [r4, #4]
   85086:	2000      	movs	r0, #0
   85088:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   8508c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85090:	4b14      	ldr	r3, [pc, #80]	; (850e4 <__register_exitproc+0xa0>)
   85092:	b303      	cbz	r3, 850d6 <__register_exitproc+0x92>
   85094:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85098:	f7ff f9b8 	bl	8440c <malloc>
   8509c:	4604      	mov	r4, r0
   8509e:	b1d0      	cbz	r0, 850d6 <__register_exitproc+0x92>
   850a0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   850a4:	2700      	movs	r7, #0
   850a6:	e884 0088 	stmia.w	r4, {r3, r7}
   850aa:	4638      	mov	r0, r7
   850ac:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   850b0:	2101      	movs	r1, #1
   850b2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   850b6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   850ba:	2e00      	cmp	r6, #0
   850bc:	d0e1      	beq.n	85082 <__register_exitproc+0x3e>
   850be:	e7d1      	b.n	85064 <__register_exitproc+0x20>
   850c0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   850c4:	431a      	orrs	r2, r3
   850c6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   850ca:	e7da      	b.n	85082 <__register_exitproc+0x3e>
   850cc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   850d0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   850d4:	e7c1      	b.n	8505a <__register_exitproc+0x16>
   850d6:	f04f 30ff 	mov.w	r0, #4294967295
   850da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   850de:	bf00      	nop
   850e0:	000865d0 	.word	0x000865d0
   850e4:	0008440d 	.word	0x0008440d

000850e8 <_close_r>:
   850e8:	b538      	push	{r3, r4, r5, lr}
   850ea:	4c07      	ldr	r4, [pc, #28]	; (85108 <_close_r+0x20>)
   850ec:	2300      	movs	r3, #0
   850ee:	4605      	mov	r5, r0
   850f0:	4608      	mov	r0, r1
   850f2:	6023      	str	r3, [r4, #0]
   850f4:	f7fd f932 	bl	8235c <_close>
   850f8:	1c43      	adds	r3, r0, #1
   850fa:	d000      	beq.n	850fe <_close_r+0x16>
   850fc:	bd38      	pop	{r3, r4, r5, pc}
   850fe:	6823      	ldr	r3, [r4, #0]
   85100:	2b00      	cmp	r3, #0
   85102:	d0fb      	beq.n	850fc <_close_r+0x14>
   85104:	602b      	str	r3, [r5, #0]
   85106:	bd38      	pop	{r3, r4, r5, pc}
   85108:	2007c454 	.word	0x2007c454

0008510c <_fclose_r>:
   8510c:	2900      	cmp	r1, #0
   8510e:	d03d      	beq.n	8518c <_fclose_r+0x80>
   85110:	b570      	push	{r4, r5, r6, lr}
   85112:	4605      	mov	r5, r0
   85114:	460c      	mov	r4, r1
   85116:	b108      	cbz	r0, 8511c <_fclose_r+0x10>
   85118:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8511a:	b37b      	cbz	r3, 8517c <_fclose_r+0x70>
   8511c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85120:	b90b      	cbnz	r3, 85126 <_fclose_r+0x1a>
   85122:	2000      	movs	r0, #0
   85124:	bd70      	pop	{r4, r5, r6, pc}
   85126:	4621      	mov	r1, r4
   85128:	4628      	mov	r0, r5
   8512a:	f7fe fcc3 	bl	83ab4 <__sflush_r>
   8512e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   85130:	4606      	mov	r6, r0
   85132:	b133      	cbz	r3, 85142 <_fclose_r+0x36>
   85134:	69e1      	ldr	r1, [r4, #28]
   85136:	4628      	mov	r0, r5
   85138:	4798      	blx	r3
   8513a:	2800      	cmp	r0, #0
   8513c:	bfb8      	it	lt
   8513e:	f04f 36ff 	movlt.w	r6, #4294967295
   85142:	89a3      	ldrh	r3, [r4, #12]
   85144:	061b      	lsls	r3, r3, #24
   85146:	d41c      	bmi.n	85182 <_fclose_r+0x76>
   85148:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8514a:	b141      	cbz	r1, 8515e <_fclose_r+0x52>
   8514c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85150:	4299      	cmp	r1, r3
   85152:	d002      	beq.n	8515a <_fclose_r+0x4e>
   85154:	4628      	mov	r0, r5
   85156:	f7fe fe51 	bl	83dfc <_free_r>
   8515a:	2300      	movs	r3, #0
   8515c:	6323      	str	r3, [r4, #48]	; 0x30
   8515e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   85160:	b121      	cbz	r1, 8516c <_fclose_r+0x60>
   85162:	4628      	mov	r0, r5
   85164:	f7fe fe4a 	bl	83dfc <_free_r>
   85168:	2300      	movs	r3, #0
   8516a:	6463      	str	r3, [r4, #68]	; 0x44
   8516c:	f7fe fde0 	bl	83d30 <__sfp_lock_acquire>
   85170:	2300      	movs	r3, #0
   85172:	81a3      	strh	r3, [r4, #12]
   85174:	f7fe fdde 	bl	83d34 <__sfp_lock_release>
   85178:	4630      	mov	r0, r6
   8517a:	bd70      	pop	{r4, r5, r6, pc}
   8517c:	f7fe fdd2 	bl	83d24 <__sinit>
   85180:	e7cc      	b.n	8511c <_fclose_r+0x10>
   85182:	6921      	ldr	r1, [r4, #16]
   85184:	4628      	mov	r0, r5
   85186:	f7fe fe39 	bl	83dfc <_free_r>
   8518a:	e7dd      	b.n	85148 <_fclose_r+0x3c>
   8518c:	2000      	movs	r0, #0
   8518e:	4770      	bx	lr

00085190 <_fstat_r>:
   85190:	b538      	push	{r3, r4, r5, lr}
   85192:	460b      	mov	r3, r1
   85194:	4c07      	ldr	r4, [pc, #28]	; (851b4 <_fstat_r+0x24>)
   85196:	4605      	mov	r5, r0
   85198:	4611      	mov	r1, r2
   8519a:	4618      	mov	r0, r3
   8519c:	2300      	movs	r3, #0
   8519e:	6023      	str	r3, [r4, #0]
   851a0:	f7fd f8e0 	bl	82364 <_fstat>
   851a4:	1c43      	adds	r3, r0, #1
   851a6:	d000      	beq.n	851aa <_fstat_r+0x1a>
   851a8:	bd38      	pop	{r3, r4, r5, pc}
   851aa:	6823      	ldr	r3, [r4, #0]
   851ac:	2b00      	cmp	r3, #0
   851ae:	d0fb      	beq.n	851a8 <_fstat_r+0x18>
   851b0:	602b      	str	r3, [r5, #0]
   851b2:	bd38      	pop	{r3, r4, r5, pc}
   851b4:	2007c454 	.word	0x2007c454

000851b8 <_isatty_r>:
   851b8:	b538      	push	{r3, r4, r5, lr}
   851ba:	4c07      	ldr	r4, [pc, #28]	; (851d8 <_isatty_r+0x20>)
   851bc:	2300      	movs	r3, #0
   851be:	4605      	mov	r5, r0
   851c0:	4608      	mov	r0, r1
   851c2:	6023      	str	r3, [r4, #0]
   851c4:	f7fd f8d4 	bl	82370 <_isatty>
   851c8:	1c43      	adds	r3, r0, #1
   851ca:	d000      	beq.n	851ce <_isatty_r+0x16>
   851cc:	bd38      	pop	{r3, r4, r5, pc}
   851ce:	6823      	ldr	r3, [r4, #0]
   851d0:	2b00      	cmp	r3, #0
   851d2:	d0fb      	beq.n	851cc <_isatty_r+0x14>
   851d4:	602b      	str	r3, [r5, #0]
   851d6:	bd38      	pop	{r3, r4, r5, pc}
   851d8:	2007c454 	.word	0x2007c454

000851dc <_lseek_r>:
   851dc:	b570      	push	{r4, r5, r6, lr}
   851de:	460d      	mov	r5, r1
   851e0:	4c08      	ldr	r4, [pc, #32]	; (85204 <_lseek_r+0x28>)
   851e2:	4611      	mov	r1, r2
   851e4:	4606      	mov	r6, r0
   851e6:	461a      	mov	r2, r3
   851e8:	4628      	mov	r0, r5
   851ea:	2300      	movs	r3, #0
   851ec:	6023      	str	r3, [r4, #0]
   851ee:	f7fd f8c1 	bl	82374 <_lseek>
   851f2:	1c43      	adds	r3, r0, #1
   851f4:	d000      	beq.n	851f8 <_lseek_r+0x1c>
   851f6:	bd70      	pop	{r4, r5, r6, pc}
   851f8:	6823      	ldr	r3, [r4, #0]
   851fa:	2b00      	cmp	r3, #0
   851fc:	d0fb      	beq.n	851f6 <_lseek_r+0x1a>
   851fe:	6033      	str	r3, [r6, #0]
   85200:	bd70      	pop	{r4, r5, r6, pc}
   85202:	bf00      	nop
   85204:	2007c454 	.word	0x2007c454

00085208 <_read_r>:
   85208:	b570      	push	{r4, r5, r6, lr}
   8520a:	460d      	mov	r5, r1
   8520c:	4c08      	ldr	r4, [pc, #32]	; (85230 <_read_r+0x28>)
   8520e:	4611      	mov	r1, r2
   85210:	4606      	mov	r6, r0
   85212:	461a      	mov	r2, r3
   85214:	4628      	mov	r0, r5
   85216:	2300      	movs	r3, #0
   85218:	6023      	str	r3, [r4, #0]
   8521a:	f7fa ff99 	bl	80150 <_read>
   8521e:	1c43      	adds	r3, r0, #1
   85220:	d000      	beq.n	85224 <_read_r+0x1c>
   85222:	bd70      	pop	{r4, r5, r6, pc}
   85224:	6823      	ldr	r3, [r4, #0]
   85226:	2b00      	cmp	r3, #0
   85228:	d0fb      	beq.n	85222 <_read_r+0x1a>
   8522a:	6033      	str	r3, [r6, #0]
   8522c:	bd70      	pop	{r4, r5, r6, pc}
   8522e:	bf00      	nop
   85230:	2007c454 	.word	0x2007c454
   85234:	09097325 	.word	0x09097325
   85238:	25096325 	.word	0x25096325
   8523c:	75250975 	.word	0x75250975
   85240:	0d752509 	.word	0x0d752509
   85244:	0000000a 	.word	0x0000000a
   85248:	454c4449 	.word	0x454c4449
   8524c:	00000000 	.word	0x00000000
   85250:	00000a0d 	.word	0x00000a0d
   85254:	20726d54 	.word	0x20726d54
   85258:	00637653 	.word	0x00637653
   8525c:	43415254 	.word	0x43415254
   85260:	53415f45 	.word	0x53415f45
   85264:	54524553 	.word	0x54524553
   85268:	5476203a 	.word	0x5476203a
   8526c:	65636172 	.word	0x65636172
   85270:	6f727245 	.word	0x6f727245
   85274:	6d203a72 	.word	0x6d203a72
   85278:	3d206773 	.word	0x3d206773
   8527c:	554e203d 	.word	0x554e203d
   85280:	00004c4c 	.word	0x00004c4c
   85284:	43415254 	.word	0x43415254
   85288:	53415f45 	.word	0x53415f45
   8528c:	54524553 	.word	0x54524553
   85290:	5476203a 	.word	0x5476203a
   85294:	65636172 	.word	0x65636172
   85298:	6f727245 	.word	0x6f727245
   8529c:	52203a72 	.word	0x52203a72
   852a0:	726f6365 	.word	0x726f6365
   852a4:	44726564 	.word	0x44726564
   852a8:	50617461 	.word	0x50617461
   852ac:	3d207274 	.word	0x3d207274
   852b0:	554e203d 	.word	0x554e203d
   852b4:	00004c4c 	.word	0x00004c4c
   852b8:	63617254 	.word	0x63617254
   852bc:	65522065 	.word	0x65522065
   852c0:	64726f63 	.word	0x64726f63
   852c4:	44207265 	.word	0x44207265
   852c8:	006f6d65 	.word	0x006f6d65
   852cc:	63617254 	.word	0x63617254
   852d0:	74732065 	.word	0x74732065
   852d4:	20747261 	.word	0x20747261
   852d8:	6b72616d 	.word	0x6b72616d
   852dc:	20737265 	.word	0x20737265
   852e0:	65726c61 	.word	0x65726c61
   852e4:	20796461 	.word	0x20796461
   852e8:	74696e69 	.word	0x74696e69
   852ec:	696c6169 	.word	0x696c6169
   852f0:	2164657a 	.word	0x2164657a
   852f4:	00000000 	.word	0x00000000
   852f8:	65747441 	.word	0x65747441
   852fc:	2074706d 	.word	0x2074706d
   85300:	69206f74 	.word	0x69206f74
   85304:	7865646e 	.word	0x7865646e
   85308:	74756f20 	.word	0x74756f20
   8530c:	65646973 	.word	0x65646973
   85310:	65766520 	.word	0x65766520
   85314:	6220746e 	.word	0x6220746e
   85318:	65666675 	.word	0x65666675
   8531c:	00002172 	.word	0x00002172
   85320:	43415254 	.word	0x43415254
   85324:	53415f45 	.word	0x53415f45
   85328:	54524553 	.word	0x54524553
   8532c:	6975203a 	.word	0x6975203a
   85330:	65646e49 	.word	0x65646e49
   85334:	4f664f78 	.word	0x4f664f78
   85338:	63656a62 	.word	0x63656a62
   8533c:	49203a74 	.word	0x49203a74
   85340:	6c61766e 	.word	0x6c61766e
   85344:	76206469 	.word	0x76206469
   85348:	65756c61 	.word	0x65756c61
   8534c:	726f6620 	.word	0x726f6620
   85350:	6a626f20 	.word	0x6a626f20
   85354:	63746365 	.word	0x63746365
   85358:	7373616c 	.word	0x7373616c
   8535c:	00000000 	.word	0x00000000
   85360:	43415254 	.word	0x43415254
   85364:	53415f45 	.word	0x53415f45
   85368:	54524553 	.word	0x54524553
   8536c:	6975203a 	.word	0x6975203a
   85370:	65646e49 	.word	0x65646e49
   85374:	4f664f78 	.word	0x4f664f78
   85378:	63656a62 	.word	0x63656a62
   8537c:	49203a74 	.word	0x49203a74
   85380:	6c61766e 	.word	0x6c61766e
   85384:	76206469 	.word	0x76206469
   85388:	65756c61 	.word	0x65756c61
   8538c:	726f6620 	.word	0x726f6620
   85390:	6a626f20 	.word	0x6a626f20
   85394:	68746365 	.word	0x68746365
   85398:	6c646e61 	.word	0x6c646e61
   8539c:	00000065 	.word	0x00000065
   853a0:	43415254 	.word	0x43415254
   853a4:	53415f45 	.word	0x53415f45
   853a8:	54524553 	.word	0x54524553
   853ac:	5478203a 	.word	0x5478203a
   853b0:	65636172 	.word	0x65636172
   853b4:	4f746547 	.word	0x4f746547
   853b8:	63656a62 	.word	0x63656a62
   853bc:	6e614874 	.word	0x6e614874
   853c0:	3a656c64 	.word	0x3a656c64
   853c4:	766e4920 	.word	0x766e4920
   853c8:	64696c61 	.word	0x64696c61
   853cc:	6c617620 	.word	0x6c617620
   853d0:	66206575 	.word	0x66206575
   853d4:	6f20726f 	.word	0x6f20726f
   853d8:	63656a62 	.word	0x63656a62
   853dc:	616c6374 	.word	0x616c6374
   853e0:	00007373 	.word	0x00007373
   853e4:	43415254 	.word	0x43415254
   853e8:	53415f45 	.word	0x53415f45
   853ec:	54524553 	.word	0x54524553
   853f0:	5476203a 	.word	0x5476203a
   853f4:	65636172 	.word	0x65636172
   853f8:	65657246 	.word	0x65657246
   853fc:	656a624f 	.word	0x656a624f
   85400:	61487463 	.word	0x61487463
   85404:	656c646e 	.word	0x656c646e
   85408:	6e49203a 	.word	0x6e49203a
   8540c:	696c6176 	.word	0x696c6176
   85410:	61762064 	.word	0x61762064
   85414:	2065756c 	.word	0x2065756c
   85418:	20726f66 	.word	0x20726f66
   8541c:	656a626f 	.word	0x656a626f
   85420:	6c637463 	.word	0x6c637463
   85424:	00737361 	.word	0x00737361
   85428:	43415254 	.word	0x43415254
   8542c:	53415f45 	.word	0x53415f45
   85430:	54524553 	.word	0x54524553
   85434:	5476203a 	.word	0x5476203a
   85438:	65636172 	.word	0x65636172
   8543c:	65657246 	.word	0x65657246
   85440:	656a624f 	.word	0x656a624f
   85444:	61487463 	.word	0x61487463
   85448:	656c646e 	.word	0x656c646e
   8544c:	6e49203a 	.word	0x6e49203a
   85450:	696c6176 	.word	0x696c6176
   85454:	61762064 	.word	0x61762064
   85458:	2065756c 	.word	0x2065756c
   8545c:	20726f66 	.word	0x20726f66
   85460:	646e6168 	.word	0x646e6168
   85464:	0000656c 	.word	0x0000656c
   85468:	65747441 	.word	0x65747441
   8546c:	2074706d 	.word	0x2074706d
   85470:	66206f74 	.word	0x66206f74
   85474:	20656572 	.word	0x20656572
   85478:	65726f6d 	.word	0x65726f6d
   8547c:	6e616820 	.word	0x6e616820
   85480:	73656c64 	.word	0x73656c64
   85484:	61687420 	.word	0x61687420
   85488:	6c61206e 	.word	0x6c61206e
   8548c:	61636f6c 	.word	0x61636f6c
   85490:	21646574 	.word	0x21646574
   85494:	00000000 	.word	0x00000000
   85498:	43415254 	.word	0x43415254
   8549c:	53415f45 	.word	0x53415f45
   854a0:	54524553 	.word	0x54524553
   854a4:	5476203a 	.word	0x5476203a
   854a8:	65636172 	.word	0x65636172
   854ac:	4f746553 	.word	0x4f746553
   854b0:	63656a62 	.word	0x63656a62
   854b4:	6d614e74 	.word	0x6d614e74
   854b8:	6e203a65 	.word	0x6e203a65
   854bc:	20656d61 	.word	0x20656d61
   854c0:	4e203d3d 	.word	0x4e203d3d
   854c4:	004c4c55 	.word	0x004c4c55
   854c8:	656c6c49 	.word	0x656c6c49
   854cc:	206c6167 	.word	0x206c6167
   854d0:	656a626f 	.word	0x656a626f
   854d4:	63207463 	.word	0x63207463
   854d8:	7373616c 	.word	0x7373616c
   854dc:	206e6920 	.word	0x206e6920
   854e0:	61725476 	.word	0x61725476
   854e4:	65536563 	.word	0x65536563
   854e8:	6a624f74 	.word	0x6a624f74
   854ec:	4e746365 	.word	0x4e746365
   854f0:	00656d61 	.word	0x00656d61
   854f4:	656c6c49 	.word	0x656c6c49
   854f8:	206c6167 	.word	0x206c6167
   854fc:	646e6168 	.word	0x646e6168
   85500:	2820656c 	.word	0x2820656c
   85504:	69202930 	.word	0x69202930
   85508:	5476206e 	.word	0x5476206e
   8550c:	65636172 	.word	0x65636172
   85510:	4f746553 	.word	0x4f746553
   85514:	63656a62 	.word	0x63656a62
   85518:	6d614e74 	.word	0x6d614e74
   8551c:	00002e65 	.word	0x00002e65
   85520:	43415254 	.word	0x43415254
   85524:	53415f45 	.word	0x53415f45
   85528:	54524553 	.word	0x54524553
   8552c:	7270203a 	.word	0x7270203a
   85530:	65684376 	.word	0x65684376
   85534:	61446b63 	.word	0x61446b63
   85538:	6f546174 	.word	0x6f546174
   8553c:	764f6542 	.word	0x764f6542
   85540:	72777265 	.word	0x72777265
   85544:	65747469 	.word	0x65747469
   85548:	726f466e 	.word	0x726f466e
   8554c:	746c754d 	.word	0x746c754d
   85550:	746e4569 	.word	0x746e4569
   85554:	76457972 	.word	0x76457972
   85558:	73746e65 	.word	0x73746e65
   8555c:	6f6e203a 	.word	0x6f6e203a
   85560:	746e4566 	.word	0x746e4566
   85564:	73656972 	.word	0x73656972
   85568:	68436f54 	.word	0x68436f54
   8556c:	206b6365 	.word	0x206b6365
   85570:	30203d3d 	.word	0x30203d3d
   85574:	00000000 	.word	0x00000000
   85578:	43415254 	.word	0x43415254
   8557c:	53415f45 	.word	0x53415f45
   85580:	54524553 	.word	0x54524553
   85584:	7270203a 	.word	0x7270203a
   85588:	61725476 	.word	0x61725476
   8558c:	65476563 	.word	0x65476563
   85590:	53544474 	.word	0x53544474
   85594:	6e49203a 	.word	0x6e49203a
   85598:	696c6176 	.word	0x696c6176
   8559c:	61762064 	.word	0x61762064
   855a0:	2065756c 	.word	0x2065756c
   855a4:	20726f66 	.word	0x20726f66
   855a8:	61726170 	.word	0x61726170
   855ac:	616d5f6d 	.word	0x616d5f6d
   855b0:	53544478 	.word	0x53544478
   855b4:	00000000 	.word	0x00000000
   855b8:	20646142 	.word	0x20646142
   855bc:	61726170 	.word	0x61726170
   855c0:	616d5f6d 	.word	0x616d5f6d
   855c4:	53544478 	.word	0x53544478
   855c8:	206e6920 	.word	0x206e6920
   855cc:	54767270 	.word	0x54767270
   855d0:	65636172 	.word	0x65636172
   855d4:	44746547 	.word	0x44746547
   855d8:	00005354 	.word	0x00005354
   855dc:	43415254 	.word	0x43415254
   855e0:	53415f45 	.word	0x53415f45
   855e4:	54524553 	.word	0x54524553
   855e8:	7270203a 	.word	0x7270203a
   855ec:	61725476 	.word	0x61725476
   855f0:	6f4c6563 	.word	0x6f4c6563
   855f4:	70756b6f 	.word	0x70756b6f
   855f8:	626d7953 	.word	0x626d7953
   855fc:	61546c6f 	.word	0x61546c6f
   85600:	45656c62 	.word	0x45656c62
   85604:	7972746e 	.word	0x7972746e
   85608:	616e203a 	.word	0x616e203a
   8560c:	3d20656d 	.word	0x3d20656d
   85610:	554e203d 	.word	0x554e203d
   85614:	00004c4c 	.word	0x00004c4c
   85618:	43415254 	.word	0x43415254
   8561c:	53415f45 	.word	0x53415f45
   85620:	54524553 	.word	0x54524553
   85624:	7270203a 	.word	0x7270203a
   85628:	61725476 	.word	0x61725476
   8562c:	6f4c6563 	.word	0x6f4c6563
   85630:	70756b6f 	.word	0x70756b6f
   85634:	626d7953 	.word	0x626d7953
   85638:	61546c6f 	.word	0x61546c6f
   8563c:	45656c62 	.word	0x45656c62
   85640:	7972746e 	.word	0x7972746e
   85644:	656c203a 	.word	0x656c203a
   85648:	3d3d206e 	.word	0x3d3d206e
   8564c:	00003020 	.word	0x00003020
   85650:	43415254 	.word	0x43415254
   85654:	53415f45 	.word	0x53415f45
   85658:	54524553 	.word	0x54524553
   8565c:	7270203a 	.word	0x7270203a
   85660:	61725476 	.word	0x61725476
   85664:	72436563 	.word	0x72436563
   85668:	65746165 	.word	0x65746165
   8566c:	626d7953 	.word	0x626d7953
   85670:	61546c6f 	.word	0x61546c6f
   85674:	45656c62 	.word	0x45656c62
   85678:	7972746e 	.word	0x7972746e
   8567c:	616e203a 	.word	0x616e203a
   85680:	3d20656d 	.word	0x3d20656d
   85684:	554e203d 	.word	0x554e203d
   85688:	00004c4c 	.word	0x00004c4c
   8568c:	43415254 	.word	0x43415254
   85690:	53415f45 	.word	0x53415f45
   85694:	54524553 	.word	0x54524553
   85698:	7270203a 	.word	0x7270203a
   8569c:	61725476 	.word	0x61725476
   856a0:	72436563 	.word	0x72436563
   856a4:	65746165 	.word	0x65746165
   856a8:	626d7953 	.word	0x626d7953
   856ac:	61546c6f 	.word	0x61546c6f
   856b0:	45656c62 	.word	0x45656c62
   856b4:	7972746e 	.word	0x7972746e
   856b8:	656c203a 	.word	0x656c203a
   856bc:	3d3d206e 	.word	0x3d3d206e
   856c0:	00003020 	.word	0x00003020
   856c4:	626d7953 	.word	0x626d7953
   856c8:	74206c6f 	.word	0x74206c6f
   856cc:	656c6261 	.word	0x656c6261
   856d0:	6c756620 	.word	0x6c756620
   856d4:	49202e6c 	.word	0x49202e6c
   856d8:	6572636e 	.word	0x6572636e
   856dc:	20657361 	.word	0x20657361
   856e0:	424d5953 	.word	0x424d5953
   856e4:	545f4c4f 	.word	0x545f4c4f
   856e8:	454c4241 	.word	0x454c4241
   856ec:	5a49535f 	.word	0x5a49535f
   856f0:	6e692045 	.word	0x6e692045
   856f4:	63727420 	.word	0x63727420
   856f8:	666e6f43 	.word	0x666e6f43
   856fc:	682e6769 	.word	0x682e6769
   85700:	00000000 	.word	0x00000000
   85704:	43415254 	.word	0x43415254
   85708:	53415f45 	.word	0x53415f45
   8570c:	54524553 	.word	0x54524553
   85710:	7270203a 	.word	0x7270203a
   85714:	61725476 	.word	0x61725476
   85718:	65476563 	.word	0x65476563
   8571c:	65684374 	.word	0x65684374
   85720:	75736b63 	.word	0x75736b63
   85724:	70203a6d 	.word	0x70203a6d
   85728:	656d616e 	.word	0x656d616e
   8572c:	203d3d20 	.word	0x203d3d20
   85730:	4c4c554e 	.word	0x4c4c554e
   85734:	00000000 	.word	0x00000000
   85738:	43415254 	.word	0x43415254
   8573c:	53415f45 	.word	0x53415f45
   85740:	54524553 	.word	0x54524553
   85744:	7270203a 	.word	0x7270203a
   85748:	61725476 	.word	0x61725476
   8574c:	65476563 	.word	0x65476563
   85750:	65684374 	.word	0x65684374
   85754:	75736b63 	.word	0x75736b63
   85758:	70203a6d 	.word	0x70203a6d
   8575c:	20637263 	.word	0x20637263
   85760:	4e203d3d 	.word	0x4e203d3d
   85764:	004c4c55 	.word	0x004c4c55
   85768:	43415254 	.word	0x43415254
   8576c:	53415f45 	.word	0x53415f45
   85770:	54524553 	.word	0x54524553
   85774:	7270203a 	.word	0x7270203a
   85778:	61725476 	.word	0x61725476
   8577c:	65476563 	.word	0x65476563
   85780:	65684374 	.word	0x65684374
   85784:	75736b63 	.word	0x75736b63
   85788:	70203a6d 	.word	0x70203a6d
   8578c:	676e656c 	.word	0x676e656c
   85790:	3d206874 	.word	0x3d206874
   85794:	554e203d 	.word	0x554e203d
   85798:	00004c4c 	.word	0x00004c4c
   8579c:	43415254 	.word	0x43415254
   857a0:	53415f45 	.word	0x53415f45
   857a4:	54524553 	.word	0x54524553
   857a8:	7270203a 	.word	0x7270203a
   857ac:	61725476 	.word	0x61725476
   857b0:	704f6563 	.word	0x704f6563
   857b4:	79536e65 	.word	0x79536e65
   857b8:	6c6f626d 	.word	0x6c6f626d
   857bc:	616e203a 	.word	0x616e203a
   857c0:	3d20656d 	.word	0x3d20656d
   857c4:	554e203d 	.word	0x554e203d
   857c8:	00004c4c 	.word	0x00004c4c
   857cc:	20545744 	.word	0x20545744
   857d0:	20746f6e 	.word	0x20746f6e
   857d4:	70707573 	.word	0x70707573
   857d8:	6574726f 	.word	0x6574726f
   857dc:	79622064 	.word	0x79622064
   857e0:	69687420 	.word	0x69687420
   857e4:	68632073 	.word	0x68632073
   857e8:	00217069 	.word	0x00217069
   857ec:	5f545744 	.word	0x5f545744
   857f0:	43435943 	.word	0x43435943
   857f4:	6e20544e 	.word	0x6e20544e
   857f8:	7320746f 	.word	0x7320746f
   857fc:	6f707075 	.word	0x6f707075
   85800:	64657472 	.word	0x64657472
   85804:	20796220 	.word	0x20796220
   85808:	73696874 	.word	0x73696874
   8580c:	69686320 	.word	0x69686320
   85810:	00002170 	.word	0x00002170
   85814:	43415254 	.word	0x43415254
   85818:	53415f45 	.word	0x53415f45
   8581c:	54524553 	.word	0x54524553
   85820:	7270203a 	.word	0x7270203a
   85824:	61725476 	.word	0x61725476
   85828:	65476563 	.word	0x65476563
   8582c:	72615074 	.word	0x72615074
   85830:	203a6d61 	.word	0x203a6d61
   85834:	61766e49 	.word	0x61766e49
   85838:	2064696c 	.word	0x2064696c
   8583c:	756c6176 	.word	0x756c6176
   85840:	6f662065 	.word	0x6f662065
   85844:	61702072 	.word	0x61702072
   85848:	5f6d6172 	.word	0x5f6d6172
   8584c:	0078616d 	.word	0x0078616d
   85850:	43415254 	.word	0x43415254
   85854:	53415f45 	.word	0x53415f45
   85858:	54524553 	.word	0x54524553
   8585c:	5476203a 	.word	0x5476203a
   85860:	65636172 	.word	0x65636172
   85864:	726f7453 	.word	0x726f7453
   85868:	73615465 	.word	0x73615465
   8586c:	6165526b 	.word	0x6165526b
   85870:	203a7964 	.word	0x203a7964
   85874:	61766e49 	.word	0x61766e49
   85878:	2064696c 	.word	0x2064696c
   8587c:	756c6176 	.word	0x756c6176
   85880:	6f662065 	.word	0x6f662065
   85884:	61682072 	.word	0x61682072
   85888:	656c646e 	.word	0x656c646e
   8588c:	00000000 	.word	0x00000000
   85890:	6f636552 	.word	0x6f636552
   85894:	72656472 	.word	0x72656472
   85898:	73756220 	.word	0x73756220
   8589c:	202d2079 	.word	0x202d2079
   858a0:	68676968 	.word	0x68676968
   858a4:	69727020 	.word	0x69727020
   858a8:	7469726f 	.word	0x7469726f
   858ac:	53492079 	.word	0x53492079
   858b0:	73752052 	.word	0x73752052
   858b4:	20676e69 	.word	0x20676e69
   858b8:	63737973 	.word	0x63737973
   858bc:	3f6c6c61 	.word	0x3f6c6c61
   858c0:	29312820 	.word	0x29312820
   858c4:	00000000 	.word	0x00000000
   858c8:	43415254 	.word	0x43415254
   858cc:	53415f45 	.word	0x53415f45
   858d0:	54524553 	.word	0x54524553
   858d4:	5476203a 	.word	0x5476203a
   858d8:	65636172 	.word	0x65636172
   858dc:	726f7453 	.word	0x726f7453
   858e0:	776f4c65 	.word	0x776f4c65
   858e4:	65776f50 	.word	0x65776f50
   858e8:	49203a72 	.word	0x49203a72
   858ec:	6c61766e 	.word	0x6c61766e
   858f0:	66206469 	.word	0x66206469
   858f4:	2067616c 	.word	0x2067616c
   858f8:	756c6176 	.word	0x756c6176
   858fc:	00000065 	.word	0x00000065
   85900:	43415254 	.word	0x43415254
   85904:	53415f45 	.word	0x53415f45
   85908:	54524553 	.word	0x54524553
   8590c:	5476203a 	.word	0x5476203a
   85910:	65636172 	.word	0x65636172
   85914:	726f7453 	.word	0x726f7453
   85918:	72654b65 	.word	0x72654b65
   8591c:	436c656e 	.word	0x436c656e
   85920:	3a6c6c61 	.word	0x3a6c6c61
   85924:	6f636520 	.word	0x6f636520
   85928:	3e206564 	.word	0x3e206564
   8592c:	7830203d 	.word	0x7830203d
   85930:	00004646 	.word	0x00004646
   85934:	43415254 	.word	0x43415254
   85938:	53415f45 	.word	0x53415f45
   8593c:	54524553 	.word	0x54524553
   85940:	5476203a 	.word	0x5476203a
   85944:	65636172 	.word	0x65636172
   85948:	726f7453 	.word	0x726f7453
   8594c:	72654b65 	.word	0x72654b65
   85950:	436c656e 	.word	0x436c656e
   85954:	3a6c6c61 	.word	0x3a6c6c61
   85958:	6a626f20 	.word	0x6a626f20
   8595c:	43746365 	.word	0x43746365
   85960:	7373616c 	.word	0x7373616c
   85964:	203d3e20 	.word	0x203d3e20
   85968:	43415254 	.word	0x43415254
   8596c:	434e5f45 	.word	0x434e5f45
   85970:	5353414c 	.word	0x5353414c
   85974:	00005345 	.word	0x00005345
   85978:	43415254 	.word	0x43415254
   8597c:	53415f45 	.word	0x53415f45
   85980:	54524553 	.word	0x54524553
   85984:	5476203a 	.word	0x5476203a
   85988:	65636172 	.word	0x65636172
   8598c:	726f7453 	.word	0x726f7453
   85990:	72654b65 	.word	0x72654b65
   85994:	436c656e 	.word	0x436c656e
   85998:	3a6c6c61 	.word	0x3a6c6c61
   8599c:	766e4920 	.word	0x766e4920
   859a0:	64696c61 	.word	0x64696c61
   859a4:	6c617620 	.word	0x6c617620
   859a8:	66206575 	.word	0x66206575
   859ac:	6f20726f 	.word	0x6f20726f
   859b0:	63656a62 	.word	0x63656a62
   859b4:	6d754e74 	.word	0x6d754e74
   859b8:	00726562 	.word	0x00726562
   859bc:	6f636552 	.word	0x6f636552
   859c0:	72656472 	.word	0x72656472
   859c4:	73756220 	.word	0x73756220
   859c8:	202d2079 	.word	0x202d2079
   859cc:	68676968 	.word	0x68676968
   859d0:	69727020 	.word	0x69727020
   859d4:	7469726f 	.word	0x7469726f
   859d8:	53492079 	.word	0x53492079
   859dc:	73752052 	.word	0x73752052
   859e0:	20676e69 	.word	0x20676e69
   859e4:	63737973 	.word	0x63737973
   859e8:	3f6c6c61 	.word	0x3f6c6c61
   859ec:	29322820 	.word	0x29322820
   859f0:	00000000 	.word	0x00000000
   859f4:	43415254 	.word	0x43415254
   859f8:	53415f45 	.word	0x53415f45
   859fc:	54524553 	.word	0x54524553
   85a00:	5476203a 	.word	0x5476203a
   85a04:	65636172 	.word	0x65636172
   85a08:	726f7453 	.word	0x726f7453
   85a0c:	72654b65 	.word	0x72654b65
   85a10:	436c656e 	.word	0x436c656e
   85a14:	3a6c6c61 	.word	0x3a6c6c61
   85a18:	74766520 	.word	0x74766520
   85a1c:	65646f63 	.word	0x65646f63
   85a20:	203d3e20 	.word	0x203d3e20
   85a24:	46467830 	.word	0x46467830
   85a28:	00000000 	.word	0x00000000
   85a2c:	43415254 	.word	0x43415254
   85a30:	53415f45 	.word	0x53415f45
   85a34:	54524553 	.word	0x54524553
   85a38:	5476203a 	.word	0x5476203a
   85a3c:	65636172 	.word	0x65636172
   85a40:	726f7453 	.word	0x726f7453
   85a44:	72654b65 	.word	0x72654b65
   85a48:	436c656e 	.word	0x436c656e
   85a4c:	576c6c61 	.word	0x576c6c61
   85a50:	50687469 	.word	0x50687469
   85a54:	6d617261 	.word	0x6d617261
   85a58:	626f203a 	.word	0x626f203a
   85a5c:	7463656a 	.word	0x7463656a
   85a60:	73616c43 	.word	0x73616c43
   85a64:	3d3e2073 	.word	0x3d3e2073
   85a68:	41525420 	.word	0x41525420
   85a6c:	4e5f4543 	.word	0x4e5f4543
   85a70:	53414c43 	.word	0x53414c43
   85a74:	00534553 	.word	0x00534553
   85a78:	43415254 	.word	0x43415254
   85a7c:	53415f45 	.word	0x53415f45
   85a80:	54524553 	.word	0x54524553
   85a84:	5476203a 	.word	0x5476203a
   85a88:	65636172 	.word	0x65636172
   85a8c:	726f7453 	.word	0x726f7453
   85a90:	72654b65 	.word	0x72654b65
   85a94:	436c656e 	.word	0x436c656e
   85a98:	576c6c61 	.word	0x576c6c61
   85a9c:	50687469 	.word	0x50687469
   85aa0:	6d617261 	.word	0x6d617261
   85aa4:	6e49203a 	.word	0x6e49203a
   85aa8:	696c6176 	.word	0x696c6176
   85aac:	61762064 	.word	0x61762064
   85ab0:	2065756c 	.word	0x2065756c
   85ab4:	20726f66 	.word	0x20726f66
   85ab8:	656a626f 	.word	0x656a626f
   85abc:	754e7463 	.word	0x754e7463
   85ac0:	7265626d 	.word	0x7265626d
   85ac4:	00000000 	.word	0x00000000
   85ac8:	6f636552 	.word	0x6f636552
   85acc:	72656472 	.word	0x72656472
   85ad0:	73756220 	.word	0x73756220
   85ad4:	202d2079 	.word	0x202d2079
   85ad8:	68676968 	.word	0x68676968
   85adc:	69727020 	.word	0x69727020
   85ae0:	7469726f 	.word	0x7469726f
   85ae4:	53492079 	.word	0x53492079
   85ae8:	73752052 	.word	0x73752052
   85aec:	20676e69 	.word	0x20676e69
   85af0:	63737973 	.word	0x63737973
   85af4:	3f6c6c61 	.word	0x3f6c6c61
   85af8:	29332820 	.word	0x29332820
   85afc:	00000000 	.word	0x00000000
   85b00:	43415254 	.word	0x43415254
   85b04:	53415f45 	.word	0x53415f45
   85b08:	54524553 	.word	0x54524553
   85b0c:	5476203a 	.word	0x5476203a
   85b10:	65636172 	.word	0x65636172
   85b14:	726f7453 	.word	0x726f7453
   85b18:	72654b65 	.word	0x72654b65
   85b1c:	436c656e 	.word	0x436c656e
   85b20:	576c6c61 	.word	0x576c6c61
   85b24:	4e687469 	.word	0x4e687469
   85b28:	72656d75 	.word	0x72656d75
   85b2c:	61506369 	.word	0x61506369
   85b30:	4f6d6172 	.word	0x4f6d6172
   85b34:	3a796c6e 	.word	0x3a796c6e
   85b38:	766e4920 	.word	0x766e4920
   85b3c:	64696c61 	.word	0x64696c61
   85b40:	6c617620 	.word	0x6c617620
   85b44:	66206575 	.word	0x66206575
   85b48:	6520726f 	.word	0x6520726f
   85b4c:	6f637476 	.word	0x6f637476
   85b50:	00006564 	.word	0x00006564
   85b54:	6f636552 	.word	0x6f636552
   85b58:	72656472 	.word	0x72656472
   85b5c:	73756220 	.word	0x73756220
   85b60:	202d2079 	.word	0x202d2079
   85b64:	68676968 	.word	0x68676968
   85b68:	69727020 	.word	0x69727020
   85b6c:	7469726f 	.word	0x7469726f
   85b70:	53492079 	.word	0x53492079
   85b74:	73752052 	.word	0x73752052
   85b78:	20676e69 	.word	0x20676e69
   85b7c:	63737973 	.word	0x63737973
   85b80:	3f6c6c61 	.word	0x3f6c6c61
   85b84:	29342820 	.word	0x29342820
   85b88:	00000000 	.word	0x00000000
   85b8c:	43415254 	.word	0x43415254
   85b90:	53415f45 	.word	0x53415f45
   85b94:	54524553 	.word	0x54524553
   85b98:	5476203a 	.word	0x5476203a
   85b9c:	65636172 	.word	0x65636172
   85ba0:	726f7453 	.word	0x726f7453
   85ba4:	6a624f65 	.word	0x6a624f65
   85ba8:	4e746365 	.word	0x4e746365
   85bac:	4f656d61 	.word	0x4f656d61
   85bb0:	6f6c436e 	.word	0x6f6c436e
   85bb4:	76456573 	.word	0x76456573
   85bb8:	3a746e65 	.word	0x3a746e65
   85bbc:	6a626f20 	.word	0x6a626f20
   85bc0:	63746365 	.word	0x63746365
   85bc4:	7373616c 	.word	0x7373616c
   85bc8:	203d3e20 	.word	0x203d3e20
   85bcc:	43415254 	.word	0x43415254
   85bd0:	434e5f45 	.word	0x434e5f45
   85bd4:	5353414c 	.word	0x5353414c
   85bd8:	00005345 	.word	0x00005345
   85bdc:	43415254 	.word	0x43415254
   85be0:	53415f45 	.word	0x53415f45
   85be4:	54524553 	.word	0x54524553
   85be8:	5476203a 	.word	0x5476203a
   85bec:	65636172 	.word	0x65636172
   85bf0:	726f7453 	.word	0x726f7453
   85bf4:	6a624f65 	.word	0x6a624f65
   85bf8:	4e746365 	.word	0x4e746365
   85bfc:	4f656d61 	.word	0x4f656d61
   85c00:	6f6c436e 	.word	0x6f6c436e
   85c04:	76456573 	.word	0x76456573
   85c08:	3a746e65 	.word	0x3a746e65
   85c0c:	766e4920 	.word	0x766e4920
   85c10:	64696c61 	.word	0x64696c61
   85c14:	6c617620 	.word	0x6c617620
   85c18:	66206575 	.word	0x66206575
   85c1c:	6820726f 	.word	0x6820726f
   85c20:	6c646e61 	.word	0x6c646e61
   85c24:	00000065 	.word	0x00000065
   85c28:	43415254 	.word	0x43415254
   85c2c:	53415f45 	.word	0x53415f45
   85c30:	54524553 	.word	0x54524553
   85c34:	5476203a 	.word	0x5476203a
   85c38:	65636172 	.word	0x65636172
   85c3c:	726f7453 	.word	0x726f7453
   85c40:	6a624f65 	.word	0x6a624f65
   85c44:	50746365 	.word	0x50746365
   85c48:	65706f72 	.word	0x65706f72
   85c4c:	65697472 	.word	0x65697472
   85c50:	436e4f73 	.word	0x436e4f73
   85c54:	65736f6c 	.word	0x65736f6c
   85c58:	6e657645 	.word	0x6e657645
   85c5c:	6f203a74 	.word	0x6f203a74
   85c60:	63656a62 	.word	0x63656a62
   85c64:	616c6374 	.word	0x616c6374
   85c68:	3e207373 	.word	0x3e207373
   85c6c:	5254203d 	.word	0x5254203d
   85c70:	5f454341 	.word	0x5f454341
   85c74:	414c434e 	.word	0x414c434e
   85c78:	53455353 	.word	0x53455353
   85c7c:	00000000 	.word	0x00000000
   85c80:	43415254 	.word	0x43415254
   85c84:	53415f45 	.word	0x53415f45
   85c88:	54524553 	.word	0x54524553
   85c8c:	5476203a 	.word	0x5476203a
   85c90:	65636172 	.word	0x65636172
   85c94:	726f7453 	.word	0x726f7453
   85c98:	6a624f65 	.word	0x6a624f65
   85c9c:	50746365 	.word	0x50746365
   85ca0:	65706f72 	.word	0x65706f72
   85ca4:	65697472 	.word	0x65697472
   85ca8:	436e4f73 	.word	0x436e4f73
   85cac:	65736f6c 	.word	0x65736f6c
   85cb0:	6e657645 	.word	0x6e657645
   85cb4:	49203a74 	.word	0x49203a74
   85cb8:	6c61766e 	.word	0x6c61766e
   85cbc:	76206469 	.word	0x76206469
   85cc0:	65756c61 	.word	0x65756c61
   85cc4:	726f6620 	.word	0x726f6620
   85cc8:	6e616820 	.word	0x6e616820
   85ccc:	00656c64 	.word	0x00656c64
   85cd0:	43415254 	.word	0x43415254
   85cd4:	53415f45 	.word	0x53415f45
   85cd8:	54524553 	.word	0x54524553
   85cdc:	5476203a 	.word	0x5476203a
   85ce0:	65636172 	.word	0x65636172
   85ce4:	50746553 	.word	0x50746553
   85ce8:	726f6972 	.word	0x726f6972
   85cec:	50797469 	.word	0x50797469
   85cf0:	65706f72 	.word	0x65706f72
   85cf4:	3a797472 	.word	0x3a797472
   85cf8:	6a626f20 	.word	0x6a626f20
   85cfc:	63746365 	.word	0x63746365
   85d00:	7373616c 	.word	0x7373616c
   85d04:	203d3e20 	.word	0x203d3e20
   85d08:	43415254 	.word	0x43415254
   85d0c:	434e5f45 	.word	0x434e5f45
   85d10:	5353414c 	.word	0x5353414c
   85d14:	00005345 	.word	0x00005345
   85d18:	43415254 	.word	0x43415254
   85d1c:	53415f45 	.word	0x53415f45
   85d20:	54524553 	.word	0x54524553
   85d24:	5476203a 	.word	0x5476203a
   85d28:	65636172 	.word	0x65636172
   85d2c:	50746553 	.word	0x50746553
   85d30:	726f6972 	.word	0x726f6972
   85d34:	50797469 	.word	0x50797469
   85d38:	65706f72 	.word	0x65706f72
   85d3c:	3a797472 	.word	0x3a797472
   85d40:	766e4920 	.word	0x766e4920
   85d44:	64696c61 	.word	0x64696c61
   85d48:	6c617620 	.word	0x6c617620
   85d4c:	66206575 	.word	0x66206575
   85d50:	6920726f 	.word	0x6920726f
   85d54:	00000064 	.word	0x00000064
   85d58:	43415254 	.word	0x43415254
   85d5c:	53415f45 	.word	0x53415f45
   85d60:	54524553 	.word	0x54524553
   85d64:	6975203a 	.word	0x6975203a
   85d68:	63617254 	.word	0x63617254
   85d6c:	74654765 	.word	0x74654765
   85d70:	6f697250 	.word	0x6f697250
   85d74:	79746972 	.word	0x79746972
   85d78:	706f7250 	.word	0x706f7250
   85d7c:	79747265 	.word	0x79747265
   85d80:	626f203a 	.word	0x626f203a
   85d84:	7463656a 	.word	0x7463656a
   85d88:	73616c63 	.word	0x73616c63
   85d8c:	3d3e2073 	.word	0x3d3e2073
   85d90:	41525420 	.word	0x41525420
   85d94:	4e5f4543 	.word	0x4e5f4543
   85d98:	53414c43 	.word	0x53414c43
   85d9c:	00534553 	.word	0x00534553
   85da0:	43415254 	.word	0x43415254
   85da4:	53415f45 	.word	0x53415f45
   85da8:	54524553 	.word	0x54524553
   85dac:	6975203a 	.word	0x6975203a
   85db0:	63617254 	.word	0x63617254
   85db4:	74654765 	.word	0x74654765
   85db8:	6f697250 	.word	0x6f697250
   85dbc:	79746972 	.word	0x79746972
   85dc0:	706f7250 	.word	0x706f7250
   85dc4:	79747265 	.word	0x79747265
   85dc8:	6e49203a 	.word	0x6e49203a
   85dcc:	696c6176 	.word	0x696c6176
   85dd0:	61762064 	.word	0x61762064
   85dd4:	2065756c 	.word	0x2065756c
   85dd8:	20726f66 	.word	0x20726f66
   85ddc:	00006469 	.word	0x00006469
   85de0:	43415254 	.word	0x43415254
   85de4:	53415f45 	.word	0x53415f45
   85de8:	54524553 	.word	0x54524553
   85dec:	5476203a 	.word	0x5476203a
   85df0:	65636172 	.word	0x65636172
   85df4:	4f746553 	.word	0x4f746553
   85df8:	63656a62 	.word	0x63656a62
   85dfc:	61745374 	.word	0x61745374
   85e00:	203a6574 	.word	0x203a6574
   85e04:	656a626f 	.word	0x656a626f
   85e08:	6c637463 	.word	0x6c637463
   85e0c:	20737361 	.word	0x20737361
   85e10:	54203d3e 	.word	0x54203d3e
   85e14:	45434152 	.word	0x45434152
   85e18:	4c434e5f 	.word	0x4c434e5f
   85e1c:	45535341 	.word	0x45535341
   85e20:	00000053 	.word	0x00000053
   85e24:	43415254 	.word	0x43415254
   85e28:	53415f45 	.word	0x53415f45
   85e2c:	54524553 	.word	0x54524553
   85e30:	5476203a 	.word	0x5476203a
   85e34:	65636172 	.word	0x65636172
   85e38:	4f746553 	.word	0x4f746553
   85e3c:	63656a62 	.word	0x63656a62
   85e40:	61745374 	.word	0x61745374
   85e44:	203a6574 	.word	0x203a6574
   85e48:	61766e49 	.word	0x61766e49
   85e4c:	2064696c 	.word	0x2064696c
   85e50:	756c6176 	.word	0x756c6176
   85e54:	6f662065 	.word	0x6f662065
   85e58:	64692072 	.word	0x64692072
   85e5c:	00000000 	.word	0x00000000
   85e60:	43415254 	.word	0x43415254
   85e64:	53415f45 	.word	0x53415f45
   85e68:	54524553 	.word	0x54524553
   85e6c:	6975203a 	.word	0x6975203a
   85e70:	63617254 	.word	0x63617254
   85e74:	74654765 	.word	0x74654765
   85e78:	656a624f 	.word	0x656a624f
   85e7c:	74537463 	.word	0x74537463
   85e80:	3a657461 	.word	0x3a657461
   85e84:	6a626f20 	.word	0x6a626f20
   85e88:	63746365 	.word	0x63746365
   85e8c:	7373616c 	.word	0x7373616c
   85e90:	203d3e20 	.word	0x203d3e20
   85e94:	43415254 	.word	0x43415254
   85e98:	434e5f45 	.word	0x434e5f45
   85e9c:	5353414c 	.word	0x5353414c
   85ea0:	00005345 	.word	0x00005345
   85ea4:	43415254 	.word	0x43415254
   85ea8:	53415f45 	.word	0x53415f45
   85eac:	54524553 	.word	0x54524553
   85eb0:	6975203a 	.word	0x6975203a
   85eb4:	63617254 	.word	0x63617254
   85eb8:	74654765 	.word	0x74654765
   85ebc:	656a624f 	.word	0x656a624f
   85ec0:	74537463 	.word	0x74537463
   85ec4:	3a657461 	.word	0x3a657461
   85ec8:	766e4920 	.word	0x766e4920
   85ecc:	64696c61 	.word	0x64696c61
   85ed0:	6c617620 	.word	0x6c617620
   85ed4:	66206575 	.word	0x66206575
   85ed8:	6920726f 	.word	0x6920726f
   85edc:	00000064 	.word	0x00000064
   85ee0:	43415254 	.word	0x43415254
   85ee4:	53415f45 	.word	0x53415f45
   85ee8:	54524553 	.word	0x54524553
   85eec:	5476203a 	.word	0x5476203a
   85ef0:	65636172 	.word	0x65636172
   85ef4:	726f7453 	.word	0x726f7453
   85ef8:	73615465 	.word	0x73615465
   85efc:	6977736b 	.word	0x6977736b
   85f00:	3a686374 	.word	0x3a686374
   85f04:	766e4920 	.word	0x766e4920
   85f08:	64696c61 	.word	0x64696c61
   85f0c:	6c617620 	.word	0x6c617620
   85f10:	66206575 	.word	0x66206575
   85f14:	7420726f 	.word	0x7420726f
   85f18:	5f6b7361 	.word	0x5f6b7361
   85f1c:	646e6168 	.word	0x646e6168
   85f20:	0000656c 	.word	0x0000656c
   85f24:	43415254 	.word	0x43415254
   85f28:	53415f45 	.word	0x53415f45
   85f2c:	54524553 	.word	0x54524553
   85f30:	5476203a 	.word	0x5476203a
   85f34:	65636172 	.word	0x65636172
   85f38:	54746553 	.word	0x54746553
   85f3c:	496b7361 	.word	0x496b7361
   85f40:	6174736e 	.word	0x6174736e
   85f44:	4665636e 	.word	0x4665636e
   85f48:	73696e69 	.word	0x73696e69
   85f4c:	3a646568 	.word	0x3a646568
   85f50:	766e4920 	.word	0x766e4920
   85f54:	64696c61 	.word	0x64696c61
   85f58:	6c617620 	.word	0x6c617620
   85f5c:	66206575 	.word	0x66206575
   85f60:	6820726f 	.word	0x6820726f
   85f64:	6c646e61 	.word	0x6c646e61
   85f68:	00000065 	.word	0x00000065
   85f6c:	20746f4e 	.word	0x20746f4e
   85f70:	756f6e65 	.word	0x756f6e65
   85f74:	54206867 	.word	0x54206867
   85f78:	204b5341 	.word	0x204b5341
   85f7c:	646e6168 	.word	0x646e6168
   85f80:	2073656c 	.word	0x2073656c
   85f84:	6e69202d 	.word	0x6e69202d
   85f88:	61657263 	.word	0x61657263
   85f8c:	4e206573 	.word	0x4e206573
   85f90:	6b736154 	.word	0x6b736154
   85f94:	206e6920 	.word	0x206e6920
   85f98:	43637274 	.word	0x43637274
   85f9c:	69666e6f 	.word	0x69666e6f
   85fa0:	00682e67 	.word	0x00682e67
   85fa4:	20746f4e 	.word	0x20746f4e
   85fa8:	756f6e65 	.word	0x756f6e65
   85fac:	49206867 	.word	0x49206867
   85fb0:	68205253 	.word	0x68205253
   85fb4:	6c646e61 	.word	0x6c646e61
   85fb8:	2d207365 	.word	0x2d207365
   85fbc:	636e6920 	.word	0x636e6920
   85fc0:	73616572 	.word	0x73616572
   85fc4:	494e2065 	.word	0x494e2065
   85fc8:	69205253 	.word	0x69205253
   85fcc:	7274206e 	.word	0x7274206e
   85fd0:	6e6f4363 	.word	0x6e6f4363
   85fd4:	2e676966 	.word	0x2e676966
   85fd8:	00000068 	.word	0x00000068
   85fdc:	20746f4e 	.word	0x20746f4e
   85fe0:	756f6e65 	.word	0x756f6e65
   85fe4:	53206867 	.word	0x53206867
   85fe8:	50414d45 	.word	0x50414d45
   85fec:	45524f48 	.word	0x45524f48
   85ff0:	6e616820 	.word	0x6e616820
   85ff4:	73656c64 	.word	0x73656c64
   85ff8:	69202d20 	.word	0x69202d20
   85ffc:	6572636e 	.word	0x6572636e
   86000:	20657361 	.word	0x20657361
   86004:	6d65534e 	.word	0x6d65534e
   86008:	6f687061 	.word	0x6f687061
   8600c:	69206572 	.word	0x69206572
   86010:	7274206e 	.word	0x7274206e
   86014:	6e6f4363 	.word	0x6e6f4363
   86018:	2e676966 	.word	0x2e676966
   8601c:	00000068 	.word	0x00000068
   86020:	20746f4e 	.word	0x20746f4e
   86024:	756f6e65 	.word	0x756f6e65
   86028:	4d206867 	.word	0x4d206867
   8602c:	58455455 	.word	0x58455455
   86030:	6e616820 	.word	0x6e616820
   86034:	73656c64 	.word	0x73656c64
   86038:	69202d20 	.word	0x69202d20
   8603c:	6572636e 	.word	0x6572636e
   86040:	20657361 	.word	0x20657361
   86044:	74754d4e 	.word	0x74754d4e
   86048:	69207865 	.word	0x69207865
   8604c:	7274206e 	.word	0x7274206e
   86050:	6e6f4363 	.word	0x6e6f4363
   86054:	2e676966 	.word	0x2e676966
   86058:	00000068 	.word	0x00000068
   8605c:	20746f4e 	.word	0x20746f4e
   86060:	756f6e65 	.word	0x756f6e65
   86064:	51206867 	.word	0x51206867
   86068:	45554555 	.word	0x45554555
   8606c:	6e616820 	.word	0x6e616820
   86070:	73656c64 	.word	0x73656c64
   86074:	69202d20 	.word	0x69202d20
   86078:	6572636e 	.word	0x6572636e
   8607c:	20657361 	.word	0x20657361
   86080:	6575514e 	.word	0x6575514e
   86084:	69206575 	.word	0x69206575
   86088:	7274206e 	.word	0x7274206e
   8608c:	6e6f4363 	.word	0x6e6f4363
   86090:	2e676966 	.word	0x2e676966
   86094:	00000068 	.word	0x00000068
   86098:	20746f4e 	.word	0x20746f4e
   8609c:	756f6e65 	.word	0x756f6e65
   860a0:	54206867 	.word	0x54206867
   860a4:	52454d49 	.word	0x52454d49
   860a8:	6e616820 	.word	0x6e616820
   860ac:	73656c64 	.word	0x73656c64
   860b0:	69202d20 	.word	0x69202d20
   860b4:	6572636e 	.word	0x6572636e
   860b8:	20657361 	.word	0x20657361
   860bc:	6d69544e 	.word	0x6d69544e
   860c0:	69207265 	.word	0x69207265
   860c4:	7274206e 	.word	0x7274206e
   860c8:	6e6f4363 	.word	0x6e6f4363
   860cc:	2e676966 	.word	0x2e676966
   860d0:	00000068 	.word	0x00000068
   860d4:	20746f4e 	.word	0x20746f4e
   860d8:	756f6e65 	.word	0x756f6e65
   860dc:	45206867 	.word	0x45206867
   860e0:	544e4556 	.word	0x544e4556
   860e4:	554f5247 	.word	0x554f5247
   860e8:	61682050 	.word	0x61682050
   860ec:	656c646e 	.word	0x656c646e
   860f0:	202d2073 	.word	0x202d2073
   860f4:	72636e69 	.word	0x72636e69
   860f8:	65736165 	.word	0x65736165
   860fc:	76454e20 	.word	0x76454e20
   86100:	47746e65 	.word	0x47746e65
   86104:	70756f72 	.word	0x70756f72
   86108:	206e6920 	.word	0x206e6920
   8610c:	43637274 	.word	0x43637274
   86110:	69666e6f 	.word	0x69666e6f
   86114:	00682e67 	.word	0x00682e67
   86118:	547a7370 	.word	0x547a7370
   8611c:	65636172 	.word	0x65636172
   86120:	45746547 	.word	0x45746547
   86124:	726f7272 	.word	0x726f7272
   86128:	646e6148 	.word	0x646e6148
   8612c:	3a73656c 	.word	0x3a73656c
   86130:	766e4920 	.word	0x766e4920
   86134:	64696c61 	.word	0x64696c61
   86138:	6a626f20 	.word	0x6a626f20
   8613c:	63746365 	.word	0x63746365
   86140:	7373616c 	.word	0x7373616c
   86144:	00000021 	.word	0x00000021
   86148:	43415254 	.word	0x43415254
   8614c:	53415f45 	.word	0x53415f45
   86150:	54524553 	.word	0x54524553
   86154:	7270203a 	.word	0x7270203a
   86158:	61725476 	.word	0x61725476
   8615c:	73496563 	.word	0x73496563
   86160:	656a624f 	.word	0x656a624f
   86164:	78457463 	.word	0x78457463
   86168:	64756c63 	.word	0x64756c63
   8616c:	203a6465 	.word	0x203a6465
   86170:	656a626f 	.word	0x656a626f
   86174:	6c637463 	.word	0x6c637463
   86178:	20737361 	.word	0x20737361
   8617c:	54203d3e 	.word	0x54203d3e
   86180:	45434152 	.word	0x45434152
   86184:	4c434e5f 	.word	0x4c434e5f
   86188:	45535341 	.word	0x45535341
   8618c:	00000053 	.word	0x00000053
   86190:	43415254 	.word	0x43415254
   86194:	53415f45 	.word	0x53415f45
   86198:	54524553 	.word	0x54524553
   8619c:	6975203a 	.word	0x6975203a
   861a0:	63617254 	.word	0x63617254
   861a4:	4f734965 	.word	0x4f734965
   861a8:	63656a62 	.word	0x63656a62
   861ac:	63784574 	.word	0x63784574
   861b0:	6564756c 	.word	0x6564756c
   861b4:	49203a64 	.word	0x49203a64
   861b8:	6c61766e 	.word	0x6c61766e
   861bc:	76206469 	.word	0x76206469
   861c0:	65756c61 	.word	0x65756c61
   861c4:	726f6620 	.word	0x726f6620
   861c8:	6e616820 	.word	0x6e616820
   861cc:	00656c64 	.word	0x00656c64
   861d0:	61766e49 	.word	0x61766e49
   861d4:	2064696c 	.word	0x2064696c
   861d8:	656a626f 	.word	0x656a626f
   861dc:	63207463 	.word	0x63207463
   861e0:	7373616c 	.word	0x7373616c
   861e4:	20444920 	.word	0x20444920
   861e8:	75206e69 	.word	0x75206e69
   861ec:	61725469 	.word	0x61725469
   861f0:	73496563 	.word	0x73496563
   861f4:	656a624f 	.word	0x656a624f
   861f8:	78457463 	.word	0x78457463
   861fc:	64756c63 	.word	0x64756c63
   86200:	00216465 	.word	0x00216465
   86204:	43415254 	.word	0x43415254
   86208:	53415f45 	.word	0x53415f45
   8620c:	54524553 	.word	0x54524553
   86210:	7277203a 	.word	0x7277203a
   86214:	49657469 	.word	0x49657469
   86218:	3233746e 	.word	0x3233746e
   8621c:	7562203a 	.word	0x7562203a
   86220:	72656666 	.word	0x72656666
   86224:	203d3d20 	.word	0x203d3d20
   86228:	4c4c554e 	.word	0x4c4c554e
   8622c:	00000000 	.word	0x00000000
   86230:	43415254 	.word	0x43415254
   86234:	53415f45 	.word	0x53415f45
   86238:	54524553 	.word	0x54524553
   8623c:	7277203a 	.word	0x7277203a
   86240:	49657469 	.word	0x49657469
   86244:	3631746e 	.word	0x3631746e
   86248:	7562203a 	.word	0x7562203a
   8624c:	72656666 	.word	0x72656666
   86250:	203d3d20 	.word	0x203d3d20
   86254:	4c4c554e 	.word	0x4c4c554e
   86258:	00000000 	.word	0x00000000
   8625c:	6f636552 	.word	0x6f636552
   86260:	72656472 	.word	0x72656472
   86264:	61746144 	.word	0x61746144
   86268:	20727450 	.word	0x20727450
   8626c:	4e207369 	.word	0x4e207369
   86270:	2e4c4c55 	.word	0x2e4c4c55
   86274:	6c614320 	.word	0x6c614320
   86278:	5476206c 	.word	0x5476206c
   8627c:	65636172 	.word	0x65636172
   86280:	74696e49 	.word	0x74696e49
   86284:	63617254 	.word	0x63617254
   86288:	74614465 	.word	0x74614465
   8628c:	20292861 	.word	0x20292861
   86290:	6f666562 	.word	0x6f666562
   86294:	73206572 	.word	0x73206572
   86298:	74726174 	.word	0x74726174
   8629c:	20676e69 	.word	0x20676e69
   862a0:	63617274 	.word	0x63617274
   862a4:	00002e65 	.word	0x00002e65
   862a8:	61747328 	.word	0x61747328
   862ac:	70757472 	.word	0x70757472
   862b0:	00000029 	.word	0x00000029
   862b4:	43415254 	.word	0x43415254
   862b8:	53415f45 	.word	0x53415f45
   862bc:	54524553 	.word	0x54524553
   862c0:	5476203a 	.word	0x5476203a
   862c4:	65636172 	.word	0x65636172
   862c8:	49746553 	.word	0x49746553
   862cc:	72505253 	.word	0x72505253
   862d0:	7265706f 	.word	0x7265706f
   862d4:	73656974 	.word	0x73656974
   862d8:	6e49203a 	.word	0x6e49203a
   862dc:	696c6176 	.word	0x696c6176
   862e0:	61762064 	.word	0x61762064
   862e4:	2065756c 	.word	0x2065756c
   862e8:	20726f66 	.word	0x20726f66
   862ec:	646e6168 	.word	0x646e6168
   862f0:	0000656c 	.word	0x0000656c
   862f4:	43415254 	.word	0x43415254
   862f8:	53415f45 	.word	0x53415f45
   862fc:	54524553 	.word	0x54524553
   86300:	5476203a 	.word	0x5476203a
   86304:	65636172 	.word	0x65636172
   86308:	49746553 	.word	0x49746553
   8630c:	72505253 	.word	0x72505253
   86310:	7265706f 	.word	0x7265706f
   86314:	73656974 	.word	0x73656974
   86318:	616e203a 	.word	0x616e203a
   8631c:	3d20656d 	.word	0x3d20656d
   86320:	554e203d 	.word	0x554e203d
   86324:	00004c4c 	.word	0x00004c4c
   86328:	656c6c49 	.word	0x656c6c49
   8632c:	206c6167 	.word	0x206c6167
   86330:	6c6c6163 	.word	0x6c6c6163
   86334:	206f7420 	.word	0x206f7420
   86338:	61725476 	.word	0x61725476
   8633c:	74536563 	.word	0x74536563
   86340:	4965726f 	.word	0x4965726f
   86344:	65425253 	.word	0x65425253
   86348:	2c6e6967 	.word	0x2c6e6967
   8634c:	63657220 	.word	0x63657220
   86350:	6564726f 	.word	0x6564726f
   86354:	75622072 	.word	0x75622072
   86358:	00217973 	.word	0x00217973
   8635c:	43415254 	.word	0x43415254
   86360:	53415f45 	.word	0x53415f45
   86364:	54524553 	.word	0x54524553
   86368:	5476203a 	.word	0x5476203a
   8636c:	65636172 	.word	0x65636172
   86370:	726f7453 	.word	0x726f7453
   86374:	52534965 	.word	0x52534965
   86378:	69676542 	.word	0x69676542
   8637c:	49203a6e 	.word	0x49203a6e
   86380:	6c61766e 	.word	0x6c61766e
   86384:	76206469 	.word	0x76206469
   86388:	65756c61 	.word	0x65756c61
   8638c:	726f6620 	.word	0x726f6620
   86390:	6e616820 	.word	0x6e616820
   86394:	00656c64 	.word	0x00656c64
   86398:	206f6f54 	.word	0x206f6f54
   8639c:	796e616d 	.word	0x796e616d
   863a0:	73656e20 	.word	0x73656e20
   863a4:	20646574 	.word	0x20646574
   863a8:	65746e69 	.word	0x65746e69
   863ac:	70757272 	.word	0x70757272
   863b0:	00217374 	.word	0x00217374
   863b4:	656c6c49 	.word	0x656c6c49
   863b8:	206c6167 	.word	0x206c6167
   863bc:	6c6c6163 	.word	0x6c6c6163
   863c0:	206f7420 	.word	0x206f7420
   863c4:	61725476 	.word	0x61725476
   863c8:	74536563 	.word	0x74536563
   863cc:	4965726f 	.word	0x4965726f
   863d0:	6e455253 	.word	0x6e455253
   863d4:	72202c64 	.word	0x72202c64
   863d8:	726f6365 	.word	0x726f6365
   863dc:	20726564 	.word	0x20726564
   863e0:	79737562 	.word	0x79737562
   863e4:	00000021 	.word	0x00000021
   863e8:	616d6e55 	.word	0x616d6e55
   863ec:	65686374 	.word	0x65686374
   863f0:	61632064 	.word	0x61632064
   863f4:	74206c6c 	.word	0x74206c6c
   863f8:	5476206f 	.word	0x5476206f
   863fc:	65636172 	.word	0x65636172
   86400:	726f7453 	.word	0x726f7453
   86404:	52534965 	.word	0x52534965
   86408:	20646e45 	.word	0x20646e45
   8640c:	53496e28 	.word	0x53496e28
   86410:	74636152 	.word	0x74636152
   86414:	20657669 	.word	0x20657669
   86418:	30203d3d 	.word	0x30203d3d
   8641c:	7865202c 	.word	0x7865202c
   86420:	74636570 	.word	0x74636570
   86424:	3e206465 	.word	0x3e206465
   86428:	00293020 	.word	0x00293020
   8642c:	43415254 	.word	0x43415254
   86430:	53415f45 	.word	0x53415f45
   86434:	54524553 	.word	0x54524553
   86438:	5476203a 	.word	0x5476203a
   8643c:	65636172 	.word	0x65636172
   86440:	72657355 	.word	0x72657355
   86444:	6e657645 	.word	0x6e657645
   86448:	49203a74 	.word	0x49203a74
   8644c:	6c61766e 	.word	0x6c61766e
   86450:	76206469 	.word	0x76206469
   86454:	65756c61 	.word	0x65756c61
   86458:	726f6620 	.word	0x726f6620
   8645c:	65766520 	.word	0x65766520
   86460:	614c746e 	.word	0x614c746e
   86464:	006c6562 	.word	0x006c6562
   86468:	43415254 	.word	0x43415254
   8646c:	53415f45 	.word	0x53415f45
   86470:	54524553 	.word	0x54524553
   86474:	5478203a 	.word	0x5478203a
   86478:	65636172 	.word	0x65636172
   8647c:	6e65704f 	.word	0x6e65704f
   86480:	6562614c 	.word	0x6562614c
   86484:	6c203a6c 	.word	0x6c203a6c
   86488:	6c656261 	.word	0x6c656261
   8648c:	203d3d20 	.word	0x203d3d20
   86490:	4c4c554e 	.word	0x4c4c554e
   86494:	00000000 	.word	0x00000000
   86498:	43415254 	.word	0x43415254
   8649c:	53415f45 	.word	0x53415f45
   864a0:	54524553 	.word	0x54524553
   864a4:	5476203a 	.word	0x5476203a
   864a8:	65636172 	.word	0x65636172
   864ac:	6e697250 	.word	0x6e697250
   864b0:	203a4674 	.word	0x203a4674
   864b4:	6d726f66 	.word	0x6d726f66
   864b8:	74537461 	.word	0x74537461
   864bc:	3d3d2072 	.word	0x3d3d2072
   864c0:	4c554e20 	.word	0x4c554e20
   864c4:	0000004c 	.word	0x0000004c
   864c8:	61725476 	.word	0x61725476
   864cc:	72506563 	.word	0x72506563
   864d0:	46746e69 	.word	0x46746e69
   864d4:	54202d20 	.word	0x54202d20
   864d8:	6d206f6f 	.word	0x6d206f6f
   864dc:	20796e61 	.word	0x20796e61
   864e0:	75677261 	.word	0x75677261
   864e4:	746e656d 	.word	0x746e656d
   864e8:	6d202c73 	.word	0x6d202c73
   864ec:	31207861 	.word	0x31207861
   864f0:	6c612035 	.word	0x6c612035
   864f4:	65776f6c 	.word	0x65776f6c
   864f8:	00002164 	.word	0x00002164
   864fc:	61725476 	.word	0x61725476
   86500:	72506563 	.word	0x72506563
   86504:	46746e69 	.word	0x46746e69
   86508:	54202d20 	.word	0x54202d20
   8650c:	6c206f6f 	.word	0x6c206f6f
   86510:	65677261 	.word	0x65677261
   86514:	67726120 	.word	0x67726120
   86518:	6e656d75 	.word	0x6e656d75
   8651c:	202c7374 	.word	0x202c7374
   86520:	2078616d 	.word	0x2078616d
   86524:	62203233 	.word	0x62203233
   86528:	20657479 	.word	0x20657479
   8652c:	6f6c6c61 	.word	0x6f6c6c61
   86530:	21646577 	.word	0x21646577
   86534:	00000000 	.word	0x00000000
   86538:	6b736154 	.word	0x6b736154
   8653c:	69203120 	.word	0x69203120
   86540:	75722073 	.word	0x75722073
   86544:	6e696e6e 	.word	0x6e696e6e
   86548:	00000a67 	.word	0x00000a67
   8654c:	6b736154 	.word	0x6b736154
   86550:	69203220 	.word	0x69203220
   86554:	75722073 	.word	0x75722073
   86558:	6e696e6e 	.word	0x6e696e6e
   8655c:	00000a67 	.word	0x00000a67
   86560:	47202d2d 	.word	0x47202d2d
   86564:	69747465 	.word	0x69747465
   86568:	5320676e 	.word	0x5320676e
   8656c:	74726174 	.word	0x74726174
   86570:	45206465 	.word	0x45206465
   86574:	706d6178 	.word	0x706d6178
   86578:	2d20656c 	.word	0x2d20656c
   8657c:	2d0a0d2d 	.word	0x2d0a0d2d
   86580:	7241202d 	.word	0x7241202d
   86584:	6e697564 	.word	0x6e697564
   86588:	7544206f 	.word	0x7544206f
   8658c:	20582f65 	.word	0x20582f65
   86590:	0a0d2d2d 	.word	0x0a0d2d2d
   86594:	43202d2d 	.word	0x43202d2d
   86598:	69706d6f 	.word	0x69706d6f
   8659c:	3a64656c 	.word	0x3a64656c
   865a0:	6e614a20 	.word	0x6e614a20
   865a4:	20343220 	.word	0x20343220
   865a8:	37313032 	.word	0x37313032
   865ac:	3a303120 	.word	0x3a303120
   865b0:	353a3231 	.word	0x353a3231
   865b4:	2d2d2039 	.word	0x2d2d2039
   865b8:	0000000d 	.word	0x0000000d
   865bc:	6b736154 	.word	0x6b736154
   865c0:	00003120 	.word	0x00003120
   865c4:	6b736154 	.word	0x6b736154
   865c8:	00003220 	.word	0x00003220
   865cc:	00000043 	.word	0x00000043

000865d0 <_global_impure_ptr>:
   865d0:	20070148                                H.. 

000865d4 <_init>:
   865d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   865d6:	bf00      	nop
   865d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   865da:	bc08      	pop	{r3}
   865dc:	469e      	mov	lr, r3
   865de:	4770      	bx	lr

000865e0 <__init_array_start>:
   865e0:	00083a95 	.word	0x00083a95

000865e4 <__frame_dummy_init_array_entry>:
   865e4:	00080119                                ....

000865e8 <_fini>:
   865e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   865ea:	bf00      	nop
   865ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   865ee:	bc08      	pop	{r3}
   865f0:	469e      	mov	lr, r3
   865f2:	4770      	bx	lr

000865f4 <__fini_array_start>:
   865f4:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070138 	.word	0x20070138

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <xFreeBytesRemaining>:
20070130:	0000a000                                ....

20070134 <xNextTaskUnblockTime>:
20070134:	ffffffff                                ....

20070138 <SystemCoreClock>:
20070138:	003d0900                                ..=.

2007013c <readyEventsEnabled>:
2007013c:	00000001                                ....

20070140 <TraceObjectClassTable>:
20070140:	01010200 00000002                       ........

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
2007017c:	000865cc 00000000 00000000 00000000     .e..............
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <_impure_ptr>:
20070570:	20070148                                H.. 

20070574 <__malloc_av_>:
	...
2007057c:	20070574 20070574 2007057c 2007057c     t.. t.. |.. |.. 
2007058c:	20070584 20070584 2007058c 2007058c     ... ... ... ... 
2007059c:	20070594 20070594 2007059c 2007059c     ... ... ... ... 
200705ac:	200705a4 200705a4 200705ac 200705ac     ... ... ... ... 
200705bc:	200705b4 200705b4 200705bc 200705bc     ... ... ... ... 
200705cc:	200705c4 200705c4 200705cc 200705cc     ... ... ... ... 
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 

2007097c <__malloc_trim_threshold>:
2007097c:	00020000                                ....

20070980 <__malloc_sbrk_base>:
20070980:	ffffffff                                ....
